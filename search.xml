<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>8.split代码分割</title>
      <link href="/ypf-blog/2025/03/06/webpack4/8.split%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2/"/>
      <url>/ypf-blog/2025/03/06/webpack4/8.split%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="SplitChunksPlugin"><a href="#SplitChunksPlugin" class="headerlink" title="SplitChunksPlugin"></a>SplitChunksPlugin</h1><p><a href="https://www.webpackjs.com/plugins/split-chunks-plugin/#splitchunksmaxasyncrequests">SplitChunksPlugin</a> 是webapck的内置插件，用于分离优化代码,提取公共代码防止被重复打包.</p><blockquote><p>先来举个例子,webpack设置中有3个入口文件：<code>a.js、b.js 和 c.js</code>,每个入口都引入了<code>common.js</code>,如果不设置splitChunks, 此时打包结果是, 3个入口<code>都包含common.js</code>, 那么就会导致common.js重复引入, 影响性能。</p></blockquote><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>webpack通过<code>optimization</code>(英文最优化)来进行代码优化.</p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-attr">optimization</span>: &#123;<br>  <span class="hljs-attr">splitChunks</span>: &#123;<br>    <span class="hljs-comment">// 要分隔什么类型的代码块, 默认async异步</span><br>    <span class="hljs-comment">// all-代表所有代码块, async-异步代码块(import(xx)), initial-同步代码块(require(xx)/import x from xx), </span><br>    <span class="hljs-attr">chunks</span>: <span class="hljs-string">&quot;all&quot;</span>,<br><br>    <span class="hljs-comment">// 要生成chunk的最小体积, 默认20000bytes即20kb</span><br>    <span class="hljs-comment">// 超过该值才会分隔.如page1、page2都依赖title1、title2, 那么如果title1+title2&gt;=minSize, webpack会自动分割出一个page1~page2.js(title1、title2)</span><br>    <span class="hljs-attr">minSize</span>: <span class="hljs-number">0</span>,  <span class="hljs-comment">// 推荐用默认20k</span><br><br>    <span class="hljs-comment">// 设置拆分代码块的名称</span><br>    <span class="hljs-comment">// true-分隔符连接的原始代码块.默认~, 比如page1、page2都依赖title,title生成的chunk名就是 page1~page2.js</span><br>    <span class="hljs-comment">// false-title生成的是0.js这种文件名</span><br>    <span class="hljs-attr">name</span>: <span class="hljs-literal">true</span>,<br><br>    <span class="hljs-comment">// 设置分隔出的chunk的分隔符,默认~</span><br>    <span class="hljs-comment">// 比如page1、page2都依赖title,生成的chunk名就是 page1~page2.js(里面是title模块)</span><br>    <span class="hljs-attr">automaticNameDelimiter</span>: <span class="hljs-string">&quot;~&quot;</span>,<br><br>    <span class="hljs-comment">// 缓存组</span><br>    <span class="hljs-attr">cacheGroups</span>: &#123;<br>      <span class="hljs-comment">// 第三方库抽离,如果没有name, libs可以改成任意名字,比如aa, 打包生成的名字就是aa.js</span><br>      <span class="hljs-attr">libs</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;chunk-libs&#x27;</span>,<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/[\\/]node_modules[\\/]/</span>,<br>        <span class="hljs-attr">priority</span>: <span class="hljs-number">10</span>,  <span class="hljs-comment">//权重, 越高的权重, 会优先按此规则抽离</span><br>      &#125;,<br>      <span class="hljs-comment">// elementUI组件库单独打包</span><br>      <span class="hljs-attr">elementUI</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;chunk-elementUI&#x27;</span>, <span class="hljs-comment">// split elementUI into a single package</span><br>        <span class="hljs-attr">priority</span>: <span class="hljs-number">20</span>, <span class="hljs-comment">// the weight needs to be larger than libs and app or it will be packaged into libs or app</span><br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/[\\/]node_modules[\\/]_?element-ui(.*)/</span>, <span class="hljs-comment">// in order to adapt to cnpm</span><br>      &#125;,<br>      <span class="hljs-comment">// 公共模块抽离,如果没有name,可以改成任意名字,比如common1, 打包生成的名字就是common1.js</span><br>      <span class="hljs-attr">commons</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;chunk-commons&#x27;</span>,<br>        <span class="hljs-attr">test</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;src&#x27;</span>), <span class="hljs-comment">// can customize your rules</span><br>        <span class="hljs-attr">minChunks</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// 在分割之前，这个代码块最小应该被引用的次数</span><br>        <span class="hljs-attr">priority</span>: <span class="hljs-number">5</span>,<br>        <span class="hljs-attr">reuseExistingChunk</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 重用已存在的代码块, 测试没效果不知道为啥</span><br>      &#125;,<br>    &#125;,<br><br>    <span class="hljs-attr">maxInitialRequests</span>:<span class="hljs-number">30</span>,<br>    <span class="hljs-attr">maxAsyncRequests</span>:<span class="hljs-number">30</span>,<br>    <span class="hljs-attr">runtimeChunk</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><p>我们来举个例子看下,4个文件内容如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// page1.js</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./module1&quot;</span>);<br><span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./module2&quot;</span>);<br><span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;jquery&quot;</span>);<br><span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;asyncModule1&quot; */</span><span class="hljs-string">&quot;./asyncModule1&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// page2.js</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./module1&quot;</span>);<br><span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./module2&quot;</span>);<br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jquery&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// page3.js</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./module1&quot;</span>);<br><span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./module3&quot;</span>);<br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jquery&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// asyncModule1.js</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 打包前</span><br>page1- module1、module2、jquery、asyncModule1<br>page2- module1、module2、jquery<br>page3- module1、module3、jquery<br>asyncModule1- lodash<br><br><span class="hljs-comment">// 打包生成的文件如下:</span><br>page1<br>page2<br>page3<br>asyncModule1<br>commons~page1~page2~<span class="hljs-title function_">page3</span>(module1)<br>commons~page1~<span class="hljs-title function_">page2</span>(module2)<br>libs~page1~page2~<span class="hljs-title function_">page3</span>(jquery)<br>libs~<span class="hljs-title function_">asyncModule1</span>(lodash)<br></code></pre></td></tr></table></figure><p>所以编译规则是:</p><ol><li>page1、2、3都依赖jquery, 所以生成<code>libs~page1~page2~page3(jquery)</code></li><li>page1、2、3都依赖module1, 所以生成<code>commons~page1~page2~page3(module1)</code></li><li>page1、2依赖module2, 所以生成<code>commons~page1~page2(module2)</code></li><li><code>异步</code>模块asyncModule1</li><li>异步模块asyncModule1依赖lodash, 所以生成<code>libs~asyncModule1(lodash)</code></li><li>page1、2、3<code>各自</code>生成自己的chunk</li></ol><h2 id="maxInitialRequests"><a href="#maxInitialRequests" class="headerlink" title="maxInitialRequests"></a>maxInitialRequests</h2><blockquote><p>打包后的<code>入口文件</code>加载时，还能同时加载js文件的数量, 包含自己,import() 异步加载不算在内. 默认30<br>上面的例子当我们设置<code>maxInitialRequests:1</code>,生成文件如下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">page1</span>(module1、module2、jquery、asyncModule1)<br><span class="hljs-title function_">page2</span>(module1、module2、jquery)<br><span class="hljs-title function_">page3</span>(module1、module3、jquery)<br>asyncModule1<br>libs~<span class="hljs-title function_">asyncModule1</span>(lodash)<br></code></pre></td></tr></table></figure><p>上面设置为1, 入口文件肯定默认分离1个,就导致其他模块不会分离导致<code>重复.</code> 如果设置2,权重高的优先分离,超过2个,权重低的就不会被分离了.</p><h2 id="maxAsyncRequests"><a href="#maxAsyncRequests" class="headerlink" title="maxAsyncRequests"></a>maxAsyncRequests</h2><blockquote><p>限制<code>异步模块中</code>的最大并发请求数,包含自己, 默认30<br>当同时设置<code>maxAsyncRequests:1</code>时, 生成的文件如下:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">page1</span>(module1、module2、jquery、asyncModule1)<br><span class="hljs-title function_">page2</span>(module1、module2、jquery)<br><span class="hljs-title function_">page3</span>(module1、module3、jquery)<br><span class="hljs-title function_">asyncModule1</span>(lodash)<br></code></pre></td></tr></table></figure><p>该参数表示从异步的模块中引用的模块被分离的个数.设置过低和上面一样,也会导致重复.</p><h2 id="runtimeChunk"><a href="#runtimeChunk" class="headerlink" title="runtimeChunk"></a>runtimeChunk</h2><p>默认false.<br>webpack默认打包后的入口js都会包含一个<code>自执行函数</code>和<code>参数依赖模块对象</code>. 如果我们更改依赖模块,入口js每次都会重新生成. 这样会存在缓存失效的问题. 实际我们只修改模块,只是模块变了,自执行函数永远都不变,可以缓存住.<br>所以:<br>设置<code>runtimeChunk: true</code>,原先的3个入口page1、2、3会多出3个·runtime<del>page1、runtime</del>page2、runtime~page3`文件.</p><ul><li>runtime文件只有自执行函数,参数是空的不包含模块.</li><li>page文件是模块信息,并且多了个runtime模块</li><li>所以修改模块,runtime文件不会变,不会重新生成可以缓存.page会重新生成.<img src="images/1.jpg" width="50%" height="50%" /><img src="images/2.jpg" width="50%" height="50%" /></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>分割的场景: 多入口自动分割、异步模块自动分割、自己手动切割</li><li>一般可以设置三种规则:<ul><li>为第<code>三方模块</code>配置规则(<code>node_modules</code>)单独抽离一个包</li><li>为<code>自己项目</code>中的模块配置规则(<code>minChunks=2最少被引用2次</code>)单独抽离一个包,权重比三方模块低的话,会优先到三方模块中</li><li>类似elementUI比较<code>大的包</code>设置比第三方规则权重高来单独抽离一个包</li></ul></li><li><code>maxInitialRequests</code>和<code>maxAsyncRequests</code>默认就是30可以不传.如果传的数字太小就会出现上面例子,包不会被抽离,导致包重复.</li><li><code>runtimeChunk</code>可以将入口中的<code>自执行函数抽离</code>到一个runtime文件,里面只有自执行函数,没有模块信息. <code>入口只剩下模块信息</code>并多依赖一个runtime. 这样每次模块变更,只会更新入口文件,runtime不会重新生成可以一直缓存. 注意只会影响入口文件,不会影响其他规则文件.</li></ul><h1 id="分割后加载原理"><a href="#分割后加载原理" class="headerlink" title="分割后加载原理"></a>分割后加载原理</h1><p>我们前面讲过,<code>import(xx)</code>异步加载实际是动态创建script引入js文件,但手动分割的包不会创建script,而需要<code>手动引入</code>.<br>举个例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 2个入口</span><br><span class="hljs-comment">// home.js</span><br><span class="hljs-keyword">const</span> title=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./title&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(title);<br><span class="hljs-comment">// login.js</span><br><span class="hljs-keyword">const</span> title=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./title&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(title);<br><br><span class="hljs-comment">// title.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=<span class="hljs-string">&quot;title&quot;</span><br></code></pre></td></tr></table></figure><p>经过上面缓存组配置进行分割,结果为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">home.<span class="hljs-property">js</span><br>login.<span class="hljs-property">js</span><br>commons~home~login.<span class="hljs-title function_">js</span>(title)<br></code></pre></td></tr></table></figure><p>我们如果要在index.html使用<code>home.js</code>, 同时还需要引入<code>commons~home~login.js</code>才可以.那么谁先谁后呢?正常是依赖文件先,但webpack已经兼容,结论是<code>都可以</code></p><h2 id="主文件先-依赖文件后"><a href="#主文件先-依赖文件后" class="headerlink" title="主文件先,依赖文件后"></a>主文件先,依赖文件后</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;home.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;commons~home~login.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="主文件后-依赖文件先"><a href="#主文件后-依赖文件先" class="headerlink" title="主文件后,依赖文件先"></a>主文件后,依赖文件先</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;home.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;commons~home~login.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> webpack4 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>6.手写webpack</title>
      <link href="/ypf-blog/2025/02/07/webpack4/6.%E6%89%8B%E5%86%99webpack/"/>
      <url>/ypf-blog/2025/02/07/webpack4/6.%E6%89%8B%E5%86%99webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="手写代码"><a href="#手写代码" class="headerlink" title="手写代码"></a>手写代码</h1><h2 id="webpack-js"><a href="#webpack-js" class="headerlink" title="webpack.js"></a>webpack.js</h2><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> <span class="hljs-title class_">Compiler</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./Compiler&quot;</span>);<br><span class="hljs-keyword">let</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">webpack</span> = (<span class="hljs-params">options, callback</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> compiler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Compiler</span>(options.<span class="hljs-property">context</span>); <span class="hljs-comment">// 创建compiler实例</span><br>  compiler.<span class="hljs-property">options</span> = options; <span class="hljs-comment">// 给compiler实例挂载options</span><br>  <span class="hljs-comment">// 设置文件环境, 如node环境, 给compiler实例挂载fs进行读写文件(webpack会自定义fs进行增强)</span><br>  compiler.<span class="hljs-property">inputFileSystem</span> = fs; <span class="hljs-comment">// 读文件</span><br>  compiler.<span class="hljs-property">outputFileSystem</span> = fs; <span class="hljs-comment">// 写文件</span><br>  <span class="hljs-comment">// 挂载配置文件的plugins</span><br>  <span class="hljs-keyword">if</span> (options.<span class="hljs-property">plugins</span> &amp;&amp; <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(options.<span class="hljs-property">plugins</span>)) &#123;<br>    options.<span class="hljs-property">plugins</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">plugin</span>) =&gt;</span> &#123;<br>      plugin.<span class="hljs-title function_">apply</span>(compiler); <span class="hljs-comment">// 调用插件apply方法进行初始化</span><br>    &#125;);<br>  &#125;<br>  <span class="hljs-comment">// environment 准备好之后</span><br>  compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">environment</span>.<span class="hljs-title function_">call</span>();<br>  <span class="hljs-comment">// environment 安装完成之后</span><br>  compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">afterEnvironment</span>.<span class="hljs-title function_">call</span>();<br>  <span class="hljs-comment">// 挂载webpack各种内置插件</span><br>  <span class="hljs-comment">// 注册入口插件(解析入口)</span><br>  <span class="hljs-comment">// 1.注册入口hook</span><br>  compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">entryOption</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;EntryOptionPlugin&quot;</span>, <span class="hljs-function">(<span class="hljs-params">context, entry</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(entry)) &#123;<br>      <span class="hljs-comment">// 多入口</span><br>      <span class="hljs-comment">// new MultiEntryPlugin(context, entry, &quot;main&quot;).apply(compiler);</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 单入口</span><br>      <span class="hljs-comment">// new SingleEntryPlugin(context, entry, &quot;main&quot;).apply(compiler);</span><br>      compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">make</span>.<span class="hljs-title function_">tapAsync</span>(<br>        <span class="hljs-string">&quot;SingleEntryPlugin&quot;</span>,<br>        <span class="hljs-function">(<span class="hljs-params">compilation, callback</span>) =&gt;</span> &#123;<br>          <span class="hljs-comment">// 从此开始编译入口以及入口的依赖</span><br>          compilation.<span class="hljs-title function_">addEntry</span>(context, entry, <span class="hljs-string">&quot;main&quot;</span>,<span class="hljs-literal">false</span>, callback);<br>        &#125;<br>      );<br>    &#125;<br>  &#125;);<br>  <span class="hljs-comment">// 2.触发入口插件</span><br>  <span class="hljs-comment">// context: 当前工作目录(如npm run build所在绝对路径目录)</span><br>  <span class="hljs-comment">// entry:入口文件, 如 ./src/index.js</span><br>  compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">entryOption</span>.<span class="hljs-title function_">call</span>(compiler.<span class="hljs-property">context</span>, options.<span class="hljs-property">entry</span>);<br>  <span class="hljs-keyword">return</span> compiler;<br>&#125;;<br><span class="hljs-built_in">exports</span> = <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = webpack;<br></code></pre></td></tr></table></figure><h2 id="Compiler-js"><a href="#Compiler-js" class="headerlink" title="Compiler.js"></a>Compiler.js</h2><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123;<br>  <span class="hljs-title class_">Tapable</span>,<br>  <span class="hljs-title class_">SyncHook</span>,<br>  <span class="hljs-title class_">SyncBailHook</span>,<br>  <span class="hljs-title class_">AsyncParallelHook</span>,<br>  <span class="hljs-title class_">AsyncSeriesHook</span>,<br>&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tapable&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">NormalModuleFactory</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./NormalModuleFactory&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Compilation</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./Compilation&quot;</span>);<br><span class="hljs-keyword">const</span> mkdirp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mkdirp&quot;</span>); <span class="hljs-comment">// 递归创建目录</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Compiler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Tapable</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">context</span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span> = context;<br>    <span class="hljs-comment">// 各种hook</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span> = &#123;<br>      <span class="hljs-attr">entryOption</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncBailHook</span>([<span class="hljs-string">&quot;context&quot;</span>, <span class="hljs-string">&quot;entry&quot;</span>]), <span class="hljs-comment">// 在 webpack 选项中的 entry 配置项 处理过之后触发</span><br>      <span class="hljs-attr">beforeRun</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncSeriesHook</span>([<span class="hljs-string">&quot;compiler&quot;</span>]), <span class="hljs-comment">// 运行前</span><br>      <span class="hljs-attr">run</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncSeriesHook</span>([<span class="hljs-string">&quot;compiler&quot;</span>]), <span class="hljs-comment">// 运行</span><br>      <span class="hljs-attr">beforeCompile</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncSeriesHook</span>([<span class="hljs-string">&quot;params&quot;</span>]), <span class="hljs-comment">// 编译前</span><br>      <span class="hljs-attr">compile</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>([<span class="hljs-string">&quot;params&quot;</span>]), <span class="hljs-comment">// 编译</span><br>      <span class="hljs-attr">make</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncParallelHook</span>([<span class="hljs-string">&quot;compilation&quot;</span>]), <span class="hljs-comment">// make构建</span><br>      <span class="hljs-attr">thisCompilation</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>([<span class="hljs-string">&quot;compilation&quot;</span>, <span class="hljs-string">&quot;params&quot;</span>]), <span class="hljs-comment">// 开始一次新的编译, 开始创建compilation对象</span><br>      <span class="hljs-attr">compilation</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>([<span class="hljs-string">&quot;compilation&quot;</span>, <span class="hljs-string">&quot;params&quot;</span>]), <span class="hljs-comment">// compilation对象创建完成</span><br>      <span class="hljs-attr">normalModuleFactory</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>([<span class="hljs-string">&quot;normalModuleFactory&quot;</span>]), <span class="hljs-comment">//  创建普通模块工厂完成</span><br>      <span class="hljs-attr">afterCompile</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncSeriesHook</span>([<span class="hljs-string">&quot;compilation&quot;</span>]), <span class="hljs-comment">// 编译完成</span><br>      <span class="hljs-attr">emit</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncSeriesHook</span>([<span class="hljs-string">&quot;compilation&quot;</span>]), <span class="hljs-comment">// 英文发射: 此时开始写硬盘了(chunk生成文件)</span><br>      <span class="hljs-attr">done</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncSeriesHook</span>([<span class="hljs-string">&quot;stats&quot;</span>]), <span class="hljs-comment">// 所有的编译全部完成</span><br>      <span class="hljs-comment">// ...</span><br>      <span class="hljs-comment">// TODO the following hooks are weirdly located here</span><br>      <span class="hljs-comment">// TODO move them for webpack 5</span><br>      <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">SyncHook</span>&#125; */</span><br>      <span class="hljs-attr">environment</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>([]),<br>      <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">SyncHook</span>&#125; */</span><br>      <span class="hljs-attr">afterEnvironment</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>([]),<br>    &#125;;<br>  &#125;<br>  <span class="hljs-comment">// 开始</span><br>  <span class="hljs-title function_">run</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;开始run&quot;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">beforeRun</span>.<span class="hljs-title function_">callAsync</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">run</span>.<span class="hljs-title function_">callAsync</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 在创建comilation之前已经创建了一个普通模块工厂</span><br>        <span class="hljs-keyword">const</span> normalModuleFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NormalModuleFactory</span>();<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">normalModuleFactory</span>.<span class="hljs-title function_">call</span>(normalModuleFactory);<br>        <span class="hljs-keyword">const</span> params = &#123;<br>          normalModuleFactory,<br>        &#125;;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">beforeCompile</span>.<span class="hljs-title function_">callAsync</span>(params, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;开始编译compile&quot;</span>);<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">compile</span>.<span class="hljs-title function_">call</span>(params);<br>          <span class="hljs-keyword">const</span> compilation = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Compilation</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// this就是compiler实例</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">thisCompilation</span>.<span class="hljs-title function_">call</span>(compilation, params);<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">compilation</span>.<span class="hljs-title function_">call</span>(compilation, params);<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">make</span>.<span class="hljs-title function_">callAsync</span>(compilation, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;make执行完成&quot;</span>);<br>            compilation.<span class="hljs-title function_">seal</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;seal封装执行完成&quot;</span>);<br>              <span class="hljs-comment">// 封装代码完成才会编译完成, 触发afterCompile编译完成钩子</span><br>              <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">afterCompile</span>.<span class="hljs-title function_">callAsync</span>(compilation, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;afterCompile执行完成&quot;</span>);<br>                <span class="hljs-comment">// emit写插件用的最多, 因为此时开始写硬盘了, 这是修改的最后一步</span><br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">emit</span>.<span class="hljs-title function_">callAsync</span>(compilation, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>                  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;emit执行完成&quot;</span>);<br>                  <span class="hljs-comment">// 创建打包目录</span><br>                  <span class="hljs-title function_">mkdirp</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>.<span class="hljs-property">output</span>.<span class="hljs-property">path</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>                    <span class="hljs-keyword">const</span> assets = compilation.<span class="hljs-property">assets</span>;<br>                    <span class="hljs-keyword">let</span> outputPath = <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>.<span class="hljs-property">output</span>.<span class="hljs-property">path</span>;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> file <span class="hljs-keyword">in</span> assets) &#123;<br>                      <span class="hljs-keyword">let</span> source = assets[file];<br>                      <span class="hljs-keyword">let</span> filePath = path.<span class="hljs-property">posix</span>.<span class="hljs-title function_">join</span>(outputPath, file);<br>                      <span class="hljs-variable language_">this</span>.<span class="hljs-property">outputFileSystem</span>.<span class="hljs-title function_">writeFileSync</span>(<br>                        filePath,<br>                        source,<br>                        <span class="hljs-string">&quot;utf-8&quot;</span><br>                      );<br>                    &#125;<br>                    <span class="hljs-comment">// 编译完成回调</span><br>                    <span class="hljs-keyword">const</span> stats = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stats</span>(compilation);<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">done</span>.<span class="hljs-title function_">callAsync</span>(stats, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>                      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;done执行完成&quot;</span>);<br>                      <span class="hljs-title function_">callback</span>(err, stats);<br>                    &#125;);<br>                  &#125;);<br>                &#125;);<br>              &#125;);<br>            &#125;);<br>          &#125;);<br>        &#125;);<br>      &#125;);<br>    &#125;);<br>  &#125;<br>&#125;<br><span class="hljs-comment">// Stats英文:统计</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stats</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">compilation</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">entries</span> = compilation.<span class="hljs-property">entries</span>; <span class="hljs-comment">// 所有入口模块</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">modules</span> = compilation.<span class="hljs-property">modules</span>; <span class="hljs-comment">// 所有模块</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">chunks</span> = compilation.<span class="hljs-property">chunks</span>; <span class="hljs-comment">// 所有的chunk</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">files</span> = compilation.<span class="hljs-property">files</span>; <span class="hljs-comment">// 所有的输出文件名</span><br>  &#125;<br>  <span class="hljs-title function_">toJson</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>  &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Compiler</span>;<br></code></pre></td></tr></table></figure><h2 id="Compilation-js"><a href="#Compilation-js" class="headerlink" title="Compilation.js"></a>Compilation.js</h2><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">NormalModuleFactory</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./NormalModuleFactory&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">async</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;neo-async&quot;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> ejs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;ejs&quot;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> mainTemplate = fs.<span class="hljs-title function_">readFileSync</span>(<br>  path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;templates/main.ejs&quot;</span>),<br>  <span class="hljs-string">&quot;utf-8&quot;</span><br>);<br><span class="hljs-keyword">const</span> mainRender = ejs.<span class="hljs-title function_">compile</span>(mainTemplate);<br><span class="hljs-keyword">const</span> chunkTemplate = fs.<span class="hljs-title function_">readFileSync</span>(<br>  path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;templates/chunk.ejs&quot;</span>),<br>  <span class="hljs-string">&quot;utf-8&quot;</span><br>);<br><span class="hljs-keyword">const</span> chunkRender = ejs.<span class="hljs-title function_">compile</span>(chunkTemplate);<br><span class="hljs-keyword">const</span> &#123;<br>  <span class="hljs-title class_">Tapable</span>,<br>  <span class="hljs-title class_">SyncHook</span>,<br>  <span class="hljs-title class_">SyncBailHook</span>,<br>  <span class="hljs-title class_">SyncWaterfallHook</span>,<br>  <span class="hljs-title class_">AsyncSeriesHook</span>,<br>&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tapable&quot;</span>);<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Compilation</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Tapable</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">compiler</span>) &#123;<br>    <span class="hljs-variable language_">super</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">compiler</span> = compiler;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = compiler.<span class="hljs-property">options</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span> = compiler.<span class="hljs-property">context</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">inputFileSystem</span> = compiler.<span class="hljs-property">inputFileSystem</span>; <span class="hljs-comment">// 读文件fs</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">outputFileSystem</span> = compiler.<span class="hljs-property">outputFileSystem</span>; <span class="hljs-comment">// 写文件fs</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">entries</span> = []; <span class="hljs-comment">// 入口数组. 只有入口模块</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">modules</span> = []; <span class="hljs-comment">// 模块数组(所有模块,比如入口依赖另一个, 就是入口模块、依赖模块)</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">chunks</span> = []; <span class="hljs-comment">// 最终生成的所有chunk</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">files</span> = []; <span class="hljs-comment">// 最终生成的所有chunk文件名</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">assets</span> = &#123;&#125;; <span class="hljs-comment">// 用于最终生成所有chunk的文件信息</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span> = &#123;<br>      <span class="hljs-comment">// 成功构建完成一个模块后,就会触发这个钩子</span><br>      <span class="hljs-attr">succeedModule</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>([<span class="hljs-string">&quot;module&quot;</span>]),<br>      <span class="hljs-attr">seal</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>(), <span class="hljs-comment">// 开始封装</span><br>      <span class="hljs-attr">beforeChunks</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>(), <span class="hljs-comment">// 封装代码块之前</span><br>      <span class="hljs-attr">afterChunks</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>(), <span class="hljs-comment">// 封装代码块之后</span><br>    &#125;;<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 开始编译一个新的入口</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; context   上下文绝对路径</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; entry     入口文件 如 ./src/index.js</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; name      入口名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; callback  回调函数(入口和它所有的依赖模块都构建完成后,就会调用这个回调函数)</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">addEntry</span>(<span class="hljs-params">context, entry, name, <span class="hljs-keyword">async</span>, callback</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createModule</span>(<br>      &#123;<br>        name, <span class="hljs-comment">// main</span><br>        context, <span class="hljs-comment">// 上下文</span><br>        <span class="hljs-attr">rawRequest</span>: entry, <span class="hljs-comment">// 模块相对路径 ./src/index.js</span><br>        <span class="hljs-attr">resource</span>: path.<span class="hljs-title function_">join</span>(context, entry), <span class="hljs-comment">// 模块绝对路径</span><br>        <span class="hljs-attr">moduleId</span>: entry,<br>        <span class="hljs-keyword">async</span>,<br>      &#125;,<br>      <span class="hljs-function">(<span class="hljs-params">entryModule</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">entries</span>.<span class="hljs-title function_">push</span>(entryModule);<br>      &#125;,<br>      callback<br>    );<br>  &#125;<br>  <span class="hljs-title function_">createModule</span>(<span class="hljs-params">data, addEntryFn, callback</span>) &#123;<br>    <span class="hljs-comment">// 通过模块工厂创建一个模块</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable language_">module</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NormalModuleFactory</span>(data);<br>    <span class="hljs-keyword">if</span> (addEntryFn) &#123;<br>      <span class="hljs-comment">// 如果是入口模块,添加到入口数组中</span><br>      <span class="hljs-title function_">addEntryFn</span>(<span class="hljs-variable language_">module</span>);<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">modules</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">module</span>);<br>    <span class="hljs-comment">// 编译模块</span><br>    <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">build</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-function">(<span class="hljs-params">err, <span class="hljs-variable language_">module</span></span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// console.log(&quot;成功编译一个模块&quot;, module);</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">succeedModule</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">module</span>);<br>      <span class="hljs-comment">//    说明该模块有依赖</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span>.<span class="hljs-property">dependencies</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">processDependencies</span>(<span class="hljs-variable language_">module</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>          <span class="hljs-title function_">callback</span>(err, <span class="hljs-variable language_">module</span>);<br>        &#125;);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">callback</span>(err, <span class="hljs-variable language_">module</span>);<br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 处理依赖</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">module</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">callback</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">processDependencies</span>(<span class="hljs-params"><span class="hljs-variable language_">module</span>, callback</span>) &#123;<br>    <span class="hljs-keyword">const</span> dependencies = <span class="hljs-variable language_">module</span>.<span class="hljs-property">dependencies</span>;<br>    <span class="hljs-comment">// 遍历依赖模块, 当前模块依赖的模块都编译完成,调用callback</span><br>    <span class="hljs-keyword">async</span>.<span class="hljs-title function_">forEach</span>(<br>      dependencies,<br>      <span class="hljs-function">(<span class="hljs-params">item, done</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123; name, context, rawRequest, moduleId, resource &#125; = item;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createModule</span>(<br>          &#123;<br>            name, <span class="hljs-comment">// main</span><br>            context, <span class="hljs-comment">// 上下文</span><br>            rawRequest, <span class="hljs-comment">// 模块原始相对路径 ./title.js</span><br>            resource, <span class="hljs-comment">// 模块绝对路径</span><br>            moduleId, <span class="hljs-comment">// ./src/title.js</span><br>          &#125;,<br>          <span class="hljs-literal">null</span>,<br>          done<br>        );<br>      &#125;,<br>      callback<br>    );<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 根据入口把模块封装成chunk(chunk就是模块的集合)</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">callback</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">seal</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">seal</span>.<span class="hljs-title function_">call</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">beforeChunks</span>.<span class="hljs-title function_">call</span>(); <span class="hljs-comment">// 开始准备生成chunk</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> entryModule <span class="hljs-keyword">of</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">entries</span>) &#123;<br>      <span class="hljs-keyword">const</span> chunk = &#123;<br>        entryModule,<br>        <span class="hljs-attr">name</span>: entryModule.<span class="hljs-property">name</span>, <span class="hljs-comment">//chunk的name,  如main</span><br>        <span class="hljs-attr">files</span>: [], <span class="hljs-comment">// chunk.js文件名</span><br>        <span class="hljs-attr">modules</span>: [], <span class="hljs-comment">// chunk.js依赖的模块</span><br>        <span class="hljs-attr">async</span>: entryModule.<span class="hljs-property">async</span>, <span class="hljs-comment">// 是否是动态模块</span><br>      &#125;;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">chunks</span>.<span class="hljs-title function_">push</span>(chunk);<br>      chunk.<span class="hljs-property">modules</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">modules</span>.<span class="hljs-title function_">filter</span>(<br>        <span class="hljs-function">(<span class="hljs-params"><span class="hljs-variable language_">module</span></span>) =&gt;</span> <span class="hljs-variable language_">module</span>.<span class="hljs-property">name</span> === entryModule.<span class="hljs-property">name</span><br>      );<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">afterChunks</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">chunks</span>);<br>    <span class="hljs-comment">// 根据chunks 生成代码块assets用于输出文件</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">chunks</span>.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">const</span> chunk = <span class="hljs-variable language_">this</span>.<span class="hljs-property">chunks</span>[i];<br>      <span class="hljs-keyword">const</span> file = chunk.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;.js&quot;</span>; <span class="hljs-comment">// 文件名</span><br>      chunk.<span class="hljs-property">files</span>.<span class="hljs-title function_">push</span>(file);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">files</span>.<span class="hljs-title function_">push</span>(file);<br>      <span class="hljs-comment">// 创建文件代码</span><br>      <span class="hljs-keyword">let</span> source;<br>      <span class="hljs-keyword">if</span> (chunk.<span class="hljs-property">async</span>) &#123;<br>        source = <span class="hljs-title function_">chunkRender</span>(&#123;<br>          <span class="hljs-attr">chunkName</span>: chunk.<span class="hljs-property">name</span>,<br>          <span class="hljs-attr">modules</span>: chunk.<span class="hljs-property">modules</span>,<br>        &#125;);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        source = <span class="hljs-title function_">mainRender</span>(&#123;<br>          <span class="hljs-attr">entryModuleId</span>: chunk.<span class="hljs-property">entryModule</span>.<span class="hljs-property">moduleId</span>,<br>          <span class="hljs-attr">modules</span>: chunk.<span class="hljs-property">modules</span>,<br>        &#125;);<br>      &#125;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">assets</span>[file] = source;<br>    &#125;<br>    <span class="hljs-title function_">callback</span>();<br>  &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Compilation</span>;<br></code></pre></td></tr></table></figure><h2 id="NormalModuleFactory-js"><a href="#NormalModuleFactory-js" class="headerlink" title="NormalModuleFactory.js"></a>NormalModuleFactory.js</h2><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> types = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/types&quot;</span>);<br><span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>);<br><span class="hljs-keyword">const</span> generator = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">async</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;neo-async&quot;</span>);<br><span class="hljs-comment">// const acorn = require(&quot;acorn&quot;);</span><br><span class="hljs-comment">// 这里用babel模拟,实际webpack用的acorn, 因为babel有@babel/types方便操作</span><br><span class="hljs-keyword">const</span> &#123; parse &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/core&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; runLoaders &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;loader-runner&quot;</span>);<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NormalModule</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">&#123; name, context, rawRequest, resource, moduleId, <span class="hljs-keyword">async</span> &#125; = &#123;&#125;</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span> = context;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">rawRequest</span> = rawRequest;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">resource</span> = resource;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">moduleId</span> = moduleId;<br>    <span class="hljs-comment">// ast解析器</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">parser</span> = parse;<br>    <span class="hljs-comment">// 此模块对应的源码</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_source</span>;<br>    <span class="hljs-comment">// 此模块对应的ast</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_ast</span>;<br>    <span class="hljs-comment">// 当前模块依赖的模块信息</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dependencies</span> = [];<br>    <span class="hljs-comment">// 当前模块依赖的异步模块(import(xx))</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">blocks</span> = [];<br>    <span class="hljs-comment">// 是否是异步模块, 如果是import(xx)就是异步, 否则就是同步</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">async</span> = <span class="hljs-keyword">async</span>;<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 编译本模块</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">compilation</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">*</span>&#125; <span class="hljs-variable">callback</span></span><br><span class="hljs-comment">   * 1. 可能内容不是js,就调用对应的loader将内容转换成js, 转换不了就报错了</span><br><span class="hljs-comment">   * 2. 将js内容通过parser转换成ast</span><br><span class="hljs-comment">   * 3. 分析ast,找到内部的require/import节点, 重复上面步骤进行递归,直至所有依赖模块都编译完成</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">build</span>(<span class="hljs-params">compilation, callback</span>) &#123;<br>    <span class="hljs-comment">// loader处理</span><br>    <span class="hljs-keyword">let</span> &#123;<br>      <span class="hljs-attr">module</span>: &#123; rules &#125;,<br>    &#125; = compilation.<span class="hljs-property">options</span>;<br>    <span class="hljs-keyword">let</span> loaders = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; rules.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">let</span> rule = rules[i];<br>      <span class="hljs-keyword">if</span> (rule.<span class="hljs-property">test</span>.<span class="hljs-title function_">test</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">resource</span>)) &#123;<br>        loaders.<span class="hljs-title function_">push</span>(...rule.<span class="hljs-property">use</span>);<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// loader绝对路径</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">resolveLoader</span> = (<span class="hljs-params">loader</span>) =&gt; &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">require</span>.<span class="hljs-title function_">resolve</span>(<br>        path.<span class="hljs-property">posix</span>.<span class="hljs-title function_">join</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>, <span class="hljs-string">&quot;loaders&quot;</span>, loader)<br>      );<br>    &#125;;<br>    loaders = loaders.<span class="hljs-title function_">map</span>(resolveLoader);<br>    <span class="hljs-title function_">runLoaders</span>(<br>      &#123;<br>        <span class="hljs-attr">resource</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">resource</span>,<br>        loaders,<br>      &#125;,<br>      <span class="hljs-function">(<span class="hljs-params">err, &#123; result &#125;</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_source</span> = result.<span class="hljs-title function_">toString</span>();<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_ast</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">parser</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_source</span>);<br>        traverse.<span class="hljs-title function_">default</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_ast</span>, &#123;<br>          <span class="hljs-comment">// 获取依赖模块</span><br>          <span class="hljs-title class_">CallExpression</span>: <span class="hljs-function">(<span class="hljs-params">nodePath</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> node = nodePath.<span class="hljs-property">node</span>;<br>            <span class="hljs-keyword">if</span> (<br>              node.<span class="hljs-property">callee</span>.<span class="hljs-property">name</span> === <span class="hljs-string">&quot;require&quot;</span> ||<br>              types.<span class="hljs-title function_">isImport</span>(node.<span class="hljs-property">callee</span>)<br>            ) &#123;<br>              <span class="hljs-keyword">const</span> moduleName = node.<span class="hljs-property">arguments</span>[<span class="hljs-number">0</span>].<span class="hljs-property">value</span>; <span class="hljs-comment">// 模块名</span><br>              <span class="hljs-keyword">let</span> depResource; <span class="hljs-comment">// 依赖模块的绝对路径</span><br>              <span class="hljs-comment">// path.posix.sep  基于linux的路径分隔符 /</span><br>              <span class="hljs-comment">// window是 \  linux是 / , webpack为了统一,都是用 /</span><br>              <span class="hljs-keyword">const</span> ext =<br>                moduleName.<span class="hljs-title function_">split</span>(path.<span class="hljs-property">posix</span>.<span class="hljs-property">sep</span>).<span class="hljs-title function_">pop</span>().<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;.&quot;</span>) &gt; -<span class="hljs-number">1</span><br>                  ? <span class="hljs-string">&quot;&quot;</span><br>                  : <span class="hljs-string">&quot;.js&quot;</span>; <span class="hljs-comment">// 模块名是否带有扩展名</span><br>              <span class="hljs-comment">// .开头说明引入的是本地模块,反正是node_modules中的第三方模块</span><br>              <span class="hljs-keyword">if</span> (moduleName.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;.&quot;</span>)) &#123;<br>                <span class="hljs-comment">//  path加上posix就表示使用/, 如果不加就是自适应系统,window是\，linux是/</span><br>                depResource = path.<span class="hljs-property">posix</span>.<span class="hljs-title function_">join</span>(<br>                  path.<span class="hljs-property">posix</span>.<span class="hljs-title function_">dirname</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">resource</span>),<br>                  moduleName + ext<br>                );<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                depResource = <span class="hljs-built_in">require</span>.<span class="hljs-title function_">resolve</span>(<br>                  path.<span class="hljs-property">posix</span>.<span class="hljs-title function_">join</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>, <span class="hljs-string">&quot;node_modules&quot;</span>, moduleName)<br>                );<br>                depResource = depResource.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\\/g</span>, <span class="hljs-string">&quot;/&quot;</span>); <span class="hljs-comment">// windows路径 \ 转linux路径 /</span><br>              &#125;<br>              <span class="hljs-keyword">const</span> depModuleId =<br>                <span class="hljs-string">&quot;.&quot;</span> + depResource.<span class="hljs-title function_">slice</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>.<span class="hljs-property">length</span>);<br>              <span class="hljs-keyword">if</span> (node.<span class="hljs-property">callee</span>.<span class="hljs-property">name</span> === <span class="hljs-string">&quot;require&quot;</span>) &#123;<br>                <span class="hljs-comment">//  依赖模块id (相对路径), 如 ./src/title.js</span><br>                <span class="hljs-comment">// console.log(path.posix.relative(&#x27;c:/a/b&#x27;,&#x27;c:/a/b/c&#x27;)); c  相当于去除相同的路径</span><br><br>                <span class="hljs-comment">// 修改ast</span><br>                <span class="hljs-comment">//  require =&gt; __webpack_require__, 即打包后的文件内容require(xx) 变为 __webpack_require__(xx)</span><br>                node.<span class="hljs-property">callee</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;__webpack_require__&quot;</span>;<br>                <span class="hljs-comment">//  修改require的参数, 即 require(&#x27;title&#x27;) 变为 require(&#x27;./src/title.js&#x27;)</span><br>                node.<span class="hljs-property">arguments</span> = [types.<span class="hljs-title function_">stringLiteral</span>(depModuleId)];<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">dependencies</span>.<span class="hljs-title function_">push</span>(&#123;<br>                  <span class="hljs-attr">name</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>, <span class="hljs-comment">// 入口模块名 main</span><br>                  <span class="hljs-attr">context</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>, <span class="hljs-comment">// 上下文即根目录</span><br>                  <span class="hljs-attr">rawRequest</span>: moduleName, <span class="hljs-comment">// 依赖模块的原始路径  ./title</span><br>                  <span class="hljs-attr">moduleId</span>: depModuleId, <span class="hljs-comment">// 依赖模块id , 转换后路径 ./src/title.js</span><br>                  <span class="hljs-attr">resource</span>: depResource, <span class="hljs-comment">// 依赖模块绝对路径</span><br>                &#125;);<br>              &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (types.<span class="hljs-title function_">isImport</span>(node.<span class="hljs-property">callee</span>)) &#123;<br>                <span class="hljs-keyword">let</span> chunkName = <span class="hljs-string">&quot;0&quot;</span>;<br>                <span class="hljs-keyword">if</span> (<br>                  <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(node.<span class="hljs-property">arguments</span>[<span class="hljs-number">0</span>].<span class="hljs-property">leadingComments</span>) &amp;&amp;<br>                  node.<span class="hljs-property">arguments</span>[<span class="hljs-number">0</span>].<span class="hljs-property">leadingComments</span>.<span class="hljs-property">length</span><br>                ) &#123;<br>                  <span class="hljs-keyword">let</span> leadingComments =<br>                    node.<span class="hljs-property">arguments</span>[<span class="hljs-number">0</span>].<span class="hljs-property">leadingComments</span>[<span class="hljs-number">0</span>].<span class="hljs-property">value</span>;<br>                  <span class="hljs-keyword">if</span> (leadingComments.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;webpackChunkName&quot;</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>                    chunkName = leadingComments.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>].<span class="hljs-title function_">trim</span>();<br>                  &#125;<br>                &#125;<br>                nodePath.<span class="hljs-title function_">replaceWithSourceString</span>(<span class="hljs-string">`</span><br><span class="hljs-string">                  __webpack_require__.e(&quot;<span class="hljs-subst">$&#123;chunkName&#125;</span>&quot;).then(__webpack_require__.t.bind(null,&quot;<span class="hljs-subst">$&#123;depModuleId&#125;</span>&quot;))</span><br><span class="hljs-string">                `</span>);<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">blocks</span>.<span class="hljs-title function_">push</span>(&#123;<br>                  <span class="hljs-attr">name</span>: chunkName,<br>                  <span class="hljs-attr">context</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>, <span class="hljs-comment">// 上下文即根目录</span><br>                  <span class="hljs-attr">async</span>: <span class="hljs-literal">true</span>,<br>                  <span class="hljs-attr">entry</span>: depModuleId,<br>                &#125;);<br>              &#125;<br>            &#125;<br>          &#125;,<br>        &#125;);<br>        <span class="hljs-keyword">let</span> &#123; code &#125; = generator.<span class="hljs-title function_">default</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_ast</span>);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_source</span> = code;<br>        <span class="hljs-comment">// 循环构建每一个异步代码块, 都构建完成后才表示当前模块编译完成</span><br>        <span class="hljs-keyword">async</span>.<span class="hljs-title function_">forEach</span>(<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">blocks</span>,<br>          <span class="hljs-function">(<span class="hljs-params">block, done</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> &#123; context, entry, name, <span class="hljs-keyword">async</span> &#125; = block;<br>            compilation.<span class="hljs-title function_">addEntry</span>(context, entry, name, <span class="hljs-keyword">async</span>, done);<br>          &#125;,<br>          <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>            <span class="hljs-title function_">callback</span>(err, <span class="hljs-variable language_">this</span>);<br>          &#125;<br>        );<br>      &#125;<br>    );<br>  &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">NormalModule</span>;<br></code></pre></td></tr></table></figure><h2 id="template-js"><a href="#template-js" class="headerlink" title="template.js"></a>template.js</h2><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span> (<span class="hljs-params">modules</span>) &#123;<br>    <span class="hljs-keyword">var</span> installedModules = &#123;&#125;;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">__webpack_require__</span>(<span class="hljs-params">moduleId</span>) &#123;<br>      <span class="hljs-keyword">if</span> (installedModules[moduleId]) &#123;<br>        <span class="hljs-keyword">return</span> installedModules[moduleId].<span class="hljs-property">exports</span>;<br>      &#125;<br>      <span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = installedModules[moduleId] = &#123;<br>        <span class="hljs-attr">i</span>: moduleId,<br>        <span class="hljs-attr">l</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">exports</span>: &#123;&#125;<br>      &#125;;<br>      modules[moduleId].<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>, <span class="hljs-variable language_">module</span>, <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>, __webpack_require__);<br>      <span class="hljs-variable language_">module</span>.<span class="hljs-property">l</span> = <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">__webpack_require__</span>(<span class="hljs-string">&quot;&lt;%-entryModuleId%&gt;&quot;</span>);<br>  &#125;)<br>    (&#123;<br>      &lt;%<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> <span class="hljs-variable language_">module</span> <span class="hljs-keyword">of</span> modules)<br>        &#123;%&gt;<br>            <span class="hljs-string">&quot;&lt;%-module.moduleId%&gt;&quot;</span>:<br>            (<span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">module</span>, <span class="hljs-built_in">exports</span>, __webpack_require__</span>) &#123;<br>              &lt;%-<span class="hljs-variable language_">module</span>.<span class="hljs-property">_source</span>%&gt;<br>            &#125;),<br>        &lt;%&#125;<br>      %&gt; <br>    &#125;);<br></code></pre></td></tr></table></figure><h1 id="流程解析"><a href="#流程解析" class="headerlink" title="流程解析"></a>流程解析</h1><ol><li>初始化参数: 从配置文件和 Shell 语句中读取与合并参数，得出最终的参数。</li><li>初始化Compiler实例: <code>let compiler = new Compiler(options.context)</code></li></ol><ul><li>定义<code>各种hook</code>: 如entryOption、compile、make、compilation、normalModuleFactory、emit、done等</li><li>定义<code>run方法</code>(编译的核心)</li></ul><ol start="3"><li><p>挂载plugin: 从配置参数对象,读取plugins数组循环订阅注册</p></li><li><p>注册并执行<code>entryOption入口钩子</code>:  回调中注册make钩子,从这里开始判断单/多入口进行编译以及入口的依赖编译</p><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 注册</span><br>compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">entryOption</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;EntryOptionPlugin&quot;</span>, <span class="hljs-function">(<span class="hljs-params">context, entry</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(entry)) &#123;<br>      <span class="hljs-comment">// 多入口</span><br>      <span class="hljs-comment">// new MultiEntryPlugin(context, entry, &quot;main&quot;).apply(compiler);</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 单入口</span><br>      <span class="hljs-comment">// new SingleEntryPlugin(context, entry, &quot;main&quot;).apply(compiler);</span><br>      compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">make</span>.<span class="hljs-title function_">tapAsync</span>(<br>        <span class="hljs-string">&quot;SingleEntryPlugin&quot;</span>,<br>        <span class="hljs-function">(<span class="hljs-params">compilation, callback</span>) =&gt;</span> &#123;<br>          <span class="hljs-comment">// 从此开始编译入口以及入口的依赖</span><br>          compilation.<span class="hljs-title function_">addEntry</span>(context, entry, <span class="hljs-string">&quot;main&quot;</span>, callback);<br>        &#125;<br>      );<br>    &#125;<br>&#125;);<br><span class="hljs-comment">// 执行</span><br>compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">entryOption</span>.<span class="hljs-title function_">call</span>(compiler.<span class="hljs-property">context</span>, options.<span class="hljs-property">entry</span>)<br></code></pre></td></tr></table></figure></li><li><p>开始编译: 执行<code>compiler.run((err, stats) =&gt; &#123;console.log(err,stats.toJson())&#125;)</code>. (下面都是run里面的代码,为了排版好看不缩进,从第6步重新开始, 不放到该步里面进行缩进)</p></li><li><p>创建<code>compilation</code>实例. 用于: 整个工程的编译模块汇总(上面模块工程是一个模块)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> compilation = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Compilation</span>(compiler)<br></code></pre></td></tr></table></figure></li></ol><ul><li>定义各种属性<ul><li>entries: 入口模块,只有入口</li><li>modules: 所有模块(比如入口模块依赖另一个模块, 就是入口模块、依赖模块)</li><li>chunks: 最终生成的所有chunk</li><li>assets: 最终生成的所有资源(根据chunks生成,内容差不多,区别是assets多了个通过ejs(webpack用的是自己字符串拼接的模版,这边方便用ejs)打包后的最终的代码,详见打包后的模块代码),用于遍历来生成dist中的一个个chunk文件</li></ul></li><li>定义createModule方法<ul><li>创建<code>normalModuleFactory</code>模块工厂实例. 用于: 编译模块(js解析为ast,递归找到require/import依赖模块存入dependencies数组)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-variable language_">module</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NormalModuleFactory</span>()<br></code></pre></td></tr></table></figure><ul><li>定义一个模块的各种属性:<ul><li>模块id(相对于根目录的路径)<code>moduleId</code>: 打包后自执行函数的入参模块对象key, 如 ./src/index.js</li><li>模块编译后的代码<code>_source</code>: 比如require(xx)变为__webpack_require__(xx)</li><li>模块ast<code>_ast</code></li><li>该模块依赖的模块<code>dependencies</code>: 是个数组,里面也是一个个模块对象包含上面这些属性</li><li>该模块依赖的<code>异步模块</code>(import(xx))数组<code>blocks</code></li><li>该模块是否是异步模块标记 <code>this.async = async</code></li></ul></li><li>定义build方法<ul><li>根据配置options找到rules,遍历判断如果和resource匹配,则通过<code>loader-runner的runLoaders方法</code>进行loader解析为js代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">runLoaders</span>(<br> &#123;<br>   <span class="hljs-attr">resource</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">resource</span>,<br>   loaders,<br> &#125;,<br> <span class="hljs-function">(<span class="hljs-params">err, &#123; result &#125;</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_source</span> = result.<span class="hljs-title function_">toString</span>();<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_ast</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">parser</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_source</span>);<br>      ... <span class="hljs-comment">//遍历ast节点判断</span><br> &#125;)<br></code></pre></td></tr></table></figure></li><li>通过parser<code>将loader解析的的js代码解析为ast</code></li><li>分析判断ast节点是import/require, 说明是依赖同步模块,<code>塞入dependencies</code>数组中.同时require(xx)改为<code>__webpack_require__(xx)</code>. 注意⚠️,塞入dependencies前有段逻辑<ul><li>依赖的同步模块需要判断路径是否<code>startsWith(&quot;.&quot;)</code>, 是的话是本地模块, 不是的话需要把模块路径拼接上<code>node_modules</code></li></ul></li><li>分析判断ast节点import如果是异步模块(import(xx)),说明是异步模块,<code>塞入blocks</code>数组中,塞入的数据标记<code>async:true</code>.同时import(xx)改为<code>__webpack_require__.e(xx).then(__webpack_require__.t.bind(null,&quot;$&#123;depModuleId&#125;&quot;))</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">nodePath.<span class="hljs-title function_">replaceWithSourceString</span>(<span class="hljs-string">`</span><br><span class="hljs-string">  __webpack_require__.e(&quot;<span class="hljs-subst">$&#123;chunkName&#125;</span>&quot;).then(__webpack_require__.t.bind(null,&quot;<span class="hljs-subst">$&#123;depModuleId&#125;</span>&quot;))</span><br><span class="hljs-string">`</span>);<br></code></pre></td></tr></table></figure></li><li><code>遍历blocks</code>调用addEntry进行<code>入口添加</code>(因为动态模块相当于一个入口,需要单独生成chunk)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 循环blocks中每一个异步代码块, blocks都构建完成(addEntry)后才表示当前模块编译完成</span><br> <span class="hljs-keyword">async</span>.<span class="hljs-title function_">forEach</span>(<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">blocks</span>,<br>   <span class="hljs-function">(<span class="hljs-params">block, done</span>) =&gt;</span> &#123;<br>     <span class="hljs-keyword">const</span> &#123; context, entry, name, <span class="hljs-keyword">async</span> &#125; = block;<br>     compilation.<span class="hljs-title function_">addEntry</span>(context, entry, name, <span class="hljs-keyword">async</span>, done);<br>   &#125;,<br>   <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>     <span class="hljs-title function_">callback</span>(err, <span class="hljs-variable language_">this</span>);<br>   &#125;<br> );<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li>将module实例塞入<code>modules</code>,并判断是入口,存入<code>entries</code></li><li>调用module.build编译,并将module.dependencies并<code>塞入modules</code>中</li></ul></li><li>定义seal方法,英文密封.用于: 遍历entries, 塞入<code>chunks</code>, 然后遍历chunks,同时调用mainRender模版塞入<code>assets</code>用于最终生成dist文件</li></ul><ol start="7"><li>执行make钩子触发<code>从入口开始编译</code>: <code>compilation.addEntry(context, entry, &quot;main&quot;, callback)</code>里面调用了createModule方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">make</span>.<span class="hljs-title function_">callAsync</span>(compilation, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>  ... 触发emit钩子并输出文件<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol><ul><li>模块都解析好后(assets、moudles,chunks、entries ), 触发emit钩子: 写插件用的最多, 因为此时开始写硬盘了, 这是修改的最后一步</li><li>根据配置文件ouput属性创建dist目录</li><li>遍历assets通过fs写文件</li><li>触发done钩子: 输出文件完成.</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="webpack核心五大类"><a href="#webpack核心五大类" class="headerlink" title="webpack核心五大类"></a>webpack核心五大类</h2><ul><li>Compiler: <code>协调整个编译</code>过程, 只在初始化执行一次,主要定义遍布整个编译生命周期的hooks以及run方法(创建Compilation实例、NormalModuleFactory实例)</li><li>Compilation: 描述<code>一次编译</code>过程, 每次改动文件编译都会创建一个新的Compilation实例, 就是<code>代码编译的产物</code>(assets、chunks、modules、entries)</li><li>NormalModuleFactory: 创建一个模块,用于编译模块: <code>ast找依赖、require改__webpack_require__</code>(js解析为ast,递归找到require/import依赖模块存入dependencies数组)、定义模块id(即相对于根目录的路径)用于打包后的自执行函数的模块入参key、require改__webpack_require__</li><li>Webpack: 解析参数,初始化<code>Compiler实例</code>, 注册入口钩子用于开始<code>从入口开始编译</code></li><li>template: 提前定义好模版字符串, 遍历modules作为打包后的模版入参,<code>拼接到模版</code>中用于最终输出文件的内容(webpack是自己封装的模板, 这里为了简单,用的ejs), </li></ul><h2 id="简单流程"><a href="#简单流程" class="headerlink" title="简单流程"></a>简单流程</h2><ol><li>初始化参数: 从配置文件和 Shell 语句中读取与<code>合并参数</code>，得出最终的参数。</li><li>初始化Compiler实例: 定义遍布整个编译生命周期的hooks和run方法</li><li>调用<code>compiler.run((err, stats) =&gt; &#123;console.log(err,stats.toJson())&#125;)</code>方法开始执行编译</li><li>定义entryOption入口钩子,从<code>入口开始</code>进行编译, 调用compilation.createModule创建模块, 该方法调用const module=new ModuleFactory()创建一个模块,包括</li></ol><ul><li>moduleId-打包后自执行函数的入参模块对象key, 如 ./src/index.js</li><li>读取webpack配置的<code>rules遍历</code>,正则判断文件路径匹配到的话,调用loader-runner的<code>runLoaders</code>方法进行匹配到的loader解析为js代码,然后将js通过parse解析为ast</li><li>分析ast, 该模块的<code>同步依赖</code>模块存入dependencies同时require改为__webpack_require__后,再ast转源码的_source<ul><li>依赖的同步模块需要判断路径是否<code>startsWith(&quot;.&quot;)</code>, 是的话是本地模块, 不是的话需要把模块路径修改拼接上<code>node_modules</code></li></ul></li><li>分析ast, 该模块的<code>异步依赖模</code>块存入blocks同时import(xx)改为__webpack_require__.e(xx).then(<strong>webpack_require</strong>.t.bind(null,”${depModuleId}”))后,再ast转源码的_source</li><li>遍历blocks调用addEntry方法进入入口<code>添加异步模块</code>(异步模块实际就相当于一个入口,需要生成单独的chunk)</li></ul><ol start="5"><li>构建compilation模块产物: <code>assets、moudles,chunks、entries</code></li></ol><ul><li>将上面定义的模块module存入<code>modules</code>, 入口模块通过addEntry存入<code>entries</code>, 遍历module.dependencies塞入modules.</li><li>遍历entries, 塞入<code>chunks</code>,同时调用mainRender模版(提前定义好了输出文件的结构)生成打包后的文件内容字符串塞入<code>assets</code>用于最终生成dist文件</li></ul><ol start="6"><li>触发<code>emit钩子</code>,写插件用的最多, 因为此时开始写硬盘了, 这是修改的最后一步</li><li>根据webpack.config.js配置文件的ouput属性<code>创建dist</code>目录</li><li>遍历<code>assets</code>通过fs<code>写文件</code></li><li>触发<code>done钩子</code>表明输出文件完成.</li></ol>]]></content>
      
      
      <categories>
          
          <category> webpack4 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7.插件plugin</title>
      <link href="/ypf-blog/2025/01/21/webpack4/7.%E6%8F%92%E4%BB%B6plugin/"/>
      <url>/ypf-blog/2025/01/21/webpack4/7.%E6%8F%92%E4%BB%B6plugin/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>我们上节课已经讲过webpack的运行流程,知道</p><ul><li>loader机制让webpack拥有了处理<code>除js类型文件以外</code>的能力,而plugin则用于控制webpack<code>整个编译流程</code>. 一般用于处理编译的资源.</li><li>compiler、compilation、normalModuleFactory都有hooks供我们调用来创建插件.</li></ul><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="ZipPlugin"><a href="#ZipPlugin" class="headerlink" title="ZipPlugin"></a>ZipPlugin</h2><blockquote><p>打包完成后, 在dist中同时将打包结果压缩到zip包中作为归档</p></blockquote><p>我们可以在<code>complier的emit</code>钩子进行处理: emit是修改产出文件的最后机会(后面webpack就开始写文件了)</p><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ZipPlugin.js</span><br><span class="hljs-keyword">let</span> jszip= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jszip&#x27;</span>)<br><span class="hljs-keyword">let</span> &#123;<span class="hljs-title class_">RawSource</span>&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;webpack-sources&#x27;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Plugin</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) &#123;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = options;<br>    &#125;<br>    <span class="hljs-title function_">apply</span>(<span class="hljs-params">compiler</span>) &#123;<br>        compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">emit</span>.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&#x27;ZipPlugin&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">compilation,callback</span>) =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ZipPlugin&#x27;</span>,compilation.<span class="hljs-property">assets</span>);<br>            <span class="hljs-keyword">let</span> zip= <span class="hljs-keyword">new</span> <span class="hljs-title function_">jszip</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> filename <span class="hljs-keyword">in</span> compilation.<span class="hljs-property">assets</span>) &#123;<br>                 <span class="hljs-keyword">const</span> source= compilation.<span class="hljs-property">assets</span>[filename].<span class="hljs-title function_">source</span>(); <span class="hljs-comment">// 编译后的文件代码字符串</span><br>                 zip.<span class="hljs-title function_">file</span>(filename,source); <span class="hljs-comment">// 往压缩包添加文件</span><br>            &#125;<br>            <span class="hljs-comment">// 生成压缩包(会在dist目录生成压缩包)</span><br>            zip.<span class="hljs-title function_">generateAsync</span>(&#123;<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;nodebuffer&#x27;</span>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">content</span>)=&gt;</span>&#123;<br>                compilation.<span class="hljs-property">assets</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>.<span class="hljs-property">filename</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RawSource</span>(content);<br>                <span class="hljs-title function_">callback</span>()<br>            &#125;);<br>        &#125;);<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Plugin</span>;<br><span class="hljs-comment">// webpack.config.js使用</span><br><span class="hljs-attr">plugins</span>:[<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipPlugin</span>(&#123;<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;my-assets.zip&quot;</span>,<br>  &#125;),<br>]<br></code></pre></td></tr></table></figure><h2 id="DonePlugin"><a href="#DonePlugin" class="headerlink" title="DonePlugin"></a>DonePlugin</h2><blockquote><p> 打包完成后, 输出编译成功</p></blockquote><p>我们可以在 <code>complier的done</code>钩子进行处理: done是webpack写文件结束触发的钩子</p><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DonePlugin</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) &#123;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = options;<br>    &#125;<br>    <span class="hljs-title function_">apply</span>(<span class="hljs-params">compiler</span>) &#123;<br>        compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">done</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&#x27;DonePlugin&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">assets</span>) =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;DonePlugin&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>.<span class="hljs-property">message</span>);<br>        &#125;);<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">DonePlugin</span>;<br><br><span class="hljs-comment">// webpack.config.js使用</span><br><span class="hljs-attr">plugins</span>:[<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">DonePlugin</span>(&#123;<br>    <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;编译完成&quot;</span><br>  &#125;),<br>]<br></code></pre></td></tr></table></figure><h2 id="AutoExternalPlugin"><a href="#AutoExternalPlugin" class="headerlink" title="AutoExternalPlugin"></a>AutoExternalPlugin</h2><blockquote><p>打包时忽略通过npm引用的第三方库, 并将忽略的包直接在html中通过CDN引用, 减少打包体积</p></blockquote><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">let</span> $=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jquery&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($);<br></code></pre></td></tr></table></figure><p>我们看下打包结果,webpack会把jquery也打包进来, 截图没法截全, 模块入参对象,有个key为<code>./node_modules/jquery/dist/jquery.js</code>, value是整个jquery内容<br><img src="images/1.jpg" width="50%"/><br>我们如果不想打包jQuery, 而通过cdn引入,相当于要引用window.jQuery,如下图<br><img src="images/2.jpg" width="50%"/><br>然后我们需要在index.html中引入cdn,如下图<br><img src="images/3.jpg" width="50%"/></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-attr">plugins</span>:[<br>     <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutoExternalPlugin</span>(&#123;<br>      <span class="hljs-attr">jquery</span>:&#123; <span class="hljs-comment">// 代码中import引入的包名 如 import $ from &#x27;jquery&#x27;的jquery</span><br>        <span class="hljs-attr">expose</span>:<span class="hljs-string">&quot;jQuery&quot;</span>, <span class="hljs-comment">// 全局变量 (注意jq会在window挂jQuery和$两个变量, 这里我们用jQuery或$都行)</span><br>        <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/jquery/3.6.0/jquery.min.js&quot;</span><br>      &#125;<br>    &#125;),<br>]<br></code></pre></td></tr></table></figure><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>所以要完成上面功能,我们需要:</p><ul><li>配置: webpack.config.js配置要忽略的第三方库</li><li>ast解析存储引用的模块: 通过hook,在ast中判断rquire/import,将值存起来<code>importedModules数组</code></li><li>模块替换: 模块在配置中的话, 替换成<code>module.exports=window.jQuery</code></li><li>html替换: 自动往html插入cdn(html-webpack-plugin的hook). 插入前需要判断有没有引用(第二步存的数组),只配置没引用就不要插入.<!-- 配置的模块判断是否引用 --><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ExternalModule</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack/lib/ExternalModule&quot;</span>);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. 自动在index.html中添加script标签引入外部js文件</span><br><span class="hljs-comment"> * 2. 自动往webpack.config.js中添加 externals 配置</span><br><span class="hljs-comment"> * https://github.com/jantimon/html-webpack-plugin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">ExternalModule</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack/lib/ExternalModule&quot;</span>);<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Plugin</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = options;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">importedModules</span> = &#123;&#125;; <span class="hljs-comment">// 存储外部引入的模块</span><br>  &#125;<br>  <span class="hljs-title function_">apply</span>(<span class="hljs-params">compiler</span>) &#123;<br>    compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">normalModuleFactory</span>.<span class="hljs-title function_">tap</span>(<br>      <span class="hljs-string">&quot;AutoExternalPlugin&quot;</span>,<br>      <span class="hljs-function">(<span class="hljs-params">normalModuleFactory</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 1. 解析ast,将import/require引用的存起来</span><br>        normalModuleFactory.<span class="hljs-property">hooks</span>.<span class="hljs-property">parser</span><br>          .<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;javascript/auto&quot;</span>)<br>          .<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;AutoExternalPlugin&quot;</span>, <span class="hljs-function">(<span class="hljs-params">parser</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">// 在解析ast时候, 遇到import就会执行此钩子</span><br>            parser.<span class="hljs-property">hooks</span>.<span class="hljs-property">import</span>.<span class="hljs-title function_">tap</span>(<br>              <span class="hljs-string">&quot;AutoExternalPlugin&quot;</span>,<br>              <span class="hljs-function">(<span class="hljs-params">statement, source</span>) =&gt;</span> &#123;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">importedModules</span>[source] = <span class="hljs-literal">true</span>;<br>              &#125;<br>            );<br>            <span class="hljs-comment">//   在解析ast时候, 遇到require就会执行此钩子</span><br>            parser.<span class="hljs-property">hooks</span>.<span class="hljs-property">call</span><br>              .<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;require&quot;</span>)<br>              .<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;AutoExternalPlugin&quot;</span>, <span class="hljs-function">(<span class="hljs-params">expression</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">let</span> value = expression.<span class="hljs-property">arguments</span>[<span class="hljs-number">0</span>].<span class="hljs-property">value</span>;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-property">importedModules</span>[value] = <span class="hljs-literal">true</span>;<br>              &#125;);<br>          &#125;);<br>        <span class="hljs-comment">// 2. 配置了且引用了,替换成window.xxx</span><br>        normalModuleFactory.<span class="hljs-property">hooks</span>.<span class="hljs-property">factory</span>.<span class="hljs-title function_">tap</span>(<br>          <span class="hljs-string">&quot;AutoExternalPlugin&quot;</span>,<br>          <span class="hljs-function">(<span class="hljs-params">factory</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">data, callback</span>) =&gt;</span> &#123;<br>              <span class="hljs-keyword">const</span> request = data.<span class="hljs-property">request</span>;<br>              <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[request]) &#123;<br>                <span class="hljs-keyword">let</span> variable = <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[request].<span class="hljs-property">expose</span>;<br>                <span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExternalModule</span>(variable, <span class="hljs-string">&quot;window&quot;</span>, request));<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">factory</span>(data, callback);<br>              &#125;<br>            &#125;;<br>          &#125;<br>        );<br>      &#125;<br>    );<br>    <span class="hljs-comment">// 3. 自动在index.html中添加script标签引入外部js文件</span><br>    compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">compilation</span>.<span class="hljs-title function_">tap</span>(<br>      <span class="hljs-string">&quot;AutoExternalPlugin&quot;</span>,<br>      <span class="hljs-function">(<span class="hljs-params">compilation, params</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 这里是html-webpack-plugin的钩子(它会往webpack的hooks挂自定义钩子)</span><br>        <span class="hljs-title class_">HtmlWebpackPlugin</span>.<span class="hljs-title function_">getHooks</span>(compilation).<span class="hljs-property">alterAssetTags</span>.<span class="hljs-title function_">tapAsync</span>(<br>          <span class="hljs-string">&quot;AutoExternalPlugin&quot;</span>,<br>          <span class="hljs-function">(<span class="hljs-params">data, callback</span>) =&gt;</span> &#123;<br>            <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>)<br>              .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">importedModules</span>[key]) <span class="hljs-comment">// 如果配置了,但项目没引用, 不需要插入cdn</span><br>              .<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">const</span> &#123; url, expose &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[key];<br>                data.<span class="hljs-property">assetTags</span>.<span class="hljs-property">scripts</span>.<span class="hljs-title function_">unshift</span>(&#123;<br>                  <span class="hljs-attr">tagName</span>: <span class="hljs-string">&quot;script&quot;</span>,<br>                  <span class="hljs-attr">voidTag</span>: <span class="hljs-literal">false</span>,<br>                  <span class="hljs-attr">attributes</span>: &#123;<br>                    <span class="hljs-attr">defer</span>: <span class="hljs-literal">false</span>,<br>                    <span class="hljs-attr">src</span>: url,<br>                  &#125;,<br>                &#125;);<br>              &#125;);<br>            <span class="hljs-comment">// 瀑布钩子, 将data作为参数传递给下一个钩子</span><br>            <span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, data);<br>          &#125;<br>        );<br>      &#125;<br>    );<br>  &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Plugin</span>;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> webpack4 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>5.tapable</title>
      <link href="/ypf-blog/2025/01/14/webpack4/5.tapable/"/>
      <url>/ypf-blog/2025/01/14/webpack4/5.tapable/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p><a href="https://github.com/webpack/tapable">tapable</a>是一个由Webpack团队维护的事件库。它基于发布订阅模式实现事件处理.</p></blockquote><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><ul><li>从执行机制上:分为<code>同步</code>和<code>异步</code>两种,其中异步又分为<code>串行和并行</code></li><li>从功能上:分为同步钩子、同步<code>瀑布</code>钩子、同/异步<code>保险</code>钩子、同/异步<code>循环</code>钩子、异步<code>串/并行</code>钩子</li><li>从使用上: 注册hook,执行hook</li></ul><h2 id="同步Sync"><a href="#同步Sync" class="headerlink" title="同步Sync"></a>同步Sync</h2><h3 id="同步钩子-SyncHook"><a href="#同步钩子-SyncHook" class="headerlink" title="同步钩子-SyncHook"></a>同步钩子-SyncHook</h3><blockquote><p>按注册顺序执行</p></blockquote><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> &#123; <span class="hljs-title class_">SyncHook</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tapable&quot;</span>);<br><span class="hljs-comment">// 创建钩子</span><br><span class="hljs-keyword">const</span> hook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>([<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>]); <span class="hljs-comment">// 参数是数组,必须提前声明callback的参数</span><br><span class="hljs-comment">// 注册钩子</span><br>hook.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>, name, age);<br>&#125;);<br>hook.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>, name, age);<br>&#125;);<br>hook.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>, name, age);<br>&#125;);<br><span class="hljs-comment">// 执行钩子</span><br>hook.<span class="hljs-title function_">call</span>(<span class="hljs-string">&quot;名字&quot;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-comment">// 1 名字 18</span><br><span class="hljs-comment">// 2 名字 18</span><br><span class="hljs-comment">// 3 名字 18</span><br></code></pre></td></tr></table></figure><h3 id="同步保险钩子-SyncBailHook"><a href="#同步保险钩子-SyncBailHook" class="headerlink" title="同步保险钩子-SyncBailHook"></a>同步保险钩子-SyncBailHook</h3><blockquote><p>Bail英文翻译为保释、保险.<br>如果一个钩子返回值!=undefined, 跳出</p></blockquote><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建钩子 </span><br><span class="hljs-keyword">let</span> &#123; <span class="hljs-title class_">SyncBailHook</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tapable&quot;</span>);<br><span class="hljs-keyword">const</span> hook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncBailHook</span>([<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>]); <span class="hljs-comment">// 参数是数组,必须提前声明callback的参数</span><br><span class="hljs-comment">// 注册钩子</span><br>hook.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>, name, age);<br>&#125;);<br>hook.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>, name, age);<br>  <span class="hljs-keyword">return</span>  <span class="hljs-number">2</span><br>&#125;);<br>hook.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>, name, age);<br>&#125;);<br><span class="hljs-comment">// 1 名字 18</span><br><span class="hljs-comment">// 2 名字 18</span><br></code></pre></td></tr></table></figure><h3 id="同步瀑布钩子-SyncWaterfallHook"><a href="#同步瀑布钩子-SyncWaterfallHook" class="headerlink" title="同步瀑布钩子-SyncWaterfallHook"></a>同步瀑布钩子-SyncWaterfallHook</h3><blockquote><p>上一个钩子返回结果为!=undefined,则下一个钩子第一个参数会是上一个钩子的返回结果, 其余参数依次往后挤,最后一个参数变为undefined</p></blockquote><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> &#123; <span class="hljs-title class_">SyncWaterfallHook</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tapable&quot;</span>);<br><span class="hljs-comment">// 创建钩子 </span><br><span class="hljs-keyword">const</span> hook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncWaterfallHook</span>([<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>]); <span class="hljs-comment">// 参数是数组,必须提前声明callback的参数</span><br><span class="hljs-comment">// 注册钩子</span><br>hook.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>, name, age);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;A&#x27;</span><br>&#125;);<br>hook.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-function">(<span class="hljs-params">arg,name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>, arg,name, age);<br>  <span class="hljs-keyword">return</span>  <span class="hljs-string">&#x27;&#x27;</span><br>&#125;); <br>hook.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-function">(<span class="hljs-params">arg,name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>, arg,name, age);<br>&#125;);<br><span class="hljs-comment">// 执行钩子</span><br>hook.<span class="hljs-title function_">call</span>(<span class="hljs-string">&quot;名字&quot;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-comment">// 1 名字 18</span><br><span class="hljs-comment">// 2 A 18 undefined</span><br><span class="hljs-comment">// 3 &#x27;&#x27; 18 undefined</span><br></code></pre></td></tr></table></figure><h3 id="同步循环钩子-SyncLoopHook"><a href="#同步循环钩子-SyncLoopHook" class="headerlink" title="同步循环钩子-SyncLoopHook"></a>同步循环钩子-SyncLoopHook</h3><blockquote><p>上一个钩子返回结果如果==undefined,则执行下一个钩子;!=undefined,则从头开始重新执行</p></blockquote><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建钩子</span><br><span class="hljs-keyword">let</span> &#123; <span class="hljs-title class_">SyncLoopHook</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tapable&quot;</span>);<br><span class="hljs-keyword">const</span> hook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncLoopHook</span>([<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>]); <span class="hljs-comment">// 参数是数组,必须提前声明callback的参数</span><br><span class="hljs-keyword">let</span> num1 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">let</span> num2 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">let</span> num3 = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 注册钩子</span><br>hook.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;A&quot;</span>, num1);<br>  <span class="hljs-keyword">if</span> (++num1 == <span class="hljs-number">1</span>) &#123;<br>    num1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;);<br>hook.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;B&quot;</span>, num2);<br>  <span class="hljs-keyword">if</span> (++num2 == <span class="hljs-number">2</span>) &#123;<br>    num2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;);<br>hook.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;C&quot;</span>, num3);<br>  <span class="hljs-keyword">if</span> (++num3 == <span class="hljs-number">3</span>) &#123;<br>    num3 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;);<br><span class="hljs-comment">// 执行钩子</span><br>hook.<span class="hljs-title function_">call</span>(<span class="hljs-string">&quot;名字&quot;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-comment">// A 0</span><br><span class="hljs-comment">// B 0</span><br><span class="hljs-comment">// A 0</span><br><span class="hljs-comment">// B 1</span><br><span class="hljs-comment">// C 0</span><br><span class="hljs-comment">// A 0</span><br><span class="hljs-comment">// B 0</span><br><span class="hljs-comment">// A 0</span><br><span class="hljs-comment">// B 1</span><br><span class="hljs-comment">// C 1</span><br><span class="hljs-comment">// A 0</span><br><span class="hljs-comment">// B 0</span><br><span class="hljs-comment">// A 0</span><br><span class="hljs-comment">// B 1</span><br><span class="hljs-comment">// C 2</span><br></code></pre></td></tr></table></figure><h2 id="异步Async"><a href="#异步Async" class="headerlink" title="异步Async"></a>异步Async</h2><h3 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h3><h4 id="异步并行钩子-AsyncParallelHook"><a href="#异步并行钩子-AsyncParallelHook" class="headerlink" title="异步并行钩子-AsyncParallelHook"></a>异步并行钩子-AsyncParallelHook</h4><blockquote><p>hook同时执行,最晚的hook执行结束(callback触发)才会执行回调</p></blockquote><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 任务同时执行,总花费3s</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>hook.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>, name, age);<br>    <span class="hljs-title function_">callback</span>();<br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;);<br>hook.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>, name, age);<br>    <span class="hljs-title function_">callback</span>();<br>  &#125;, <span class="hljs-number">2000</span>);<br>&#125;);<br>hook.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>, name, age);<br>    <span class="hljs-title function_">callback</span>();<br>  &#125;, <span class="hljs-number">3000</span>);<br>&#125;);<br><span class="hljs-comment">// 执行钩子</span><br>hook.<span class="hljs-title function_">callAsync</span>(<span class="hljs-string">&quot;名字&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error, <span class="hljs-string">&quot;执行完成&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>&#125;);<br><span class="hljs-comment">// 1 名字 18</span><br><span class="hljs-comment">// 2 名字 18</span><br><span class="hljs-comment">// 3 名字 18</span><br><span class="hljs-comment">// undefined 执行完成</span><br><span class="hljs-comment">// cost: 3.002s</span><br></code></pre></td></tr></table></figure><h5 id="promise写法"><a href="#promise写法" class="headerlink" title="promise写法"></a>promise写法</h5><blockquote><p>只要有一个reject, 无论有没有值执行结束后, 走到error</p></blockquote><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>hook.<span class="hljs-title function_">tapPromise</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>, name, age);<br>      <span class="hljs-title function_">resolve</span>();<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;);<br>&#125;);<br>hook.<span class="hljs-title function_">tapPromise</span>(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>, name, age);<br>      <span class="hljs-title function_">resolve</span>();<br>    &#125;, <span class="hljs-number">2000</span>);<br>  &#125;);<br>&#125;);<br>hook.<span class="hljs-title function_">tapPromise</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>, name, age);<br>      <span class="hljs-title function_">resolve</span>();<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;);<br>&#125;);<br><span class="hljs-comment">// 执行钩子</span><br>hook.<span class="hljs-title function_">promise</span>(<span class="hljs-string">&quot;名字&quot;</span>, <span class="hljs-number">18</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&quot;执行完成&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">// 1 名字 18</span><br><span class="hljs-comment">// 2 名字 18</span><br><span class="hljs-comment">// 3 名字 18</span><br><span class="hljs-comment">// 执行完成</span><br><span class="hljs-comment">// cost: 3.003s</span><br></code></pre></td></tr></table></figure><h4 id="异步并行保险钩子-AsyncParallelBailHook"><a href="#异步并行保险钩子-AsyncParallelBailHook" class="headerlink" title="异步并行保险钩子-AsyncParallelBailHook"></a>异步并行保险钩子-AsyncParallelBailHook</h4><blockquote><p>callback返回值为真,则跳出. 执行完成后该返回值作为参数传入回调函数 , 比如’’是假, 不会跳出</p></blockquote><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>hook.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123; <br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>, name, age);<br>    <span class="hljs-title function_">callback</span>();<br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;);<br>hook.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>, name, age);<br>    <span class="hljs-title function_">callback</span>(<span class="hljs-string">&#x27;1&#x27;</span>); <br>  &#125;, <span class="hljs-number">2000</span>); <br>&#125;);<br>hook.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>, name, age);<br>    <span class="hljs-title function_">callback</span>();<br>  &#125;, <span class="hljs-number">3000</span>);<br>&#125;);<br><span class="hljs-comment">// 执行钩子</span><br>hook.<span class="hljs-title function_">callAsync</span>(<span class="hljs-string">&quot;名字&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data, <span class="hljs-string">&quot;执行完成&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>&#125;);<br><span class="hljs-comment">// 1 名字 18</span><br><span class="hljs-comment">// 2 名字 18</span><br><span class="hljs-comment">// 1 执行完成</span><br><span class="hljs-comment">// cost: 2.003s</span><br><span class="hljs-comment">// 3 名字 18</span><br></code></pre></td></tr></table></figure><h5 id="promise写法-1"><a href="#promise写法-1" class="headerlink" title="promise写法"></a>promise写法</h5><blockquote><p>resolve返回值!=undefined,则跳出. 执行完成后该返回值作为参数传入回调函数<br>只要有一个reject且值为真,则跳出,执行完成后走到error; reject有值不为真, 不跳出,仍会走到then</p></blockquote><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>hook.<span class="hljs-title function_">tapPromise</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>, name, age);<br>      <span class="hljs-title function_">resolve</span>();<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;);<br>&#125;);<br>hook.<span class="hljs-title function_">tapPromise</span>(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>, name, age);<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>      <span class="hljs-comment">// reject()</span><br>      <span class="hljs-comment">// reject(1);</span><br>    &#125;, <span class="hljs-number">2000</span>);<br>  &#125;);<br>&#125;);<br>hook.<span class="hljs-title function_">tapPromise</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>, name, age);<br>      <span class="hljs-title function_">resolve</span>();<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;);<br>&#125;);<br><span class="hljs-comment">// 执行钩子</span><br>hook.<span class="hljs-title function_">promise</span>(<span class="hljs-string">&quot;名字&quot;</span>, <span class="hljs-number">18</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data, <span class="hljs-string">&quot;执行完成&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>&#125;,<span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;error&#x27;</span>,error);<br>&#125;)<br><span class="hljs-comment">// 1 名字 18</span><br><span class="hljs-comment">// 2 名字 18</span><br><span class="hljs-comment">// &#x27;&#x27; 执行完成</span><br><span class="hljs-comment">// cost: 2.003s</span><br><span class="hljs-comment">// 3 名字 18</span><br></code></pre></td></tr></table></figure><h3 id="串行"><a href="#串行" class="headerlink" title="串行"></a>串行</h3><h4 id="异步串行钩子-AsyncSeriesHook"><a href="#异步串行钩子-AsyncSeriesHook" class="headerlink" title="异步串行钩子-AsyncSeriesHook"></a>异步串行钩子-AsyncSeriesHook</h4><blockquote><p>前一个任务结束才会执行下一个, 所以总花费时间是每个任务时间之和</p></blockquote><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>hook.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>, name, age);<br>    <span class="hljs-title function_">callback</span>();<br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;);<br>hook.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>, name, age);<br>    <span class="hljs-title function_">callback</span>();<br>  &#125;, <span class="hljs-number">2000</span>);<br>&#125;);<br>hook.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>, name, age);<br>    <span class="hljs-title function_">callback</span>();<br>  &#125;, <span class="hljs-number">3000</span>);<br>&#125;);<br><span class="hljs-comment">// 执行钩子</span><br>hook.<span class="hljs-title function_">callAsync</span>(<span class="hljs-string">&quot;名字&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error, <span class="hljs-string">&quot;执行完成&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>&#125;);<br><span class="hljs-comment">// 1 名字 18</span><br><span class="hljs-comment">// 2 名字 18</span><br><span class="hljs-comment">// 3 名字 18</span><br><span class="hljs-comment">// undefined 执行完成</span><br><span class="hljs-comment">// cost:  6.013s</span><br></code></pre></td></tr></table></figure><h5 id="promise写法-2"><a href="#promise写法-2" class="headerlink" title="promise写法"></a>promise写法</h5><blockquote><p>任意一个reject,后面就不会走了, 执行error回调 </p></blockquote><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>hook.<span class="hljs-title function_">tapPromise</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>, name, age);<br>      <span class="hljs-title function_">resolve</span>();<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;);<br>&#125;);<br>hook.<span class="hljs-title function_">tapPromise</span>(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>, name, age);<br>      <span class="hljs-title function_">resolve</span>();<br>      <span class="hljs-comment">// reject()</span><br>    &#125;, <span class="hljs-number">2000</span>);<br>  &#125;);<br>&#125;);<br>hook.<span class="hljs-title function_">tapPromise</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>, name, age);<br>      <span class="hljs-title function_">resolve</span>();<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;);<br>&#125;);<br><span class="hljs-comment">// 执行钩子</span><br>hook.<span class="hljs-title function_">promise</span>(<span class="hljs-string">&quot;名字&quot;</span>, <span class="hljs-number">18</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&quot;执行完成&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>&#125;,<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&quot;执行失败&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">// 1 名字 18</span><br><span class="hljs-comment">// 2 名字 18</span><br><span class="hljs-comment">// 3 名字 18</span><br><span class="hljs-comment">// 执行完成</span><br><span class="hljs-comment">// cost: 6.014s</span><br></code></pre></td></tr></table></figure><h4 id="异步串行保险钩子-AsyncSeriesBailHook"><a href="#异步串行保险钩子-AsyncSeriesBailHook" class="headerlink" title="异步串行保险钩子-AsyncSeriesBailHook"></a>异步串行保险钩子-AsyncSeriesBailHook</h4><blockquote><p>返回值为真,则跳出. 执行完成后该返回值作为参数传入回调函数 , 比如’’是假, 不会跳出</p></blockquote><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>hook.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123; <br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>, name, age);<br>    <span class="hljs-title function_">callback</span>();<br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;);<br>hook.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>, name, age);<br>    <span class="hljs-title function_">callback</span>(<span class="hljs-string">&#x27;1&#x27;</span>); <br>  &#125;, <span class="hljs-number">2000</span>); <br>&#125;);<br>hook.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>, name, age);<br>    <span class="hljs-title function_">callback</span>();<br>  &#125;, <span class="hljs-number">3000</span>);<br>&#125;);<br><span class="hljs-comment">// 执行钩子</span><br>hook.<span class="hljs-title function_">callAsync</span>(<span class="hljs-string">&quot;名字&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data, <span class="hljs-string">&quot;执行完成&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>&#125;);<br><span class="hljs-comment">// 1 名字 18</span><br><span class="hljs-comment">// 2 名字 18</span><br><span class="hljs-comment">// 1 执行完成</span><br><span class="hljs-comment">// cost: 3.010s</span><br></code></pre></td></tr></table></figure><h5 id="promise写法-3"><a href="#promise写法-3" class="headerlink" title="promise写法"></a>promise写法</h5><blockquote><p>返resolve值!=undefined,则跳出. 执行完成后该返回值,传入回调函数 , 比如’’, 会跳出<br>只要有一个reject且值无论真假,则跳出. 最后走到error</p></blockquote><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> &#123; <span class="hljs-title class_">AsyncSeriesWaterfallHook</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tapable&quot;</span>);<br><span class="hljs-keyword">const</span> hook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncSeriesWaterfallHook</span>([<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>]); <span class="hljs-comment">// 参数是数组,必须提前声明callback的参数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>hook.<span class="hljs-title function_">tapPromise</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>, name, age);<br>      <span class="hljs-title function_">resolve</span>();<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;);<br>&#125;);<br>hook.<span class="hljs-title function_">tapPromise</span>(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>, name, age);<br>      <span class="hljs-comment">// resolve(&#x27;&#x27;);</span><br>      <span class="hljs-comment">// reject();</span><br>    &#125;, <span class="hljs-number">2000</span>);<br>  &#125;);<br>&#125;);<br>hook.<span class="hljs-title function_">tapPromise</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>, name, age);<br>      <span class="hljs-title function_">resolve</span>();<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;);<br>&#125;);<br><span class="hljs-comment">// 执行钩子</span><br>hook.<span class="hljs-title function_">promise</span>(<span class="hljs-string">&quot;名字&quot;</span>, <span class="hljs-number">18</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data, <span class="hljs-string">&quot;执行完成&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>&#125;,<span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;error&#x27;</span>,error);<br>&#125;)<br><span class="hljs-comment">// 1 名字 18</span><br><span class="hljs-comment">// 2 名字 18</span><br><span class="hljs-comment">// &#x27;&#x27; 执行完成</span><br><span class="hljs-comment">// cost: 3.014s</span><br></code></pre></td></tr></table></figure><h4 id="异步串行瀑布钩子-AsyncSeriesWaterfallHook"><a href="#异步串行瀑布钩子-AsyncSeriesWaterfallHook" class="headerlink" title="异步串行瀑布钩子-AsyncSeriesWaterfallHook"></a>异步串行瀑布钩子-AsyncSeriesWaterfallHook</h4><blockquote><p>callback第一个参数是回调函数<br>第二个参数有值, 会作为下一个hook的参数</p></blockquote><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>hook.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123; <br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>, name, age);<br>    <span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>,<span class="hljs-string">&#x27;A&#x27;</span>);<br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;);<br>hook.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>, name, age);<br>    <span class="hljs-title function_">callback</span>(); <br>  &#125;, <span class="hljs-number">2000</span>); <br>&#125;);<br>hook.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>, name, age);<br>    <span class="hljs-title function_">callback</span>();<br>  &#125;, <span class="hljs-number">3000</span>);<br>&#125;);<br><span class="hljs-comment">// 执行钩子</span><br>hook.<span class="hljs-title function_">callAsync</span>(<span class="hljs-string">&quot;名字&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data, <span class="hljs-string">&quot;执行完成&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>&#125;);<br><span class="hljs-comment">// 1 名字 18</span><br><span class="hljs-comment">// 2 A 18</span><br><span class="hljs-comment">// 3 A 18</span><br><span class="hljs-comment">// null 执行完成</span><br><span class="hljs-comment">// cost: 6.012s</span><br></code></pre></td></tr></table></figure><h5 id="promise写法-4"><a href="#promise写法-4" class="headerlink" title="promise写法"></a>promise写法</h5><blockquote><p>返回值!=undefined,则跳出. 执行完成后该返回值作为参数传入回调函数<br>只要有一个reject且值无论真假,则跳出. 最后走到error</p></blockquote><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>hook.<span class="hljs-title function_">tapPromise</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>, name, age);<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;A&#x27;</span>);<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;);<br>&#125;);<br>hook.<span class="hljs-title function_">tapPromise</span>(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>, name, age);<br>      <span class="hljs-title function_">resolve</span>();<br>      <span class="hljs-comment">// reject();</span><br>    &#125;, <span class="hljs-number">2000</span>);<br>  &#125;);<br>&#125;);<br>hook.<span class="hljs-title function_">tapPromise</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>, name, age);<br>      <span class="hljs-title function_">resolve</span>();<br>    &#125;, <span class="hljs-number">3000</span>);<br>  &#125;);<br>&#125;);<br><span class="hljs-comment">// 执行钩子</span><br>hook.<span class="hljs-title function_">promise</span>(<span class="hljs-string">&quot;名字&quot;</span>, <span class="hljs-number">18</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data, <span class="hljs-string">&quot;执行完成&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>&#125;,<span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;error&#x27;</span>,error);<br>&#125;)<br><span class="hljs-comment">// 1 名字 18</span><br><span class="hljs-comment">// 2 A 18</span><br><span class="hljs-comment">// 3 A 18</span><br><span class="hljs-comment">// A 执行完成</span><br><span class="hljs-comment">// cost: 6.014s</span><br></code></pre></td></tr></table></figure><h2 id="HookMap"><a href="#HookMap" class="headerlink" title="HookMap"></a>HookMap</h2><blockquote><p>HookMap是基于es6 Map实现, 相当于一个对象,存储<code>管理</code>hook</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">HookMap</span>, <span class="hljs-title class_">SyncHook</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;tapable&#x27;</span>);<br><span class="hljs-keyword">const</span> keyedHook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HookMap</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>([<span class="hljs-string">&#x27;arg&#x27;</span>]));<br><span class="hljs-comment">// 在keyedHook中创建一个name为key1的hook，同时为该hook通过tap注册事件 </span><br>keyedHook.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;key1&#x27;</span>).<span class="hljs-title function_">tap</span>(<span class="hljs-string">&#x27;Plugin 1&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">arg</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;key1-Plugin 1&#x27;</span>, arg);<br>&#125;);<br>keyedHook.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;key1&#x27;</span>).<span class="hljs-title function_">tap</span>(<span class="hljs-string">&#x27;Plugin 2&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">arg</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;key1-Plugin 2&#x27;</span>, arg);<br>&#125;);<br><span class="hljs-comment">// 在keyedHook中创建一个name为key2的hook，同时为该hook通过tap注册事件</span><br>keyedHook.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;key2&#x27;</span>).<span class="hljs-title function_">tap</span>(<span class="hljs-string">&#x27;Plugin 1&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">arg</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;key2-Plugin 1&#x27;</span>, arg);<br>&#125;);<br><span class="hljs-comment">// 从HookMap中拿到name为key1的hook</span><br><span class="hljs-keyword">const</span> hook = keyedHook.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;key1&#x27;</span>);<br><span class="hljs-keyword">if</span> (hook) &#123;<br>  <span class="hljs-comment">// 通过call方法触发Hook</span><br>  hook.<span class="hljs-title function_">call</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// key1-Plugin 1 hello</span><br><span class="hljs-comment">// key1-Plugin 2 hello</span><br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>HookMap用于管理hook, 通过<code>for方法创建带key</code>的hook</li><li>通过get方法<code>获取指定key</code>的hook来执行</li></ul><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><ul><li>tapable是一个基于<code>发布订阅</code>模式的钩子系统,使用方法<code>注册</code>hook,<code>执行</code>hook</li><li>从执行机制上:分为<code>同步</code>和<code>异步</code>两种,其中异步又分为<code>串行和并行</code></li><li>种类:<ul><li>瀑布钩子: 上一个hook的<code>返回值作为</code>下一个hook的<code>参数</code></li><li>保险钩子: 上一个hook返回有值, 直接<code>跳出</code></li><li>循环钩子: 上一个hook返回有值, 从头<code>循环</code>执行, 没值(===undefined)则执行下一个hook</li></ul></li><li>同步:按注册顺序执行</li><li>异步串行:上一个任务结束,再执行下一个,时间=每个hook时间<code>之和</code>, 所有任务结束进入最终回调</li><li>异步并行:同时执行, 时间=时间<code>最长</code>的hook,所有任务结束进入最终回调</li><li>我们可以用HookMap来<code>命名</code>hook,<code>管理</code> hook</li></ul><h1 id="实现tapable"><a href="#实现tapable" class="headerlink" title="实现tapable"></a>实现tapable</h1><p>在实现之前,我们需要知道 <code>函数定义</code>, 因为tapable用的是<code>动态函数</code></p><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>有三种</p><ol><li>函数声明<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>函数表达式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> sum = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;&#125;;<br></code></pre></td></tr></table></figure></li><li>构造(动态)函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> sum = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">`return a+b`</span>);<br><span class="hljs-keyword">const</span> sum = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">&quot;a,b&quot;</span>, <span class="hljs-string">`return a+b`</span>);<br><span class="hljs-keyword">const</span> sum = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">`return 1`</span>);<br></code></pre></td></tr></table></figure></li></ol><ul><li>可以看到:动态函数可以给用字符串的方式传参数、函数体. 其中参数可以省略.</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>由于官方源码分了好几个js来继承, 为了简单, 这里只实现最核心的流程.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SyncHook</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">args</span>) &#123;<br>    <span class="hljs-comment">// 参数</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(args)) &#123;<br>      args = [];<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_args</span> = args;<br>    <span class="hljs-comment">// 存储所有的钩子函数, 格式是对象 [&#123;name:钩子名称, fn: 钩子函数&#125;]</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">taps</span> = [];<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_x</span> = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// 存储所有的钩子函数, 格式是函数 [钩子函数1,钩子函数2]</span><br>  &#125;<br>  <span class="hljs-title function_">tap</span>(<span class="hljs-params">options, fn</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> options === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>      options = &#123;<span class="hljs-attr">name</span>: options&#125;;<br>    &#125;<br>    options.<span class="hljs-property">fn</span> = fn;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">taps</span>.<span class="hljs-title function_">push</span>(options);<br>  &#125;<br>  <span class="hljs-title function_">call</span>(<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-comment">// 动态创建一个函数</span><br>    <span class="hljs-keyword">const</span> callFn = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">create</span>(options);<br>    <span class="hljs-comment">// 执行钩子</span><br>    callFn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args); <br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * function(name,age)&#123;</span><br><span class="hljs-comment">   *    var _fn0 = _x[0];</span><br><span class="hljs-comment">   *    _fn0(name,age);</span><br><span class="hljs-comment">   *    var _fn1 = _x[1];</span><br><span class="hljs-comment">   *    _fn1(name,age);</span><br><span class="hljs-comment">   * &#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">create</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> args = <span class="hljs-variable language_">this</span>.<span class="hljs-property">args</span>.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;,&quot;</span>);<br>    <span class="hljs-keyword">const</span> body = <span class="hljs-variable language_">this</span>.<span class="hljs-property">taps</span><br>      .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item, i</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">                var _fn<span class="hljs-subst">$&#123;i&#125;</span> = <span class="hljs-subst">$&#123;item.fn&#125;</span>;\n</span><br><span class="hljs-string">                _fn<span class="hljs-subst">$&#123;i&#125;</span>(<span class="hljs-subst">$&#123;args&#125;</span>);</span><br><span class="hljs-string">            `</span>;<br>      &#125;)<br>      .<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(args, body);<br>  &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">SyncHook</span>;<br></code></pre></td></tr></table></figure><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><ol><li>初始化<code>this._args</code>存储参数列表</li><li>调用tap的时候,往taps存储钩子函数</li><li>调用call的时候,创建一个动态函数, 该函数使用<code>new Function(第一步的args, 函数体)</code></li><li>函数体是循环遍历taps, 拼接出多个函数,并传入args</li><li>执行该动态函数</li></ol><h2 id="AsyncParallelHook"><a href="#AsyncParallelHook" class="headerlink" title="AsyncParallelHook"></a>AsyncParallelHook</h2><p>上面展示的同步代码, 异步整体差不多, </p><ul><li>注册: 多了callback供单个异步动作结束后调用</li><li>执行: 多了回调<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 注册</span><br>hook.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">callback</span>();<br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;);<br><span class="hljs-comment">// 执行</span><br>hook.<span class="hljs-title function_">callAsync</span>(<span class="hljs-string">&quot;名字&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error, <span class="hljs-string">&quot;执行完成&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;cost&#x27;</span>)<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">callAsync</span>(<span class="hljs-params">...args</span>) &#123;<br>  <span class="hljs-comment">// 添加最终结束回调</span><br>  args.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;)<br>  <span class="hljs-comment">// 动态创建一个函数</span><br>  <span class="hljs-keyword">const</span> callFn = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">create</span>(options);<br>  <span class="hljs-comment">// 执行钩子</span><br>  callFn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args); <br>&#125;<br><span class="hljs-title function_">create</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-keyword">const</span> header = <span class="hljs-string">`</span><br><span class="hljs-string">      var _counter = this.taps.length;</span><br><span class="hljs-string">  `</span>;<br>  <span class="hljs-keyword">const</span> body = options.<span class="hljs-property">taps</span><br>    .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item, i</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">            var _fn<span class="hljs-subst">$&#123;i&#125;</span> = <span class="hljs-subst">$&#123;item&#125;</span>;\n</span><br><span class="hljs-string">            _fn<span class="hljs-subst">$&#123;i&#125;</span>(<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.args&#125;</span>,()=&gt;&#123;</span><br><span class="hljs-string">                  if(--_counter===0)&#123;</span><br><span class="hljs-string">                     this.args[this.args.length-1]()</span><br><span class="hljs-string">                  &#125;</span><br><span class="hljs-string">           &#125;);</span><br><span class="hljs-string">        `</span>;<br>    &#125;)<br>    .<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">args</span>,<br>    header + body<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3></li><li>注册: 多了<code>callback供单个</code>异步动作结束后调用</li><li>执行: 多了<code>最终回调</code></li><li>所以参数最后<code>push一个最终函数</code>,创建动态函数的函数体, 插入一个<code>callback</code>,单个执行就会<code>计数-1</code>直至总taps为0, 最终执行结束, 执行最终函数</li></ul><blockquote><p><a href="https://juejin.cn/post/7040982789650382855#heading-17">https://juejin.cn/post/7040982789650382855#heading-17</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> webpack4 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>4.loader</title>
      <link href="/ypf-blog/2024/12/30/webpack4/4.loader/"/>
      <url>/ypf-blog/2024/12/30/webpack4/4.loader/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么会有loader"><a href="#为什么会有loader" class="headerlink" title="为什么会有loader"></a>为什么会有loader</h1><ul><li>webpack只能处理<code>.js和.json文件</code>,但打包过程中遇到其他类型文件，如<code>.vue、.ts、图片、.css</code>等，webpack就无能为力了,面对这一问题，webpack提供了loader机制,用来将webpack不能识别的文件，转换为标准的js模块.</li><li>loader的本质就是一个<strong>函数</strong>,webpack内部的<code>loader runner</code>会调用此函数，然后将上一个loader产生的结果或者资源文件传入进去</li></ul><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>我们通常使用loader是在配置文件中配置的，除去<code>inline-loader</code>下面会讲到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">rules</span>: [<br>    &#123;<br>      <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>      <span class="hljs-comment">// use: [&quot;babel-loader&quot;],</span><br>      <span class="hljs-comment">// loader: &quot;babel-loader&quot;,</span><br>      <span class="hljs-comment">// use:&#123;</span><br>      <span class="hljs-comment">//   loader: &#x27;babel-loader&#x27;,</span><br>      <span class="hljs-comment">// &#125;,</span><br>      <span class="hljs-attr">use</span>: [<br>        &#123;<br>          <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>, <span class="hljs-comment">// 会去找node_modules中的babel-loader</span><br>          <span class="hljs-comment">// loader: path.join(__dirname, &quot;loaders/babel-loader.js&quot;), // 引用本地loader</span><br>          <span class="hljs-attr">options</span>: &#123;<br>            <span class="hljs-attr">presets</span>: [<span class="hljs-string">&quot;@babel/preset-env&quot;</span>],<br>          &#125;,<br>        &#125;,<br>      ],<br>    &#125;,<br>  ],<br>&#125;<br></code></pre></td></tr></table></figure><p>我们看到, 使用的时候有多种写法</p><ul><li>我们可以<code>use: 对象、字符串、数组、数组对象</code>, 一般我们用最后一种,可以传多个且能传options进行配置</li><li>loader可以引用<strong>本地路径</strong>,也可以引用node_modules中的loader</li><li>如果觉得本地路径写法不优雅,我们通过<strong>resolveLoader</strong>配置webpack查找loader方式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// webpack找loader方式, 优先匹配node_modules中的loader, 找不到再依次匹配loaders中的loader</span><br><span class="hljs-attr">resolveLoader</span>: &#123;<br>  <span class="hljs-attr">modules</span>: [<span class="hljs-string">&quot;node_modules&quot;</span>, path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;loaders&quot;</span>)],<br>&#125;,<br><span class="hljs-attr">rules</span>: [<br>   &#123;<br>     <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>     <span class="hljs-attr">use</span>: [<br>       &#123;<br>         <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,  <span class="hljs-comment">// 仍写babel-loader</span><br>         <span class="hljs-attr">options</span>: &#123;<br>           <span class="hljs-attr">presets</span>: [<span class="hljs-string">&quot;@babel/preset-env&quot;</span>],<br>         &#125;,<br>       &#125;,<br>     ],<br>   &#125;,<br> ],<br></code></pre></td></tr></table></figure></li></ul><h1 id="loader分类"><a href="#loader分类" class="headerlink" title="loader分类"></a>loader分类</h1><p>在webpack中,从loader的执行时机, 可以分为4种,执行顺序: <code>pre -&gt; normal -&gt; inline -&gt; post</code></p><ul><li><strong>pre</strong>:  前置loader</li><li><strong>normal</strong>: 普通loader</li><li><strong>inline</strong>: 内联loader</li><li><strong>post</strong>: 后置loader</li></ul><h2 id="配置loader"><a href="#配置loader" class="headerlink" title="配置loader"></a>配置loader</h2><ul><li><strong>pre</strong>和<strong>post</strong>和<strong>normal</strong>都是通过rule对象的<code>enforce配置</code>的, 不传enforce, 默认是normal<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.txt$/i</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;a-loader&quot;</span>],<br>        <span class="hljs-attr">enforce</span>: <span class="hljs-string">&quot;post&quot;</span>, <span class="hljs-comment">// post loader</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.txt$/i</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;b-loader&quot;</span>], <span class="hljs-comment">// normal loader</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.txt$/i</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;c-loader&quot;</span>],<br>        <span class="hljs-attr">enforce</span>: <span class="hljs-string">&quot;pre&quot;</span>, <span class="hljs-comment">// pre loader</span><br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h2 id="内联loader"><a href="#内联loader" class="headerlink" title="内联loader"></a>内联loader</h2><ul><li><strong>inline</strong>比较特殊,它只能在<strong>代码中</strong>引入模块的时候进行声明, 语法如下,官方文档<a href="https://webpack.docschina.org/concepts/loaders/#using-loaders">loader</a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> common <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;inliner-loader1?type=abc&amp;limit=64!inliner-loader2?type=abc!./index.js&#x27;</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;inliner-loader1?type=abc!inliner-loader2?type=abc!./index.js&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li>使用<code>!</code>进行分割, 最后一块是要解析的文件</li><li>每个loader都可以配置options, 类似query参数</li><li>我们可以在<strong>最前面</strong>加上3种方式来控制配置loader如何执行<ul><li><strong>!</strong>: 不执行normal-loader</li><li><strong>!!</strong>:不执行所有配置loader</li><li><strong>-!</strong>: 不执行pre-loader和normal-loader<br>如<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;!inliner-loader1!inliner-loader2!./index.js&#x27;</span>)<br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;!!inliner-loader1!inliner-loader2!./index.js&#x27;</span>)<br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;-!inliner-loader1!inliner-loader2!./index.js&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="异步loader"><a href="#异步loader" class="headerlink" title="异步loader"></a>异步loader</h2><p>上面四种loader默认都是同步的,如果需要异步, 我们可以这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// async-loader</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loader</span>(<span class="hljs-params">source</span>)&#123;<br>    <span class="hljs-keyword">let</span> callback = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">async</span>();<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>,source+<span class="hljs-string">&#x27;//async2&#x27;</span>)<br>    &#125;, <span class="hljs-number">5000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li> 调用async方法,可以把loader执行从同步改为异步</li><li> 虽然loader此时是异步的,但是此时会进入阻塞状态, 只有等待调用callback后,才会执行下一个loader,比如 loader1、异步loader2、loader3, 执行顺序是: <code>先输出loader1、5s后输出loader2、最后输出loader3</code></li></ul><h1 id="loader执行顺序"><a href="#loader执行顺序" class="headerlink" title="loader执行顺序"></a>loader执行顺序</h1><h2 id="无pitch"><a href="#无pitch" class="headerlink" title="无pitch"></a>无pitch</h2><ul><li>从种类来看:  <code>pre -&gt; normal -&gt; inline -&gt; post</code></li><li>从执行方向看: <code>倒序执行/从右向左/从下往上</code>, 比如<code>use:[loader1 ,loader2 ,loader3]</code>, 执行顺序是: <code>loader3 -&gt; loader2 -&gt; loader1</code></li></ul><h2 id="有pitch"><a href="#有pitch" class="headerlink" title="有pitch"></a>有pitch</h2><p>pitch英文抛的意思,在代码里相当于熔断.<br>正常loader是一个函数,如果我们给loader定义一个pitch函数,那么执行顺序就不一样了:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> loader = <span class="hljs-keyword">function</span> (<span class="hljs-params">content, map, meta</span>) &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a-loader执行&quot;</span>);<br> <span class="hljs-keyword">return</span> content;<br>&#125;;<br>loader.<span class="hljs-property">pitch</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a-loader pitch执行&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>上面workflow:  先执行pitch,再执行loader.</p><h3 id="例子🌰1"><a href="#例子🌰1" class="headerlink" title="例子🌰1"></a>例子🌰1</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">use</span>:[loader1,loader2,loader3]  <span class="hljs-comment">// 每个都绑定pitch函数,那么执行顺序是:</span><br><span class="hljs-comment">//loader1</span><br><span class="hljs-keyword">const</span> loader = <span class="hljs-keyword">function</span> (<span class="hljs-params">content, map, meta</span>) &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;loader1执行&quot;</span>);<br> <span class="hljs-keyword">return</span> content+<span class="hljs-string">&#x27;1&#x27;</span>;<br>&#125;;<br>loader.<span class="hljs-property">pitch</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;loader1 pitch执行&quot;</span>);<br>&#125;;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> =loader<br><br><span class="hljs-comment">//loader2</span><br><span class="hljs-keyword">const</span> loader = <span class="hljs-keyword">function</span> (<span class="hljs-params">content, map, meta</span>) &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;loader2执行&quot;</span>);<br> <span class="hljs-keyword">return</span> content+<span class="hljs-string">&#x27;2&#x27;</span>;<br>&#125;;<br>loader.<span class="hljs-property">pitch</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;loader2 pitch执行&quot;</span>);<br>&#125;;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> =loader<br><br><span class="hljs-comment">// loader3</span><br><span class="hljs-keyword">const</span> loader = <span class="hljs-keyword">function</span> (<span class="hljs-params">content, map, meta</span>) &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;loader3执行&quot;</span>);<br> <span class="hljs-keyword">return</span> content+<span class="hljs-string">&#x27;3&#x27;</span>;<br>&#125;;<br>loader.<span class="hljs-property">pitch</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;loader3 pitch执行&quot;</span>);<br>&#125;;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> =loader<br></code></pre></td></tr></table></figure><p>执行结果:</p><ul><li><code>loader1-pitch -&gt; loader2-pitch -&gt; loader3-pitch -&gt; loader3 -&gt; loader2 -&gt; loader1</code></li><li>打印结果:result表示执行loader转换后的结果,以及对应的二进制resourceBuffer<img src="images/1.jpg" width="80%"/></li></ul><h3 id="例子🌰2"><a href="#例子🌰2" class="headerlink" title="例子🌰2"></a>例子🌰2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">use</span>:[loader1,loader2,loader3]  <span class="hljs-comment">// 每个都绑定pitch函数,那么执行顺序是:</span><br><span class="hljs-comment">//loader1</span><br><span class="hljs-keyword">const</span> loader = <span class="hljs-keyword">function</span> (<span class="hljs-params">content, map, meta</span>) &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;loader1执行&quot;</span>);<br> <span class="hljs-keyword">return</span> content+<span class="hljs-string">&#x27;1&#x27;</span>;<br>&#125;;<br>loader.<span class="hljs-property">pitch</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;loader1 pitch执行&quot;</span>);<br>&#125;;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> =loader<br><br><span class="hljs-comment">//loader2</span><br><span class="hljs-keyword">const</span> loader = <span class="hljs-keyword">function</span> (<span class="hljs-params">content, map, meta</span>) &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;loader2执行&quot;</span>);<br> <span class="hljs-keyword">return</span> content+<span class="hljs-string">&#x27;2&#x27;</span>;<br>&#125;;<br>loader.<span class="hljs-property">pitch</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;2&#x27;</span><br>&#125;;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> =loader<br><br><span class="hljs-comment">// loader3</span><br><span class="hljs-keyword">const</span> loader = <span class="hljs-keyword">function</span> (<span class="hljs-params">content, map, meta</span>) &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;loader3执行&quot;</span>);<br> <span class="hljs-keyword">return</span> content+<span class="hljs-string">&#x27;3&#x27;</span>;<br>&#125;;<br>loader.<span class="hljs-property">pitch</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;loader3 pitch执行&quot;</span>);<br>&#125;;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> =loader<br></code></pre></td></tr></table></figure><p>执行结果:</p><ul><li><code>loader1-pitch -&gt; loader2-pitch  -&gt; loader1-loader</code></li><li>如果pitch有return返回值(return不行,需要有值),那么直接跳出,执行上一个loader,一次倒序执行</li><li>打印结果:result此时是-pick返回的值传递给上一个loader的source, 处理后的结果<img src="images/2.jpg" width="80%"/></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><img src="images/3.jpg" width="80%"/><img src="images/4.jpg" width="80%"/><ul><li>上图很清晰,loader🈶两个阶段,<code>normal和pitch</code>, normal就是正常的loader函数.</li><li>pitch<strong>没有返回值</strong>,执行pitch结束后, 会读取文件内容作为source依次传给loader的source处理.(注意是在pitch阶段全部处理完成后，这一步才会读取引入的资源文件内容。)</li><li><strong>有返回值</strong>, source直接是pich的返回值, 再传给上一个loader的source依次loader处理(即打破原有顺序掉头执行)</li><li>实际loader的执行是调用了<code>loader-runner</code>的runLoaders方法.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; runLoaders &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;loader-runner&quot;</span>); <span class="hljs-comment">// 是一个执行loader链条的模块(webpack会自动安装)</span><br><span class="hljs-title function_">runLoaders</span>(<br>  &#123;<br>    <span class="hljs-attr">resource</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;src/index.js&quot;</span>), <span class="hljs-comment">// 解析的文件</span><br>    loaders, <span class="hljs-comment">// loader绝对路径数组</span><br>    <span class="hljs-attr">readResource</span>: fs.<span class="hljs-property">readFile</span>.<span class="hljs-title function_">bind</span>(fs), <span class="hljs-comment">// 读文件方法</span><br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><img src="images/5.jpg" width="50%"/></li></ul><h3 id="loader-runner"><a href="#loader-runner" class="headerlink" title="loader-runner"></a>loader-runner</h3><p>我们需要了解下loader-runner的运行机制. 假如我们有一个loader的配置如下: <code>!loader1!loader2!loader3!./src/index.js</code></p><ul><li>先切割变成数组<code>[loader1,loader2,loader3]</code>传递给loader-runner</li><li>loader-runner会构造一个上下文<code>loaderContext</code>对象,供执行pitch和normal函数的this指针<ul><li>loaders: 上面loader数组转换为数组对象,每个loader对象包含<ul><li>loader的全路径path</li><li>query参数</li><li>pitchExecuted: 是否执行了pitch方法, executed:英文执行的意思</li></ul></li><li>request: 将loaders全路径数组转换为内联字符串方式: xx/loader1!xx/loader2!xx/loader3!D:/src/index.js</li><li>resource: 要被处理的的resource,如D:/src/index.js  </li><li>loaderIndex: 当前执行loader函数(pitch/normal)的索引</li><li>data: 当前执行loader的data参数</li><li>currentRequest: <code>当前loader+剩余loader+resouce字符串</code></li><li>remainingRequest: <code>剩余loader+resouce字符串</code>, 不包括当前loader的request.</li><li>previousRequest:  <code>之前loader字符串</code>, 不包括当前loader的request.</li></ul></li><li>循环loaders, 依次执行loader的pitch函数,<code>loaderIndex++</code><ul><li>loaderIndex=0: 此时开始执行<code>loader1-pitch</code><ul><li>currentRequest:<code>xx/loader1!xx/loader2!xx/loader3!D:/src/index.js</code></li><li>remainingRequest:<code>xx/loader2!xx/loader3!D:/src/index.js</code></li><li>previousRequest:<code>&#39;&#39;</code></li></ul></li><li>loaderIndex=1: loader1-pitch执行完毕, 执行<code>loader2-pitch</code><ul><li>currentRequest:<code>xx/loader2!xx/loader3!D:/src/index.js</code></li><li>remainingRequest:<code>xx/loader3!D:/src/index.js</code></li><li>previousRequest:<code>xx/loader1</code></li></ul></li><li>loaderIndex=2: loader2-pitch执行完毕, 执行<code>loader3-pitch</code><ul><li>currentRequest:<code>xx/loader3!D:/src/index.js</code></li><li>remainingRequest:<code>D:/src/index.js</code></li><li>previousRequest:<code>xx/loader1!xx/loader2</code></li></ul></li></ul></li><li>依次执行loader的normal函数,<code>loaderIndex--</code><ul><li>loaderIndex=2: loader3-pitch执行完毕,开始执行<code>loader3-normal</code><ul><li>currentRequest:<code>xx/loader3!D:/src/index.js</code></li><li>remainingRequest:<code>D:/src/index.js</code></li><li>previousRequest:<code>xx/loader1!xx/loader2</code></li></ul></li><li>loaderIndex=1: loader3-normal执行完毕,开始执行<code>loader2-normal</code><ul><li>currentRequest:<code>xx/loader2!xx/loader3!D:/src/index.js</code></li><li>remainingRequest:<code>xx/loader3!D:/src/index.js</code></li><li>previousRequest:<code>xx/loader1</code></li></ul></li><li>loaderIndex=0: loader2-normal执行完毕,开始执行<code>loader1-normal</code><ul><li>currentRequest:<code>xx/loader1!xx/loader2!xx/loader3!D:/src/index.js</code></li><li>remainingRequest:<code>xx/loader2!xx/loader3!D:/src/index.js</code></li><li>previousRequest:<code>&#39;&#39;</code></li></ul></li></ul></li></ul><ol><li>通过上面流程我们可以知道pitch和normal函数的三个字段输出是<strong>一样的</strong>, 我们可以按pitch来理解这三个字段的结果</li><li><code>remainingRequest</code>这个属性比较重要,pitch函数就需要用到这个属性来将剩余的loader变成内链执行.(因为pitch跳出就没法执行后续了,所以在这里手动执行)</li></ol><h1 id="常用loader"><a href="#常用loader" class="headerlink" title="常用loader"></a>常用loader</h1><h2 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h2><blockquote><p><code>file-loader</code>用于处理非js文件，如图片、字体等，会将文件拷贝到输出目录，并返回文件地址。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br> <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.(jpg|png|gif|bmp)$/</span>,<br>        <span class="hljs-attr">use</span>:&#123;<br>          <span class="hljs-attr">loader</span>:<span class="hljs-string">&#x27;file-loader&#x27;</span>,<br>          <span class="hljs-attr">options</span>:&#123;<br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[hash].[ext]&#x27;</span>,<br>          &#125;<br>        &#125;<br>      &#125;,<br>    ]<br> &#125;  <br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// file-loader.js</span><br><span class="hljs-keyword">const</span> &#123; getOptions, interpolateName &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;loader-utils&quot;</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loader</span>(<span class="hljs-params">source</span>) &#123;<br>    <span class="hljs-comment">// loader.raw = true, 此时source返回是个二进制流Buffer, 如果不加, source返回的是utf-8字符串,这里因为是图片文件, source就是个乱码字符串</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;加载file-loader&quot;</span>);<br>  <span class="hljs-comment">// 获取loader的配置</span><br>  <span class="hljs-keyword">let</span> options = <span class="hljs-title function_">getOptions</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// &#123;filename: &#x27;[hash].[ext]&#x27;&#125;</span><br>  <span class="hljs-comment">// 生成文件名,interpolate英文插入的意思</span><br>  <span class="hljs-keyword">let</span> filename = <span class="hljs-title function_">interpolateName</span>(<span class="hljs-variable language_">this</span>, options.<span class="hljs-property">filename</span>, &#123; <span class="hljs-attr">content</span>: source &#125;); <span class="hljs-comment">// 需要根据source生成hash</span><br>  <span class="hljs-comment">// 调用webpack创建文件</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">emitFile</span>(filename, source);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`module.exports = <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(filename)&#125;</span>`</span>;<br>&#125;<br>loader.<span class="hljs-property">raw</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 因为加载的是二进制文件</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = loader;<br></code></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li>获取配置</li><li>根据source以及配置生成文件名</li><li>调用webpack创建文件</li><li>上面必须加<code>JSON.stringify</code>, 不加如下图<img src="images/6.jpg" width="50%"/></li><li>如果用<code>module.exports</code>, 使用<code>require(&#39;xx.jpg&#39;)</code>不需要加default, 如果是<code>export default</code>,需要加default, 我们在第一节讲过,es模块会转为commonjs模块,并增加了default</li><li>因为图片是文件流,所以需要给loader<strong>绑定raw属性</strong></li></ul><h2 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h2><blockquote><p><code>url-loader</code>可以将打包过程中用到的文件转换为 base64 格式字符串，这样可以减少网络请求次数。比如100个小图片,处理后,只有1个文件, 减少100次请求, 优化了网络请求。但注意需要控制阈值,否则会导致文件过大</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br> <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.(jpg|png|gif|bmp)$/</span>,<br>         <span class="hljs-attr">use</span>:&#123;<br>          <span class="hljs-attr">loader</span>:<span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>          <span class="hljs-attr">options</span>:&#123;<br>            <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;[hash].[ext]&#x27;</span>,<br>            <span class="hljs-attr">limit</span>: <span class="hljs-number">8</span>*<span class="hljs-number">1024</span> <span class="hljs-comment">// 8kb   单位:字节 1kb=1024byte</span><br>          &#125;<br>        &#125;<br>      &#125;,<br>    ]<br> &#125; <br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mime = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mime&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; getOptions, interpolateName &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;loader-utils&quot;</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loader</span>(<span class="hljs-params">source</span>) &#123;<br>    <span class="hljs-comment">// loader.raw = true, 此时source返回是个二进制流Buffer, 如果不加, source返回的是utf-8字符串,这里因为是图片文件, source就是个乱码字符串</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;加载url-loader&quot;</span>);<br>  <span class="hljs-comment">// 获取loader的配置</span><br>  <span class="hljs-keyword">let</span> &#123;limit,fallback=<span class="hljs-string">&#x27;file-loader&#x27;</span>&#125; = <span class="hljs-title function_">getOptions</span>(<span class="hljs-variable language_">this</span>); <br>  <span class="hljs-keyword">if</span>(limit)&#123;<br>    limit=<span class="hljs-built_in">parseInt</span>(limit); <br>  &#125;<br>  <span class="hljs-keyword">const</span> mimeType = mime.<span class="hljs-title function_">getType</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">resourcePath</span>);<span class="hljs-comment">// 获取文件类型, 如xx/a.jpg=&gt;image/jpeg</span><br>  <span class="hljs-keyword">if</span>(!limit || source.<span class="hljs-property">length</span>&lt;limit)&#123;<br>    <span class="hljs-keyword">let</span> base64String =<span class="hljs-string">`data:<span class="hljs-subst">$&#123;mimeType&#125;</span>;base64,<span class="hljs-subst">$&#123;source.toString(<span class="hljs-string">&#x27;base64&#x27;</span>)&#125;</span>`</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`module.exports = <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(base64String)&#125;</span>`</span><br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">let</span> fileLoader = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./&#x27;</span>+fallback);<br>    <span class="hljs-keyword">return</span> fileLoader.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>,source);<br>  &#125;<br>&#125;<br>loader.<span class="hljs-property">raw</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 因为加载的是二进制文件</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = loader;<br></code></pre></td></tr></table></figure><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li>判断阈值以及获取文件类型插入base64字符串</li><li>如果不满足阈值，则使用file-loader, 所以我们如果用了urrl-loader，不用再在webpack.config.js中配置file-loader了, 但需要安装, 因为会依赖</li></ul><h2 id="style-loader和less-loader"><a href="#style-loader和less-loader" class="headerlink" title="style-loader和less-loader"></a>style-loader和less-loader</h2><blockquote><p><code>style-loader</code> 可以将 css 代码注入到 js 中，运行时，通过创建 style 标签，将样式插入到 head 中。<br><code>less-loader</code> 将 less 转为 css, 然后交给 style-loader 处理。 sass-loader同理</p></blockquote><h3 id="style-loader使用normal"><a href="#style-loader使用normal" class="headerlink" title="style-loader使用normal"></a>style-loader使用normal</h3><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// index.js</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./index.less&#x27;</span>)<br><span class="hljs-comment">// webpack.config.js </span><br> <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-attr">use</span>:[<br>          <span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-comment">// 创建style标签插入页面中</span><br>          <span class="hljs-string">&#x27;less-loader&#x27;</span>, <span class="hljs-comment">// 将less转换为css</span><br>        ]<br>      &#125;,<br>    ]<br> &#125; <br></code></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// less-loader </span><br><span class="hljs-keyword">const</span> less = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;less&quot;</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loader</span>(<span class="hljs-params">source</span>) &#123;<br>  <span class="hljs-keyword">const</span> callback = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">async</span>();<br>  <span class="hljs-comment">//  将less转换为css</span><br>  less.<span class="hljs-title function_">render</span>(<br>    source,<br>    &#123;<br>      <span class="hljs-attr">filename</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">resource</span>,<br>    &#125;,<br>    <span class="hljs-function">(<span class="hljs-params">err, output</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">callback</span>(err, output.<span class="hljs-property">css</span>);<br>    &#125;<br>  );<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = loader;<br></code></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// style-loader </span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loader</span>(<span class="hljs-params">source</span>) &#123;<br>  <span class="hljs-keyword">let</span> style = <span class="hljs-string">`</span><br><span class="hljs-string">    let style = document.createElement(&#x27;style&#x27;);</span><br><span class="hljs-string">    style.innerHTML = <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(source)&#125;</span>;</span><br><span class="hljs-string">    document.head.appendChild(style);</span><br><span class="hljs-string"> `</span>;<br> <span class="hljs-keyword">return</span> style;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = loader;<br></code></pre></td></tr></table></figure><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>上面原理很简单:</p><ul><li>都没有pitch, less-loader先执行返回<code>编译后的css</code>,传给style-loader进行<code>插入style</code><br>这样看好像没什么问题, 但是如果我们代码里有<code>@import &#39;a.css&#39;</code>以及<code>background:url(a.jpg)</code>这种有链接的情况, 就没法处理, 需要通过<code>css-loader处理</code>.但是css-loader返回的是<code>脚本,不是css</code>,所以stye-loader接受后直接插入style就会<code>有问题</code>. 所以style-loader的代码需要放到<code>pitch</code>中. 我们在下面具体讲解下</li></ul><h2 id="style-loader和css-loader"><a href="#style-loader和css-loader" class="headerlink" title="style-loader和css-loader"></a>style-loader和css-loader</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// index.js</span><br><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./index.css&#x27;</span>)<br><span class="hljs-comment">// index.css</span><br>@<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;./import.css&quot;</span>;<br>div&#123; <span class="hljs-attr">background</span>: <span class="hljs-title function_">url</span>(<span class="hljs-string">&#x27;./1-1.jpg&#x27;</span>);<span class="hljs-attr">color</span>:red &#125;<br><span class="hljs-comment">// webpack.config.js </span><br> <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-attr">use</span>:[<br>          <span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-comment">// 创建style标签插入页面中</span><br>          <span class="hljs-string">&#x27;css-loader&#x27;</span>, <span class="hljs-comment">// 解析css</span><br>        ]<br>      &#125;,<br>    ]<br> &#125; <br></code></pre></td></tr></table></figure><p>我们先用上面的style-loader中的normal函数里, 打印下css-loader返回给style-loader的source是啥样的脚本?<br><img src="images/7.jpg" width="80%"/></p><p>我们来分析下流程:</p><ol><li>正常顺序是<code>style-loader-pitch、css-loader-pitch、css-loader、style-loader</code>, 但style-loader-pitch有返回值直接<code>跳出就结束</code>了. 那css-loader怎么办?这就需要<code>remainingRequest</code>了.</li><li><code>remainingRequest</code>: 剩余还未执行的loader,上面我们在<code>loader-runner</code>中分析过.</li></ol><h3 id="style-loader使用pitch"><a href="#style-loader使用pitch" class="headerlink" title="style-loader使用pitch"></a>style-loader使用pitch</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// style-loader</span><br><span class="hljs-keyword">const</span> &#123; stringifyRequest &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;loader-utils&quot;</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loader</span>(<span class="hljs-params">source</span>) &#123;<br>&#125;<br>loader.<span class="hljs-property">pitch</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">remainingRequest, previousRequest, data</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;加载style-loader-pitch&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">stringifyRequest</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">`!!<span class="hljs-subst">$&#123;remainingRequest&#125;</span>`</span>)) <span class="hljs-comment">// &quot;!!../node_modules/css-loader/dist/cjs.js!./index.css&quot;</span><br>  <span class="hljs-keyword">let</span> style = <span class="hljs-string">`</span><br><span class="hljs-string">    let style = document.createElement(&#x27;style&#x27;);</span><br><span class="hljs-string">    style.innerHTML =  require(<span class="hljs-subst">$&#123;stringifyRequest(<span class="hljs-variable language_">this</span>, <span class="hljs-string">`!!<span class="hljs-subst">$&#123;remainingRequest&#125;</span>`</span>)&#125;</span>); // 重新执行loader-runner,只执行css-loader</span><br><span class="hljs-string">    document.head.appendChild(style);</span><br><span class="hljs-string"> `</span>;<br>  <span class="hljs-keyword">return</span> style; <br>&#125;;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = loader;<br></code></pre></td></tr></table></figure><ul><li>上面我们把<code>style-loader</code>逻辑放到pitch中,此时执行完就跳出结束流程了, 那么css-loader怎么办? 此时就需要通过<code>remainingRequest</code>重新进行加载</li><li><code>stringifyRequest</code>是为了把loader转换为相对路径,因为webpack内链执行都是相对的, 所以需要转换成相对路径.</li></ul><h3 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h3><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> loaderUtils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;loader-utils&quot;</span>);<br><span class="hljs-keyword">const</span> tokenizer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;css-selector-tokenizer&quot;</span>);<br><span class="hljs-keyword">const</span> postcss = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;postcss&quot;</span>);<br><span class="hljs-comment">// @import引入的css包含进来</span><br><span class="hljs-comment">// url路径变成输出路径,如background:url(./a.png)</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loader</span>(<span class="hljs-params">source</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;加载css-loader&quot;</span>);<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">cssPlugin</span> = (<span class="hljs-params">options</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">cssRoot</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// cssRoot就是ast语法树</span><br>      <span class="hljs-comment">//   console.log(cssRoot,&#x27;cssRoot&#x27;);</span><br>      <span class="hljs-comment">//   遍历ast, 所有@import xx规则</span><br>      cssRoot.<span class="hljs-title function_">walkAtRules</span>(<span class="hljs-regexp">/^import$/</span>, <span class="hljs-function">(<span class="hljs-params">rule</span>) =&gt;</span> &#123;<br>        rule.<span class="hljs-title function_">remove</span>(); <span class="hljs-comment">// 删除@import xx 规则</span><br>        options.<span class="hljs-property">imports</span>.<span class="hljs-title function_">push</span>(rule.<span class="hljs-property">params</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>)); <span class="hljs-comment">// 去除最外层双引号, 因为astexplore, rule.params获取的是&quot;&#x27;a.css&#x27;&quot;, 然后添加到imports数组中 ,如&#x27;a.css&#x27;,</span><br>      &#125;);<br>      <span class="hljs-comment">//   遍历ast, 所有background:url(xx)规则</span><br>      cssRoot.<span class="hljs-title function_">walkDecls</span>(<span class="hljs-regexp">/^background$/</span>, <span class="hljs-function">(<span class="hljs-params">decl</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> values = tokenizer.<span class="hljs-title function_">parseValues</span>(decl.<span class="hljs-property">value</span>);<br>        values.<span class="hljs-property">nodes</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>          value.<span class="hljs-property">nodes</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (item.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;url&quot;</span>) &#123;<br>              <span class="hljs-comment">// 变成相对路径并require共webpack其他loader解析</span><br>              item.<span class="hljs-property">url</span> =<br>                <span class="hljs-string">&quot;`+require(&quot;</span> +<br>                loaderUtils.<span class="hljs-title function_">stringifyRequest</span>(<span class="hljs-variable language_">this</span>, item.<span class="hljs-property">url</span>) +<br>                <span class="hljs-string">&quot;)+`&quot;</span>;<br>            &#125;<br>          &#125;);<br>        &#125;);<br>        decl.<span class="hljs-property">value</span> = tokenizer.<span class="hljs-title function_">stringifyValues</span>(values);<br>        <span class="hljs-comment">// console.log(decl, &quot;decl&quot;);</span><br>      &#125;);<br>    &#125;;<br>  &#125;;<br>  <span class="hljs-keyword">let</span> callback = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">async</span>();<br>  <span class="hljs-keyword">let</span> options = &#123;<br>    <span class="hljs-attr">imports</span>: [], <span class="hljs-comment">// 引入的css(去除@import) 如 @import &#x27;a.css&#x27; 中的 a.css</span><br>  &#125;;<br>  <span class="hljs-keyword">let</span> pipeLine = <span class="hljs-title function_">postcss</span>([<span class="hljs-title function_">cssPlugin</span>(options)]);<br>  pipeLine.<span class="hljs-title function_">process</span>(source).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> imports = options.<span class="hljs-property">imports</span><br>      .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">url</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>          <span class="hljs-string">&quot;`+require(&quot;</span> +<br>          loaderUtils.<span class="hljs-title function_">stringifyRequest</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;!!css-loader1!&quot;</span> + url) +<br>          <span class="hljs-string">&quot;)+`&quot;</span><br>        );<br>      &#125;)<br>      .<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>    <span class="hljs-comment">// let output = &quot;module.exports = `&quot;  + result.css + &quot;`&quot;; // 拼接@import xx的css和普通的css,如div&#123;xx&#125;</span><br>    <span class="hljs-keyword">let</span> output = <span class="hljs-string">&quot;module.exports=`&quot;</span> + imports + <span class="hljs-string">&quot;\r\n&quot;</span> + result.<span class="hljs-property">css</span> + <span class="hljs-string">&quot;`&quot;</span>; <span class="hljs-comment">// 拼接@import xx的css和普通的css,如div&#123;xx&#125;</span><br>    output = output.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\\&quot;/g</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(output, <span class="hljs-string">&quot;output&quot;</span>);<br>    <span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, output);<br>  &#125;);<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = loader;<br></code></pre></td></tr></table></figure><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><ul><li><code>css-loader</code>依赖postcss解析ast</li><li>分析ast,找到所有<code>@import xx</code>规则的url, 转换为相对路径并拼接上<code>css-loader</code>并require, 通过内链的方式进行执行</li><li>分析ast,找到所有<code>background:url(xx)</code>规则, 转换为相对路径并require,供webpack的其他loader解析</li><li>因为都要通过require引用, 所以肯定是个js脚本, 所以需要<code>style-loader</code>在pitch就得执行,而不是<code>css-loader</code>执行导致style标签中的是js脚本</li></ul><p>简单来说，如果在loader开发中你的需要依赖其他loader，但此时上一个loader的normal函数返回的并不是处理后的资源文件内容而是一段js脚本，那么将你的loader逻辑设计在pitch阶段无疑是一种更好的方式。</p><h2 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h2><p>我们来实现一个babel-loader来进行es6转es5,希望下面箭头函数转换为es5</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/index.js</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params">a, b</span>) =&gt; a + b;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/loaders/babel-loader.js</span><br><span class="hljs-keyword">let</span> babel = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/core&quot;</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loader</span>(<span class="hljs-params">source</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;加载babel-loader&quot;</span>);<br>  <span class="hljs-keyword">let</span> options = &#123;<br>    <span class="hljs-attr">presets</span>: [<span class="hljs-string">&quot;@babel/preset-env&quot;</span>], <span class="hljs-comment">// 预设(插件集合), babel本质就是一个转换器, 需要预设/插件才能转换代码,否则就是一个流程器</span><br>    <span class="hljs-comment">// 生成sourceMap (注意: 这里设为true, 只是表示babel会生成sourceMap给webpack, 最终打包是否生成sourceMap文件,是webpack控制的, 所以还需要webpack的配置devtool:source-map, 否则sourceMap文件不会生成)</span><br>    <span class="hljs-comment">// 此处为true, webpack的devtool:source-map,  调试会看到index.js,且是es6源代码</span><br>    <span class="hljs-comment">// 此处为false, webpack的devtool:source-map,  调试会看到index.js, 且是es5代码</span><br>    <span class="hljs-comment">// 此处为true, webpack的devtool:false,  调试会看到main.js, 且是es5代码</span><br>    <span class="hljs-comment">// 此处为false, webpack的devtool:false,  调试会看到main.js, 且是es5代码</span><br>    <span class="hljs-comment">// 所以需要同时开启才能在谷歌控制台看到es6源代码+源文件</span><br>    <span class="hljs-attr">sourceMap</span>: <span class="hljs-literal">true</span>, <br>  &#125;;<br>  <span class="hljs-comment">//   转换后的es5代码 source-map文件 抽象语法树</span><br>  <span class="hljs-keyword">const</span> &#123; code, map, ast &#125; = babel.<span class="hljs-title function_">transform</span>(source, options);<br>  <span class="hljs-comment">//   因为babel转换后提供了ast, 那么webpack会直接使用这个ast, 不会自己再通过acron解析器将code转ast了, 提高效率, 所以如果loader有ast,可以直接用</span><br><span class="hljs-comment">//  在loader执行时,this指向loaderContext, 它上面有个callback方法, 用来返回结果</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, code, map, ast);<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = loader;<br></code></pre></td></tr></table></figure><h3 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3><ul><li>原理很简单, <strong>loader本质上就是一个函数</strong>, 最终通过<strong>this.callback</strong>给webpack返回结果, webpack会根据返回结果进行下一步操作<ul><li>callback接收三个参数: code-转换后的es5代码, map-sourceMap文件, ast-抽象语法树</li><li> 因为babel转换后提供了ast, 所以调用callback传进去, 那么webpack会<strong>直接使用这个ast</strong>, 不会自己再通过acron解析器将code转ast了, 提高效率, 所以如果loader有ast,可以直接用</li></ul></li><li>loader的sourceMap和webpack.config.js中的devtool:’source-map’需要<strong>同时开启,才会生效</strong><ul><li>webpack的devtool:source-map、loader的sourceMap:true,  谷歌控制台调试会看到index.js, 是es6源代码</li><li>webpack的devtool:source-map、loader的sourceMap:false, 会看到index.js, 是es5代码</li><li>webpack的devtool:false、loader的sourceMap:true, 会看到main.js, 是es5代码</li><li>webpack的devtool:false、loader的sourceMap:false, 会看到main.js, 是es5代码</li></ul></li></ul><blockquote><p><a href="https://zhuanlan.zhihu.com/p/659040417">学习webpack loader</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> webpack4 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3.工作流程</title>
      <link href="/ypf-blog/2024/12/23/webpack4/3.%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
      <url>/ypf-blog/2024/12/23/webpack4/3.%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="手动打包"><a href="#手动打包" class="headerlink" title="手动打包"></a>手动打包</h1><p>我们一般都是执行<code>npm run build</code>进行打包, 实际上webpack本质就是一个Compiler类,导出的是一个实例.我们可以手动调用实例进行打包.<a href="https://www.webpackjs.com/api/node/">Node 接口文档</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> webpack= <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack&quot;</span>);<br><span class="hljs-keyword">const</span> config = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../webpack.config.js&quot;</span>);<br><br><span class="hljs-comment">// 初始化编译器</span><br><span class="hljs-keyword">const</span> compiler = <span class="hljs-title function_">webpack</span>(config);<br><span class="hljs-comment">// 调用run方法进行打包编译</span><br>compiler.<span class="hljs-title function_">run</span>(<span class="hljs-function">(<span class="hljs-params">err, stats</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err || stats.<span class="hljs-title function_">hasErrors</span>()) &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br>   <span class="hljs-comment">// 过滤显示字段(颗粒化控制)</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stats.<span class="hljs-title function_">toJson</span>(&#123;<br>    <span class="hljs-attr">chunks</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 显示代码块</span><br>    <span class="hljs-attr">modules</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 显示模块</span><br>    <span class="hljs-attr">assets</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 显示资源文件</span><br>  &#125;));<br>&#125;);<br></code></pre></td></tr></table></figure><p><a href="https://www.webpackjs.com/api/node/#statstojsonoptions">stats.toJson</a></p><ul><li>返回是一个对象, 包含打包的文件信息、内容、依赖模块等<a href="https://www.webpackjs.com/api/stats/#asset-objects">信息</a></li></ul><p>现在我们来手动实现下webpack实例来了解webpack的工作流程</p><h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><h2 id="初始化参数"><a href="#初始化参数" class="headerlink" title="初始化参数"></a>初始化参数</h2><ul><li>从配置文件和shell语句中读取与合并参数，得出最终的参数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> config = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../webpack.config&quot;</span>);<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Compiler</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span> = config;<br>    <span class="hljs-comment">// 注册插件钩子函数-下面注册插件用</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span> = &#123;<br>      <span class="hljs-attr">emit</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>(),<br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">apply</span>(<span class="hljs-params"></span>)&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="初始化实例"><a href="#初始化实例" class="headerlink" title="初始化实例"></a>初始化实例</h2><ul><li>用上一步得到的参数配置，初始化生成一个Compiler实例<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> compiler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Compiler</span>(config);<br></code></pre></td></tr></table></figure></li></ul><h2 id="循环注册插件"><a href="#循环注册插件" class="headerlink" title="循环注册插件"></a>循环注册插件</h2><ul><li>读取配置中的plugins选项，<strong>循环并注册插件</strong> (此时插件只是注册(添加到待执行队列中),没有执行),往插件传入compiler实例<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> plugin <span class="hljs-keyword">of</span> config.<span class="hljs-property">plugins</span>) &#123;<br>  plugin.<span class="hljs-title function_">apply</span>(compiler);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>插件调用实例的<strong>订阅方法</strong>, 将回调函数加入实例队列中等待后续执行, 实际webpack依赖的是<code>tapable</code>库,这里咱们自己实现了tapable库<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/plugins/InfoPlugin.js</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">InfoPlugin</span> &#123;<br>    <span class="hljs-title function_">apply</span>(<span class="hljs-params">compiler</span>) &#123;<br>        compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">emit</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&#x27;InfoPlugin&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">assets</span>) =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;InfoPlugin&#x27;</span>,assets);<br>        &#125;);<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">InfoPlugin</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/utils/syncHook.js</span><br><span class="hljs-comment">// 自己实现tapable</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SyncHook</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">args</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tasks</span> = [];<br>  &#125;<br>  <span class="hljs-comment">//   注册事件</span><br>  <span class="hljs-title function_">tap</span>(<span class="hljs-params">name, task</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tasks</span>.<span class="hljs-title function_">push</span>(task);<br>  &#125;<br>  <span class="hljs-comment">//   触发事件</span><br>  <span class="hljs-title function_">call</span>(<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tasks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">task</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">task</span>(...args);<br>    &#125;);<br>  &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">SyncHook</span>;<br></code></pre></td></tr></table></figure>我们可以看到上面就是一个发布订阅模式</li></ul><h2 id="执行实例compiler的run方法，开始编译"><a href="#执行实例compiler的run方法，开始编译" class="headerlink" title="执行实例compiler的run方法，开始编译"></a>执行实例compiler的run方法，开始编译</h2><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack工作流程</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Compiler</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span> = config;<br>    <span class="hljs-comment">// 注册插件钩子函数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span> = &#123;<br>      <span class="hljs-attr">emit</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>(),<br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> entries = []; <span class="hljs-comment">// 所有入口</span><br>    <span class="hljs-keyword">let</span> chunks = []; <span class="hljs-comment">// 所有chunk</span><br>    <span class="hljs-keyword">let</span> modules = []; <span class="hljs-comment">// 所有模块, chunk就是入口生成的js,module就是chunk依赖的各个模块, chunk包含module</span><br>    <span class="hljs-keyword">let</span> assets = &#123;&#125;; <span class="hljs-comment">// 待输出文件chunk对象</span><br>    <span class="hljs-comment">// 4-1.获取入口文件路径</span><br>    <span class="hljs-keyword">let</span> entry = path.<span class="hljs-title function_">join</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">context</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">entry</span>);<br>    entries.<span class="hljs-title function_">push</span>(entry);<br>    <span class="hljs-comment">// 4-2.从入口文件出发，调用所有配置的loader进行编译(如果非js文件都需要loader处理)</span><br>    <span class="hljs-keyword">let</span> rawEntryContent = fs.<span class="hljs-title function_">readFileSync</span>(entry, <span class="hljs-string">&quot;utf8&quot;</span>); <span class="hljs-comment">// 读取入口文件内容</span><br>    <span class="hljs-keyword">let</span> entrySource = <span class="hljs-title function_">babelLoader</span>(rawEntryContent); <span class="hljs-comment">// loader本质就是一个函数, 模拟babel-loader处理得到转换后的内容</span><br>    <span class="hljs-comment">//  入口模块</span><br>    <span class="hljs-keyword">let</span> entryModule = &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>,<br>      <span class="hljs-attr">source</span>: entrySource,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;main&quot;</span>, <span class="hljs-comment">// 哪个入口依赖的</span><br>    &#125;;<br>    modules.<span class="hljs-title function_">push</span>(entryModule);<br>    <span class="hljs-comment">// 4-3.将入口模块编译成ast,然后递归识别找到里面的依赖模块以及依赖的依赖(require、import),比如index.js依赖了require(&#x27;a.css&#x27;),</span><br>    <span class="hljs-keyword">let</span> cssPath = path.<span class="hljs-title function_">join</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">context</span>, <span class="hljs-string">&quot;./src/a.css&quot;</span>);<br>    <span class="hljs-keyword">let</span> rawCssContent = fs.<span class="hljs-title function_">readFileSync</span>(cssPath, <span class="hljs-string">&quot;utf8&quot;</span>);<br>    <span class="hljs-keyword">let</span> cssSource = <span class="hljs-title function_">cssLoader</span>(rawCssContent);<br>    <span class="hljs-keyword">let</span> cssModule = &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;./src/a.css&quot;</span>,<br>      <span class="hljs-attr">source</span>: cssSource,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;main&quot;</span>, <span class="hljs-comment">// 哪个入口依赖的</span><br>    &#125;;<br>    modules.<span class="hljs-title function_">push</span>(cssModule);<br>    <span class="hljs-comment">// 4-4.将入口转换为chunk(默认一个入口一个chunk.js), 一个chunk.js包含多个依赖模块</span><br>    <span class="hljs-keyword">let</span> chunk = &#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;main&quot;</span>,<br>      <span class="hljs-attr">modules</span>: [entryModule, cssModule],<br>    &#125;;<br>    chunks.<span class="hljs-title function_">push</span>(chunk);<br>    <span class="hljs-comment">// 5.将chunk转换为一个个单独的文件加入到输出列表(这步是修改输出内容的最后机会)</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> chunk <span class="hljs-keyword">of</span> chunks) &#123;<br>      assets[chunk.<span class="hljs-property">id</span> + <span class="hljs-string">&quot;.js&quot;</span>] = <span class="hljs-string">`</span><br><span class="hljs-string">    (function (modules) &#123;</span><br><span class="hljs-string">            return __webpack_require__(&quot;./src/[chunk.id].js&quot;); // 加载入口文件</span><br><span class="hljs-string">     &#125;)(&#123;</span><br><span class="hljs-string">        &quot;./src/[chunk.id].js&quot;: function (module, exports, __webpack_require__) &#123;</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">    &#125;);</span><br><span class="hljs-string">    `</span>;<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">emit</span>.<span class="hljs-title function_">call</span>(assets); <span class="hljs-comment">// 执行插件</span><br>    <span class="hljs-comment">// 6. 遍历输出列表，写入文件系统</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> fileName <span class="hljs-keyword">in</span> assets) &#123;<br>      fs.<span class="hljs-title function_">writeFileSync</span>(<br>        path.<span class="hljs-title function_">join</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">output</span>.<span class="hljs-property">path</span>, fileName),<br>        assets[fileName]<br>      );<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">babelLoader</span>(<span class="hljs-params">content</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">    let sum=(a,b)=&gt;a+b</span><br><span class="hljs-string">    require(&#x27;./a.css&#x27;)</span><br><span class="hljs-string">  `</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">cssLoader</span>(<span class="hljs-params">content</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">        let style= document.createElement(&#x27;style&#x27;)</span><br><span class="hljs-string">        style.innerHTML=<span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(content)&#125;</span></span><br><span class="hljs-string">        document.head.appendChild(style)</span><br><span class="hljs-string">    `</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们来分步骤讲解下</p><h3 id="从配置读取入口路径"><a href="#从配置读取入口路径" class="headerlink" title="从配置读取入口路径"></a>从配置读取入口路径</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> entries = []; <span class="hljs-comment">// 所有入口(比如多入口)</span><br><span class="hljs-keyword">let</span> entry = path.<span class="hljs-title function_">join</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">context</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">entry</span>);<br>entries.<span class="hljs-title function_">push</span>(entry);<br></code></pre></td></tr></table></figure><h3 id="获取入口内容调用loader编译并存入modules数组中"><a href="#获取入口内容调用loader编译并存入modules数组中" class="headerlink" title="获取入口内容调用loader编译并存入modules数组中"></a>获取入口内容调用loader编译并存入modules数组中</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> rawEntryContent = fs.<span class="hljs-title function_">readFileSync</span>(entry, <span class="hljs-string">&quot;utf8&quot;</span>); <span class="hljs-comment">// 读取入口文件内容</span><br><span class="hljs-keyword">let</span> entrySource = <span class="hljs-title function_">babelLoader</span>(rawEntryContent); <span class="hljs-comment">// loader本质就是一个函数, 模拟babel-loader处理得到转换后的内容</span><br><span class="hljs-comment">// 这里假设定义一个loader</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">babelLoader</span>(<span class="hljs-params">content</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">    let sum=(a,b)=&gt;a+b</span><br><span class="hljs-string">    require(&#x27;./a.css&#x27;)</span><br><span class="hljs-string">  `</span>;<br>&#125;<br><span class="hljs-comment">//  入口模块</span><br><span class="hljs-keyword">let</span> entryModule = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>,<br>  <span class="hljs-attr">source</span>: entrySource, <span class="hljs-comment">// 编译后内容</span><br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;main&quot;</span>, <span class="hljs-comment">// 哪个入口依赖的</span><br>&#125;;<br><span class="hljs-keyword">let</span> modules = []; <span class="hljs-comment">// 存储所有模块, chunk就是根据入口生成的js,module就是chunk依赖的各个模块,所以一个入口一个chunk, 一个chunk包含module</span><br>modules.<span class="hljs-title function_">push</span>(entryModule);<br></code></pre></td></tr></table></figure><ul><li>loader本质上是一个函数, 就是<strong>转换内容</strong>,如babel-loader转换es6代码为es5代码</li><li>转换后定义模块对象, 模块对象包含id路径、source编译后代码、name入口来源信息, 存入modules数组中</li></ul><h3 id="将编译代码转ast获取依赖模块"><a href="#将编译代码转ast获取依赖模块" class="headerlink" title="将编译代码转ast获取依赖模块"></a>将编译代码转ast获取依赖模块</h3><ul><li>通过acorn库将loader转换后的代码转换为ast,然后识别ast, 收集依赖关系,从而形成一颗关系树.比如index.js依赖了require(‘a.css’)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> cssPath = path.<span class="hljs-title function_">join</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">context</span>, <span class="hljs-string">&quot;./src/a.css&quot;</span>);<br><span class="hljs-keyword">let</span> rawCssContent = fs.<span class="hljs-title function_">readFileSync</span>(cssPath, <span class="hljs-string">&quot;utf8&quot;</span>);<br><span class="hljs-keyword">let</span> cssSource = <span class="hljs-title function_">cssLoader</span>(rawCssContent);<br><span class="hljs-keyword">let</span> cssModule = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;./src/a.css&quot;</span>,<br>  <span class="hljs-attr">source</span>: cssSource,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;main&quot;</span>, <span class="hljs-comment">// 哪个入口依赖的</span><br>&#125;;<br>modules.<span class="hljs-title function_">push</span>(cssModule);<br></code></pre></td></tr></table></figure></li><li>cssLoader是定义的loader, 模拟css-loader处理css文件, 得到js对象, 存入modules数组中</li></ul><h3 id="将模块转换为chunk"><a href="#将模块转换为chunk" class="headerlink" title="将模块转换为chunk"></a>将模块转换为chunk</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> chunks = []; <span class="hljs-comment">// 所有chunk</span><br><span class="hljs-keyword">let</span> chunk = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;main&quot;</span>,<br>  <span class="hljs-attr">modules</span>: [entryModule, cssModule],<br>&#125;;<br>chunks.<span class="hljs-title function_">push</span>(chunk);<br></code></pre></td></tr></table></figure><h3 id="5-根据chunk构建输出js对象"><a href="#5-根据chunk构建输出js对象" class="headerlink" title="5. 根据chunk构建输出js对象"></a>5. 根据chunk构建输出js对象</h3><ul><li>将chunk转换为一个个单独的文件加入到输出列表对象(这步是修改输出内容的最后机会),该对象就是输出文件名、内容</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> chunk <span class="hljs-keyword">of</span> chunks) &#123;<br>  assets[chunk.<span class="hljs-property">id</span> + <span class="hljs-string">&quot;.js&quot;</span>] = <span class="hljs-string">`</span><br><span class="hljs-string">(function (modules) &#123;</span><br><span class="hljs-string">        return __webpack_require__(&quot;./src/[chunk.id].js&quot;); // 加载入口文件</span><br><span class="hljs-string">  &#125;)(&#123;</span><br><span class="hljs-string">    &quot;./src/[chunk.id].js&quot;: function (module, exports, __webpack_require__) &#123;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">&#125;);</span><br><span class="hljs-string">`</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="执行插件"><a href="#执行插件" class="headerlink" title="执行插件"></a>执行插件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">emit</span>.<span class="hljs-title function_">call</span>(assets); <span class="hljs-comment">// 执行插件</span><br></code></pre></td></tr></table></figure><ul><li>执行发布订阅模式的发布, 将输出文件对象传入进去供<strong>插件操作修改</strong></li></ul><h3 id="遍历输出对象，写入文件系统到打包目录"><a href="#遍历输出对象，写入文件系统到打包目录" class="headerlink" title="遍历输出对象，写入文件系统到打包目录"></a>遍历输出对象，写入文件系统到打包目录</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> fileName <span class="hljs-keyword">in</span> assets) &#123;<br>  fs.<span class="hljs-title function_">writeFileSync</span>(<br>    path.<span class="hljs-title function_">join</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">config</span>.<span class="hljs-property">output</span>.<span class="hljs-property">path</span>, fileName),<br>    assets[fileName]<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><strong>初始化参数</strong>: 从配置文件和 Shell 语句中读取与合并参数，得出最终的参数。</li><li><strong>初始化实例</strong>: 定义config、 定义钩子函数(发布订阅)供插件注册用</li><li><strong>从配置读取插件循环订阅注册</strong></li><li><strong>执行compile.run开始编译</strong><ul><li>获取入口文件路径同时<strong>fs读取入口内容进行loader转换</strong></li><li>将loader转换后的代码通过<strong>acorn转ast获取依赖模块</strong>, 如果依赖模块不是js也要调用loader进行转换</li><li><strong>构建输出对象</strong>: 即chunk对象(即要打包输出的js), chunk对象包含一个入口的所有module模块数组(入口模块和依赖模块)、打包输出的文件名id. 注意: 一个入口一个chunk, 一个chunk包含多个依赖module模块. 这一步是修改输出内容的最后机会,我们可以通过插件来修改</li><li><strong>执行插件</strong>: 传入构建对象,此时可以修改输出内容</li><li>遍历输出对象,<strong>操作fs写入</strong>文件系统(打包文件夹)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> webpack4 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2.按需加载</title>
      <link href="/ypf-blog/2024/12/12/webpack4/2.%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD/"/>
      <url>/ypf-blog/2024/12/12/webpack4/2.%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="import按需加载"><a href="#import按需加载" class="headerlink" title="import按需加载"></a>import按需加载</h1><blockquote><p>我们知道,webpack打包默认把所有模块都会打包出一个js, 如上节讲的 <code>main.js</code>.这样会导致文件过大,所以我们需要按需加载(分割js)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// title.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-string">&quot;title&quot;</span>;<br><span class="hljs-comment">// title-es.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;title-es&quot;</span>;<br><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./title&quot;</span>);<br><span class="hljs-keyword">const</span> b = <span class="hljs-keyword">import</span>(<span class="hljs-string">&quot;./title-es&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b);<br>a.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, <span class="hljs-string">&quot;res-commonjs&quot;</span>);<br>&#125;);<br>b.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, <span class="hljs-string">&quot;res-es&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>打包运行如下图:<br><img src="images/1.jpg" width="50%"/><br><img src="images/2.jpg" width="50%"/><br>上图, title被打包到1.js, title-es被打包到0.js. 剩下就是主入口main.js</p><ul><li>在webpack中, 只要通过<code>import(&#39;xxx&#39;)</code>引入的模块,打包的时候都会<code>生成单独的js</code>文件,不会合并到入口js中,也就是说<code>入口的js都是同步js</code>.<ul><li>这里说的是<code>import(&#39;xx&#39;)引入文件</code>,会生成单独js</li><li>不是<code>import xx from &#39;xxx&#39;这种引入属性</code>,这种还是合并到入口js中</li></ul></li><li>如果通过import引入模块里面内部也有通过import引入, 其内部引入的也会生成单独的js, 所以只要import引入模块都会生成单独js</li><li>默认分离的模块名是webpack自己生成的, 当然也可以使用webpack提供的<code>魔法注释</code>自定义</li><li>返回是一个<code>promise</code>,查看then返回结果,无论es还是commonjs模块, 都会变成下面这种es对象<ul><li>default: 模块的默认导出</li><li>keys: 模块的属性</li><li>__esModule: true</li><li>Symbol(Symbol.toStringTag): Module</li></ul></li></ul><h2 id="魔法注释"><a href="#魔法注释" class="headerlink" title="魔法注释"></a>魔法注释</h2><blockquote><p>魔术注释(Magic Comments)是由 Webpack 提供的，可以为代码分割服务的一种技术。通过在 import 关键字后的括号中使用指定注释，我们可以对代码分割后的 chunk 有更多的控制权。</p></blockquote><ul><li><code>webpackChunkName</code>: 用来指定打包后的文件名</li><li><code>webpackPrefetch</code>: 资源预拉取</li><li><code>webpackPreload</code>: 资源预加载</li><li>…<a href="https://rain120.github.io/study-notes/engineering/webpack/magic-comments">等等</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;test&quot; */</span> <span class="hljs-string">&quot;./title&quot;</span>);<br></code></pre></td></tr></table></figure><p>上面截图我们知道title打包后是1.js, 我们重命名后就会变成title.js</p><ul><li>如果同一个模块, 一个使用重命名,一个没有,经测试, 最终只会生成<code>一个重命名的js</code>,无论执行顺序怎么调换</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;test&quot; */</span> <span class="hljs-string">&quot;./title&quot;</span>);<br><span class="hljs-keyword">const</span> b = <span class="hljs-keyword">import</span>( <span class="hljs-string">&quot;./title&quot;</span>);<br></code></pre></td></tr></table></figure><p>上面代码经测试,最终只会生成一个test.js,没有0.js,  倒换顺序也一样</p><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>我们就用上面的demo,分步骤讲解下打包后的代码</p><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span> (<span class="hljs-params">modules</span>) &#123;<br>   ...<br>&#125;)(&#123;<br>  <span class="hljs-string">&quot;./src/index.js&quot;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">module</span>, <span class="hljs-built_in">exports</span>, __webpack_require__</span>) &#123;<br>    <span class="hljs-comment">// 按需加载</span><br>    <span class="hljs-keyword">const</span> a = __webpack_require__<br>      .<span class="hljs-title function_">e</span>(<span class="hljs-number">1</span>)<br>      .<span class="hljs-title function_">then</span>(__webpack_require__.<span class="hljs-property">t</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;./src/title.js&quot;</span>, <span class="hljs-number">7</span>));<br>    <span class="hljs-keyword">const</span> b = __webpack_require__<br>      .<span class="hljs-title function_">e</span>(<span class="hljs-number">0</span>)<br>      .<span class="hljs-title function_">then</span>(__webpack_require__.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;./src/title-es.js&quot;</span>));<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b);<br>    a.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, <span class="hljs-string">&quot;res-commonjs&quot;</span>);<br>    &#125;);<br>    b.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, <span class="hljs-string">&quot;res-es&quot;</span>);<br>    &#125;);<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>我们可以看到</p><ul><li>入参只有入口js,按需(import)引入的js不会出现在入口入参中,只会变成为<code>__webpack_require__.e(1).then(__webpack_require__.t.bind(null, &quot;./src/title.js&quot;, 7))</code></li><li>import(‘xx’)转换为promise<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// commonjs模块 </span><br><span class="hljs-comment">// const a = import(&quot;./title&quot;);</span><br>__webpack_require__.<span class="hljs-title function_">e</span>(<span class="hljs-number">1</span>)  <span class="hljs-comment">// 这里1是打包后的文件名1.js,如果用了魔法注释,就是修改后的文件名</span><br>                   .<span class="hljs-title function_">then</span>(__webpack_require__.<span class="hljs-property">t</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;./src/title.js&quot;</span>, <span class="hljs-number">7</span>)) <span class="hljs-comment">// promise </span><br><span class="hljs-comment">// es模块        </span><br><span class="hljs-comment">// const b = import(&quot;./title-es&quot;);</span><br>__webpack_require__.<span class="hljs-title function_">e</span>(<span class="hljs-number">0</span>)  <span class="hljs-comment">// 这里0是打包后的文件名0.js</span><br>                   .<span class="hljs-title function_">then</span>(__webpack_require__.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;./src/title-es.js&quot;</span>))  <span class="hljs-comment">// promise </span><br></code></pre></td></tr></table></figure>__webpack_require__我们上节讲过(手动实现require函数),接下来我看下 <code>__webpack_require__.e</code></li></ul><h2 id="webpack-require-e-动态加载chunk"><a href="#webpack-require-e-动态加载chunk" class="headerlink" title="webpack_require.e 动态加载chunk"></a><strong>webpack_require</strong>.e 动态加载chunk</h2><blockquote><p>核心方法: 用来动态加载模块chunk</p></blockquote><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//  未加载:undefined     chunk not loaded</span><br><span class="hljs-comment">//  预加载/预获取:null    chunk preloaded/prefetched</span><br><span class="hljs-comment">//  正在加载中:Promise    chunk loading</span><br><span class="hljs-comment">//  加载成功:0           chunk loaded</span><br><span class="hljs-comment">//  存放chunk的加载状态</span><br><span class="hljs-keyword">var</span> installedChunks = &#123;<br>  <span class="hljs-attr">main</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">// 默认主入口模块加载成功</span><br>&#125;;<br><span class="hljs-comment">// 动态加载模块</span><br>__webpack_require__.<span class="hljs-property">e</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">requireEnsure</span>(<span class="hljs-params">chunkId</span>) &#123;<br>  <span class="hljs-keyword">var</span> promises = [];<br>  <span class="hljs-keyword">var</span> installedChunkData = installedChunks[chunkId];<br>  <span class="hljs-keyword">if</span> (installedChunkData !== <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 模块!==加载成功</span><br>    <span class="hljs-keyword">if</span> (installedChunkData) &#123; <span class="hljs-comment">// 有值肯定是promise,表示正在加载模块</span><br>      promises.<span class="hljs-title function_">push</span>(installedChunkData[<span class="hljs-number">2</span>]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 第一次肯定是undefined-未加载</span><br>      <span class="hljs-comment">// 为模块创建一个promise</span><br>      <span class="hljs-keyword">var</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) &#123;<br>        installedChunkData = installedChunks[chunkId] = [resolve, reject]; <span class="hljs-comment">// 缓存模块</span><br>      &#125;);<br>      promises.<span class="hljs-title function_">push</span>((installedChunkData[<span class="hljs-number">2</span>] = promise)); <span class="hljs-comment">// [resolve,reject,promise]</span><br><br>      <span class="hljs-comment">// 开始加载模块 start chunk loading</span><br>      <span class="hljs-keyword">var</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;script&quot;</span>);<br>      <span class="hljs-keyword">var</span> onScriptComplete;<br><br>      script.<span class="hljs-property">charset</span> = <span class="hljs-string">&quot;utf-8&quot;</span>;<br>      script.<span class="hljs-property">timeout</span> = <span class="hljs-number">120</span>;<br>      <span class="hljs-comment">// __webpack_require__.p  是 webpack.config.js中配置的output.publicPath</span><br>      script.<span class="hljs-property">src</span> = __webpack_require__.<span class="hljs-property">p</span> + <span class="hljs-string">&quot;&quot;</span> + chunkId + <span class="hljs-string">&quot;.js&quot;</span>;<br><br>      <span class="hljs-comment">// create error before stack unwound to get useful stacktrace later</span><br>      <span class="hljs-keyword">var</span> error = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>();<br>      onScriptComplete = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>        <span class="hljs-comment">// avoid mem leaks in IE.</span><br>        script.<span class="hljs-property">onerror</span> = script.<span class="hljs-property">onload</span> = <span class="hljs-literal">null</span>;<br>        <span class="hljs-built_in">clearTimeout</span>(timeout); <span class="hljs-comment">// 清除120s 定时器</span><br>        <span class="hljs-keyword">var</span> chunk = installedChunks[chunkId]; <span class="hljs-comment">// 加载状态</span><br>        <span class="hljs-keyword">if</span> (chunk !== <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-keyword">if</span> (chunk) &#123;<br>            <span class="hljs-keyword">var</span> errorType =<br>              event &amp;&amp; (event.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;load&quot;</span> ? <span class="hljs-string">&quot;missing&quot;</span> : event.<span class="hljs-property">type</span>);<br>            <span class="hljs-keyword">var</span> realSrc = event &amp;&amp; event.<span class="hljs-property">target</span> &amp;&amp; event.<span class="hljs-property">target</span>.<span class="hljs-property">src</span>;<br>            error.<span class="hljs-property">message</span> =<br>              <span class="hljs-string">&quot;Loading chunk &quot;</span> +<br>              chunkId +<br>              <span class="hljs-string">&quot; failed.\n(&quot;</span> +<br>              errorType +<br>              <span class="hljs-string">&quot;: &quot;</span> +<br>              realSrc +<br>              <span class="hljs-string">&quot;)&quot;</span>;<br>            error.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;ChunkLoadError&quot;</span>;<br>            error.<span class="hljs-property">type</span> = errorType;<br>            error.<span class="hljs-property">request</span> = realSrc;<br>            chunk[<span class="hljs-number">1</span>](error);<br>          &#125;<br>          installedChunks[chunkId] = <span class="hljs-literal">undefined</span>;<br>        &#125;<br>      &#125;;<br>      <span class="hljs-comment">// 定时器开始, 如果120s后执行了,说明定时器没有被清除, 加载超时了</span><br>      <span class="hljs-keyword">var</span> timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">onScriptComplete</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;timeout&quot;</span>, <span class="hljs-attr">target</span>: script &#125;);<br>      &#125;, <span class="hljs-number">120000</span>);<br>      script.<span class="hljs-property">onerror</span> = script.<span class="hljs-property">onload</span> = onScriptComplete;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(script);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(promises);<br>&#125;;<br></code></pre></td></tr></table></figure><p>demo代码<code>__webpack_require__.e(1)</code>逻辑梳理如下:</p><ul><li>全局变量<code>installedChunks</code> 用来缓存模块加载状态, 初始化默认 <code>main</code>主入口模块,状态为<code>0</code>表示加载成功<ul><li><code>undefined</code>: 未加载</li><li><code>null</code>: 预加载/预获取</li><li><code>Promise</code>: 正在加载中</li><li><code>0</code>: 加载成功</li></ul></li><li>判断<code>installedChunks[chunkId]</code>状态是否为0, 第一次肯定不为0,是undefined<ul><li>new一个promise(只为了等待加载js的pending用), <code>installedChunks[chunkId]=[resolve, reject, promise]</code>,同时定义promises数组存入该promise.</li><li>document.createElement创建script,然后插入head标签中开始加载chunkId对应的模块. 同时开始120s的定时器超时.</li><li>最后 <code>return Promise.all(promises)</code></li></ul></li></ul><p>我们加载了chunk,那加载成功后,如后回调?</p><h2 id="window-webpackJsonp桥回调函数"><a href="#window-webpackJsonp桥回调函数" class="headerlink" title="window.webpackJsonp桥回调函数"></a>window.webpackJsonp桥回调函数</h2><p>webpack是在window上定义了一个桥(window.webpackJsonp)用来存放执行加载成功的回调.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-variable language_">window</span>[<span class="hljs-string">&quot;webpackJsonp&quot;</span>] = <span class="hljs-variable language_">window</span>[<span class="hljs-string">&quot;webpackJsonp&quot;</span>] || [];<br>webpackJsonp.<span class="hljs-property">push</span> = <span class="hljs-function">(<span class="hljs-params">[chunkIds,moreModules]</span>)=&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> moduleId,<br>      chunkId,<br>      i = <span class="hljs-number">0</span>,<br>      resolves = [];<br>    <span class="hljs-comment">//  标记为0，到此表示加载成功</span><br>    <span class="hljs-keyword">for</span> (; i &lt; chunkIds.<span class="hljs-property">length</span>; i++) &#123;<br>      chunkId = chunkIds[i];<br>      <span class="hljs-keyword">const</span> installedChunksData = installedChunks[chunkId]; <span class="hljs-comment">// [resolve, reject, promise]</span><br>      <span class="hljs-keyword">const</span> resolve = installedChunksData[<span class="hljs-number">0</span>];<br>      resolves.<span class="hljs-title function_">push</span>(resolve);<br>      installedChunks[chunkId] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 标记为0，到此表示加载成功</span><br>    &#125;<br>    <span class="hljs-comment">// 合并到modules参数中</span><br>    <span class="hljs-keyword">for</span> (moduleId <span class="hljs-keyword">in</span> moreModules) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(moreModules, moduleId)) &#123;<br>        modules[moduleId] = moreModules[moduleId];<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 依次执行resolve方法从而触发后面then(shift-删除数组中第一个元素，并返回)</span><br>    <span class="hljs-keyword">while</span> (resolves.<span class="hljs-property">length</span>) &#123;<br>      resolves.<span class="hljs-title function_">shift</span>()();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><code>window[&quot;webpackJsonp&quot;]</code>是一个回调函数桥, 接收模块id和模块对象, chunkIds是模块id, moreModules是模块对象</li><li>该桥定义push方法,<code>让chunk来调用</code>传入.(因为各个chunk都是独立文件,通过window定义变量操作就方便了)<br>结合下面chunk调用push,我们理下逻辑:<ul><li>标记模块加载成功: <code>installedChunks[chunkId] = 0</code></li><li>将模块对象合并到我们上节课讲的自执行函数的modules参数中,因为初始化入参只包含了入口模块对象(非动态加载模块对象), 合并后就包含了各个chunk对象了</li><li>循环执行<code>resolve</code>方法用来触发<code>__webpack_require__.e</code>的then</li></ul></li></ul><h2 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h2><p>我们看下分离出的chunk代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.js</span><br><span class="hljs-variable language_">window</span>[<span class="hljs-string">&quot;webpackJsonp&quot;</span>].<span class="hljs-title function_">push</span>([<br>  [<span class="hljs-number">1</span>], <span class="hljs-comment">// chunkId-生成的chunk文件名</span><br>  <span class="hljs-comment">// 上节课讲的入口加载的各个模块对象</span><br>  &#123;<br>    <span class="hljs-string">&quot;./src/title.js&quot;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">module</span>, <span class="hljs-built_in">exports</span></span>) &#123;<br>      <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;title&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-string">&quot;age&quot;</span>,<br>        <span class="hljs-attr">age1</span>: <span class="hljs-string">&quot;age1&quot;</span>,<br>      &#125;;<br>    &#125;,<br>  &#125;,<br>]);<br></code></pre></td></tr></table></figure><h2 id="webpack-require-t统一返回chunk对象"><a href="#webpack-require-t统一返回chunk对象" class="headerlink" title="webpack_require.t统一返回chunk对象"></a><strong>webpack_require</strong>.t统一返回chunk对象</h2><blockquote><p>主要目的是将commonjs转换为es模块(增加了default属性), 因为es模块是有default属性, 为了和他一致,这样通过import的then拿到的返回格式一样.</p></blockquote><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// mode &amp; 1: value is a module id, require it value是一个模块id,需要__webpack_require__加载</span><br><span class="hljs-comment">// mode &amp; 2: merge all properties of value into the ns 合并value的所有属性到ns对象 中</span><br><span class="hljs-comment">// mode &amp; 4: return value when already ns object 如果ns是一个对象, 直接返回</span><br><span class="hljs-comment">// mode &amp; 8|1: behave like require 如果是8按位或1(即 1000 | 0001 === 1001 即 十进制9 ), 和require方法一样</span><br>__webpack_require__.<span class="hljs-property">t</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">value, mode</span>) &#123;<br>  <span class="hljs-comment">//    value是一个模块id,需要__webpack_require__加载</span><br>  <span class="hljs-keyword">if</span> (mode &amp; <span class="hljs-number">1</span>) value = <span class="hljs-title function_">__webpack_require__</span>(value);<br>  <span class="hljs-comment">// value是es模块,直接返回</span><br>  <span class="hljs-keyword">if</span> (mode &amp; <span class="hljs-number">8</span>) <span class="hljs-keyword">return</span> value;<br>  <span class="hljs-comment">// value已经是一个ns对象,直接返回</span><br>  <span class="hljs-keyword">if</span> (mode &amp; <span class="hljs-number">4</span> &amp;&amp; <span class="hljs-keyword">typeof</span> value === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; value &amp;&amp; value.<span class="hljs-property">__esModule</span>)<br>    <span class="hljs-keyword">return</span> value;<br>  <span class="hljs-keyword">var</span> ns = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);<br>  __webpack_require__.<span class="hljs-title function_">r</span>(ns);<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(ns, <span class="hljs-string">&quot;default&quot;</span>, &#123; <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">value</span>: value &#125;);<br>  <span class="hljs-keyword">if</span> (mode &amp; <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-keyword">typeof</span> value != <span class="hljs-string">&quot;string&quot;</span>)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> value)<br>      __webpack_require__.<span class="hljs-title function_">d</span>(<br>        ns,<br>        key,<br>        <span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) &#123;<br>          <span class="hljs-keyword">return</span> value[key];<br>        &#125;.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">null</span>, key)<br>      );<br>  <span class="hljs-keyword">return</span> ns;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><code>__webpack_require__.t</code>方法接收两个参数, 第一个是模块id, 第二个是模式, 模式是二进制位, 用来判断是否需要转换模块</li><li>对于common模块主要是创建空对象,然后default保存整个对象, 每个属性合并过去, 增加<code>__esModule: true</code> <code>Symbol(Symbol.toStringTag): Module</code>,最后return这个对象<br>再看下运行结果(上面已经看过的图):<img src="images/1.jpg" width="50%"/></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>结合<a href="/ypf-blog/2025/02/07/webpack4/6.%E6%89%8B%E5%86%99webpack/" title="手写webpack">手写webpack</a>讲解,我们来理一下整体流程:</p><ul><li><p>编译的时候, 在normalModuleFactory中的ast解析中,判断import(xx)引入,将ast改成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"> nodePath.<span class="hljs-title function_">replaceWithSourceString</span>(<span class="hljs-string">`</span><br><span class="hljs-string">  __webpack_require__.e(&quot;1&quot;).then(__webpack_require__.t.bind(null,&quot;./src/title.js&quot;))</span><br><span class="hljs-string">`</span>);<br><span class="hljs-comment">// 1就是chunkName打包后的文件名</span><br></code></pre></td></tr></table></figure></li><li><p>在最后生成chunk文件的时候,判断async,就通过chunkTemplate为chunk生成代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-variable language_">window</span>[<span class="hljs-string">&quot;webpackJsonp&quot;</span>] = <span class="hljs-variable language_">window</span>[<span class="hljs-string">&quot;webpackJsonp&quot;</span>] || []).<span class="hljs-title function_">push</span>([[<span class="hljs-string">&quot;&lt;%-chunkName%&gt;&quot;</span>], &#123;<br>    &lt;%<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> <span class="hljs-variable language_">module</span> <span class="hljs-keyword">of</span> modules)<br>    &#123;%&gt;<br>        <span class="hljs-string">&quot;&lt;%-module.moduleId%&gt;&quot;</span>:<br>        (<span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">module</span>, <span class="hljs-built_in">exports</span>, __webpack_require__</span>) &#123;<br>          &lt;%-<span class="hljs-variable language_">module</span>.<span class="hljs-property">_source</span>%&gt;<br>        &#125;),<br>    &lt;%&#125;<br>  %&gt; <br>  &#125;]);<br></code></pre></td></tr></table></figure></li><li><p>main.js中定义了<code>__webpack_require__.e</code>方法和<code>__webpack_require__.t</code>方法.<br>其中<code>.e方法</code>就是用来实现动态加载的</p><ul><li>定义installedChunks对象<code>存储模块加载状态</code>, 默认为0-加载成功, 未加载:undefined 正在加载中:Promise  预加载/预获取:null</li><li>定义window[“webpackJsonp”]=([chunkIds,moreModules])=&gt;{}<code>桥方法</code>,用来供<code>模块加载成功调用</code></li><li>动态<code>创建script</code>然后插入head标签中<code>开始加载模块</code>(每个模块都new一个promise只用来pending),并写死120s倒计时, 模块加载成功时, 模块内部就会调用<code>window[&quot;webpackJsonp&quot;].push(模块)</code>方法</li><li><code>更改</code>模块<code>加载状态为0</code>并合并到main.js的<code>入参</code>中,然后执行promise的resolve方法</li></ul></li><li><p>此时已经完成了动态加载,但为了<code>统一</code>我们import(xx模块可能是es/common)<code>返回格式</code>, 就用<code>.t</code>方法, 都<code>统一为es格式</code></p><ul><li>common模块: 创建一个空对象,然后default保存整个对象, 每个属性放进去, 增加<code>__esModule: true</code>和<code>Symbol(Symbol.toStringTag): Module</code>,最后return这个对象</li><li>es不变(编译的时候会直接把代码改成和上面一样的格式)直接return出去</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> webpack4 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1.打包文件分析</title>
      <link href="/ypf-blog/2024/12/02/webpack4/1.%E6%89%93%E5%8C%85%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/"/>
      <url>/ypf-blog/2024/12/02/webpack4/1.%E6%89%93%E5%8C%85%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="初始化工程目录"><a href="#初始化工程目录" class="headerlink" title="初始化工程目录"></a>初始化工程目录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install webpack webpack-cli html-webpack-plugin -D<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;development&quot;</span>, <span class="hljs-comment">// or &#x27;production&#x27;打包模式</span><br>  <span class="hljs-attr">devtool</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 是否生成source map </span><br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>, <span class="hljs-comment">// 入口文件</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-comment">// filename: &quot;bundle.js&quot;, // 打包后的文件名</span><br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;dist&quot;</span>), <span class="hljs-comment">// 输出路径(只能是绝对路径,不能是相对路径)</span><br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;./src/index.html&quot;</span>, <span class="hljs-comment">// 指定模板文件路径</span><br>    &#125;),<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="commonjs加载commonjs模块"><a href="#commonjs加载commonjs模块" class="headerlink" title="commonjs加载commonjs模块"></a>commonjs加载commonjs模块</h1><p>入口文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">let</span> title=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./title&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(title);<br></code></pre></td></tr></table></figure><p>依赖模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// title.js</span><br>moudle.<span class="hljs-property">exports</span> = <span class="hljs-string">&quot;title&quot;</span>;<br></code></pre></td></tr></table></figure><p>我们运行<code>npm run build</code>看下打包后的js, 这里我们删除了注释、以及暂时用不到的代码,只保留了最核心的代码.</p><h2 id="module-exports和exports和this"><a href="#module-exports和exports和this" class="headerlink" title="module.exports和exports和this"></a>module.exports和exports和this</h2><h3 id="module-exports和exports"><a href="#module-exports和exports" class="headerlink" title="module.exports和exports"></a>module.exports和exports</h3><p>在看核心代码之前,我们先来分析下 exports 和 module.exports 的区别.</p><ul><li>exports本质上是对module.exports的引用, 所以 exports和module.exports是等价的.其默认值是 <code>&#123;&#125;</code>, 但在使用上存在部分差异.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">exports</span> === <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>,<span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>); <span class="hljs-comment">// true &#123;&#125; &#123;&#125;</span><br></code></pre></td></tr></table></figure></li><li>exports用来导出多个模块, module.exports用来导出单个模块.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.<span class="hljs-property">a</span>=<span class="hljs-number">1</span>; <span class="hljs-built_in">exports</span>.<span class="hljs-property">b</span>=<span class="hljs-number">2</span>;<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure></li><li>exports和module.exports都可以添加属性.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">exports</span>.<span class="hljs-property">a</span>=<span class="hljs-number">1</span>; <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">b</span>=<span class="hljs-number">2</span>;<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">2</span>&#125;<br></code></pre></td></tr></table></figure></li><li>exports和module.exports一起用, 如果是<code>module.exports=</code>而不是上面的添加属性, 则只有module.exports起作用.在模块加载时，require返回的是module.exports，而不是exports<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// test.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=<span class="hljs-number">2</span>;<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">a</span>=<span class="hljs-number">1</span>; <span class="hljs-comment">// 不起作用, 和上面互换顺序也是同样结果</span><br><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">const</span> res=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./test&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res) <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><ul><li><p>this指向当前模块, 而不是全局对象. 函数中的this是全局对象, 而不是当前模块.(如果是构造函数调用,此时this还是js中的实例)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// &#123;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>===<span class="hljs-variable language_">global</span>); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>===<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>===<span class="hljs-built_in">exports</span>); <span class="hljs-comment">// true</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>===<span class="hljs-variable language_">global</span>); <span class="hljs-comment">// true</span><br>&#125;<br><span class="hljs-title function_">test</span>()<br></code></pre></td></tr></table></figure></li><li><p>this指向当前模块, 相当于exports.a = 1 或者 module.exports.a = 1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// test.js</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">const</span> res=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./test&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res) <span class="hljs-comment">// &#123;a:1&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>global是全局对象,在上面定义的属性, 任意模块都可以访问,不需要导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// test.js</span><br><span class="hljs-variable language_">global</span>.<span class="hljs-property">a</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">const</span> a=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./a&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-params">a</span>) &#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">global</span>.<span class="hljs-property">a</span>) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><p>举个例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// title.js</span><br>moudle.<span class="hljs-property">exports</span> = <span class="hljs-string">&quot;title&quot;</span>;<br><br><span class="hljs-comment">// index.js 入口文件</span><br><span class="hljs-keyword">let</span> title=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./title&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(title); <span class="hljs-comment">// title</span><br></code></pre></td></tr></table></figure><p>打包后的js文件,我们删除掉暂时用不到的代码, 来分析下核心代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 自执行函数</span><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params">modules</span>) &#123;<br>  <span class="hljs-keyword">var</span> installedModules = &#123;&#125;; <span class="hljs-comment">// 模块缓存</span><br>  <span class="hljs-comment">// 自己实现一个require方法,浏览器没有require(基于commonjs规范)</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">__webpack_require__</span>(<span class="hljs-params">moduleId</span>) &#123;<br>    <span class="hljs-comment">//  判断缓存中有没有该模块</span><br>    <span class="hljs-keyword">if</span> (installedModules[moduleId]) &#123;<br>      <span class="hljs-keyword">return</span> installedModules[moduleId].<span class="hljs-property">exports</span>;<br>    &#125;<br>    <span class="hljs-comment">// 创建模块对象,并且放到缓存中</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = (installedModules[moduleId] = &#123;<br>      <span class="hljs-attr">i</span>: moduleId, <span class="hljs-comment">// 模块id (id)</span><br>      <span class="hljs-attr">l</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 是否已经加载过了(loaded)</span><br>      <span class="hljs-attr">exports</span>: &#123;&#125;, <span class="hljs-comment">// 导出对象,默认空对象</span><br>    &#125;);<br><br>    <span class="hljs-comment">// 执行模块方法 </span><br>    modules[moduleId].<span class="hljs-title function_">call</span>(<br>      <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>, <span class="hljs-comment">// this指向自定义模块导出对象 </span><br>      <span class="hljs-variable language_">module</span>,<br>      <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>,<br>      __webpack_require__<br>    );<br><br>    <span class="hljs-comment">// 标记该模块已经加载过</span><br>    <span class="hljs-variable language_">module</span>.<span class="hljs-property">l</span> = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">// 返回模块导出对象</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">__webpack_require__</span>(<span class="hljs-string">&quot;./src/index.js&quot;</span>); <span class="hljs-comment">// 加载入口文件</span><br>&#125;)(&#123;<br>  <span class="hljs-string">&quot;./src/index.js&quot;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">module</span>, <span class="hljs-built_in">exports</span>, __webpack_require__</span>) &#123;<br>    <span class="hljs-keyword">let</span> title = <span class="hljs-title function_">__webpack_require__</span>(<span class="hljs-string">&quot;./src/title.js&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(title);<br>  &#125;,<br><br>  <span class="hljs-string">&quot;./src/title.js&quot;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">module</span>, <span class="hljs-built_in">exports</span></span>) &#123;<br>    moudle.<span class="hljs-property">exports</span> = <span class="hljs-string">&quot;title&quot;</span>;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>我们梳理下思路:</p></li></ul><ol><li>打包后是一个<strong>自执行函数</strong><ul><li>函数的参数是一个对象, 包含所有require过的模块</li><li>key是模块的相对路径(以项目根目录为起点, 实际是执行打包时候的目录,一般都是根目录打包)</li><li>value是一个函数, 函数体的内容就是模块的源代码, 只不过因为浏览器没有require方法, 所以变成了自定义的__webpack_require__方法用于加载模块.</li></ul></li><li>自执行函数执行时<ul><li><strong>初始化已加载模块缓存</strong>: <code>var installedModules = &#123;&#125;;</code></li><li><strong>定义自定义的require方法</strong>: <code>function __webpack_require__(moduleId) &#123;...&#125;</code></li><li><strong>return加载入口文件开始执行</strong>: <code>return __webpack_require__(&quot;./src/index.js&quot;)</code></li></ul></li><li>因为调用__webpack_require__,入参是入口模块path, 此时<strong>开始执行__webpack_require__函数</strong><ul><li><strong>判断缓存中有没有该模块</strong>: 如果有,则直接返回该模块的exports对象, 否则继续执行</li><li><strong>初始化定义模块对象并放入缓存中</strong>: 有3个属性,(模块id(即path)、是否加载过、导出对象(默认为空对象))<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建模块对象,并且放到缓存中</span><br><span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = (installedModules[moduleId] = &#123;<br>  <span class="hljs-attr">i</span>: moduleId, <span class="hljs-comment">// 模块id (id)</span><br>  <span class="hljs-attr">l</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 是否已经加载过了(loaded)</span><br>  <span class="hljs-attr">exports</span>: &#123;&#125;, <span class="hljs-comment">// 导出对象,默认空对象</span><br>&#125;);<br></code></pre></td></tr></table></figure></li><li><strong>执行对应模块key方法</strong>: 通过call方法,将this指向自定义模块导出对象module.exports,并传入模块对象module、模块导出module.exports、自定义require方法,因为模块对象模块导出对象是自己定义的,所以相当于原来导出使用的这2个key就变成自己定义的了.<ul><li>执行对应模块函数时候,里面如果有__webpack_require__继续<strong>递归执行</strong></li></ul></li><li><strong>标记该模块已经加载过</strong>: <code>module.l = true;</code></li><li><strong>返回模块导出对象</strong>: <code>return module.exports;</code></li></ul></li></ol><p><strong>注</strong>: 改变this指向,是因为node.js中的commonjs模块, <code>this===module.exports</code>, 所以我们指向自己实现的module.exports</p><img src="images/1.jpg" height="500"/><h1 id="commonjs加载es模块"><a href="#commonjs加载es模块" class="headerlink" title="commonjs加载es模块"></a>commonjs加载es模块</h1><h2 id="Symbol-toStringTag"><a href="#Symbol-toStringTag" class="headerlink" title="Symbol.toStringTag"></a>Symbol.toStringTag</h2><p><code>Symbol.toStringTag</code>用于自定义对象类型.当使用 <code>Object.prototype.toString</code>或者<code>toString()</code> 方法时，返回该类型。</p><ul><li>JavaScript 语言在 ES6 规范中引入了 Symbol 类型，它是一种原始数据类型，用于创建唯一的标识符.Symbol 对象是不可改变且唯一的，适合用作对象属性的键。除了作为对象的属性键之外，Symbol 还有许多静态属性, <code>Symbol.toStringTag</code> 是其中一个。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;button&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">toString</span>()); <span class="hljs-comment">// [object HTMLButtonElement]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(a)); <span class="hljs-comment">// [object HTMLButtonElement]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toStringTag</span>]) <span class="hljs-comment">// HTMLButtonElement</span><br><br><span class="hljs-keyword">const</span> a=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">toString</span>()); <span class="hljs-comment">// [object Map]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(a)); <span class="hljs-comment">// [object Map]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toStringTag</span>]) <span class="hljs-comment">// Map</span><br><br><span class="hljs-keyword">const</span> a=&#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">toString</span>()); <span class="hljs-comment">// [object Object]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(a)); <span class="hljs-comment">// [object Object]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toStringTag</span>]) <span class="hljs-comment">// undefined 不能访问</span><br></code></pre></td></tr></table></figure><p>上面代码我们可以看到有些是可以直接访问<code>Symbol.toStringTag</code>, 但是有些是访问不到的.</p><h3 id="自定义对象类型"><a href="#自定义对象类型" class="headerlink" title="自定义对象类型"></a>自定义对象类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 自定义前</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;&#125;<br><span class="hljs-keyword">const</span> myObj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myObj.<span class="hljs-title function_">toString</span>()); <span class="hljs-comment">// [object Object]</span><br><span class="hljs-comment">// 自定义后</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  get [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toStringTag</span>]() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;foobar&quot;</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> myObj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myObj.<span class="hljs-title function_">toString</span>()); <span class="hljs-comment">// [object foobar]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myObj)<br></code></pre></td></tr></table></figure><img src="images/2.jpg" width="80%"/><p>自定义前的图就不截了,是看不到 <code>Symbol(Symbol.toStringTag)</code>的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 自定义前</span><br><span class="hljs-keyword">const</span> obj=&#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-title function_">toString</span>()) <span class="hljs-comment">// [object Object]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toStringTag</span>]) <span class="hljs-comment">// undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj)<br><br><span class="hljs-comment">// 自定义后</span><br><span class="hljs-keyword">const</span> obj1=&#123;&#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj1,<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toStringTag</span>,&#123;<br>  <span class="hljs-attr">value</span>:<span class="hljs-string">&#x27;foobar&#x27;</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1.<span class="hljs-title function_">toString</span>()) <span class="hljs-comment">// [object foobar]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toStringTag</span>]) <span class="hljs-comment">// foobar</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1)<br></code></pre></td></tr></table></figure><img src="images/3.jpg" width="80%"/><h2 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h2><p>举个例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// title.js</span><br>moudle.<span class="hljs-property">exports</span> = <span class="hljs-string">&quot;title&quot;</span>;<br><span class="hljs-comment">// title-es.js</span><br><span class="hljs-keyword">let</span> a=<span class="hljs-string">&quot;title&quot;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> a<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> age = <span class="hljs-string">&#x27;age&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> age1 = <span class="hljs-string">&#x27;age1&#x27;</span><br><br><span class="hljs-comment">// index.js 入口文件</span><br><span class="hljs-keyword">let</span> title=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./title&#x27;</span>)<br><span class="hljs-keyword">let</span> titleEs=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./title-es&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(title);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(titleEs);<br></code></pre></td></tr></table></figure><img src="images/4.jpg" width="80%"/><p>我们看打印结果</p><ul><li>title,打印的是我们上面讲过的title</li><li>title-es,打印的是一个对象,对象中有命名导出<code>age、age1</code>, 默认导出<code>default</code>,以及增加了<code>__esModule、Symbol(Symbol.toStringTag)属性</code>,所以webpack最终是<strong>将es模块编译成commonjs模块</strong>的.</li></ul><p>打包后的js文件,我们删除掉暂时用不到的代码, 来分析下核心代码:</p><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span> (<span class="hljs-params">modules</span>) &#123;<br>  <span class="hljs-keyword">var</span> installedModules = &#123;&#125;;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">__webpack_require__</span>(<span class="hljs-params">moduleId</span>) &#123;<br>    <span class="hljs-keyword">if</span> (installedModules[moduleId]) &#123;<br>      <span class="hljs-keyword">return</span> installedModules[moduleId].<span class="hljs-property">exports</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = (installedModules[moduleId] = &#123;<br>      <span class="hljs-attr">i</span>: moduleId,<br>      <span class="hljs-attr">l</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">exports</span>: &#123;&#125;,<br>    &#125;);<br>    modules[moduleId].<span class="hljs-title function_">call</span>(<br>      <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>,<br>      <span class="hljs-variable language_">module</span>,<br>      <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>,<br>      __webpack_require__<br>    );<br>    <span class="hljs-variable language_">module</span>.<span class="hljs-property">l</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>;<br>  &#125;<br>  __webpack_require__.<span class="hljs-property">d</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">exports</span>, name, getter</span>) &#123;<br>    <span class="hljs-comment">// 判断exports有没有该属性</span><br>    <span class="hljs-comment">// 为什么要用__webpack_require__封装成函数,不直接用Object.prototype.hasOwnProperty判断,目的是为了减少打包体积,因为可能其他地方也要判断, 封装成函数都调用该函数, 所以减少了打包体积</span><br>    <span class="hljs-keyword">if</span> (!__webpack_require__.<span class="hljs-title function_">o</span>(<span class="hljs-built_in">exports</span>, name)) &#123;<br>      <span class="hljs-comment">// 定义该属性</span><br>      <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-built_in">exports</span>, name, &#123; <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">get</span>: getter &#125;);<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-comment">// define __esModule on exports 在导出对象上定义__esModule属性</span><br>  <span class="hljs-comment">// 1.创建模块对象</span><br>  <span class="hljs-comment">// 2.增加__esModule属性表示该模块是一个es模块</span><br>  __webpack_require__.<span class="hljs-property">r</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">exports</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Symbol</span> !== <span class="hljs-string">&quot;undefined&quot;</span> &amp;&amp; <span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toStringTag</span>) &#123;<br>      <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-built_in">exports</span>, <span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toStringTag</span>, &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;Module&quot;</span> &#125;);<br>      <span class="hljs-comment">// 相当于 export[Symbol.toStringTag]=&quot;Module&quot;</span><br>      <span class="hljs-comment">// 目的: 当使用 Object.prototype.toString.call(exports), 打印是 &quot;[object Module]&quot;表示是一个模块对象</span><br>    &#125;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-built_in">exports</span>, <span class="hljs-string">&quot;__esModule&quot;</span>, &#123; <span class="hljs-attr">value</span>: <span class="hljs-literal">true</span> &#125;);<br>    <span class="hljs-comment">// 相当于 exports.__esModule=true</span><br>    <span class="hljs-comment">// 目的: 如果exports的对象有 __esModule 属性, 表示这个模块打包前是一个es模块, 因为ewbpack不管什么模块,最终都会打包成commonjs模块, 所以需要知道原来是什么模块,通过该属性来区分</span><br>  &#125;;<br>  <span class="hljs-comment">// 判断对象有没有该属性</span><br>  __webpack_require__.<span class="hljs-property">o</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">object, property</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(object, property);<br>  &#125;;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">__webpack_require__</span>((__webpack_require__.<span class="hljs-property">s</span> = <span class="hljs-string">&quot;./src/index.js&quot;</span>));<br>&#125;)(&#123;<br>  <span class="hljs-string">&quot;./src/index.js&quot;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">module</span>, <span class="hljs-built_in">exports</span>, __webpack_require__</span>) &#123;<br>    <span class="hljs-keyword">let</span> title=<span class="hljs-title function_">__webpack_require__</span>(<span class="hljs-string">&quot;./src/title.js&quot;</span>)<br>    <span class="hljs-keyword">let</span> titleEs=<span class="hljs-title function_">__webpack_require__</span>(<span class="hljs-string">&quot;./src/title-es.js&quot;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(title);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(titleEs);<br>  &#125;,<br>  <span class="hljs-string">&quot;./src/title-es.js&quot;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-variable language_">module</span>,</span><br><span class="hljs-params">    __webpack_exports__,</span><br><span class="hljs-params">    __webpack_require__</span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-string">&quot;use strict&quot;</span>;<br>    <span class="hljs-comment">// 1.创建模块对象 2.增加__esModule属性表示该模块是一个es模块</span><br>    __webpack_require__.<span class="hljs-title function_">r</span>(__webpack_exports__);<br><br>    <span class="hljs-comment">// 处理命名导出,如 export const name=&#x27;&#x27;</span><br>    __webpack_require__.<span class="hljs-title function_">d</span>(__webpack_exports__, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> age;<br>    &#125;);<br>    __webpack_require__.<span class="hljs-title function_">d</span>(__webpack_exports__, <span class="hljs-string">&quot;age1&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> age1;<br>    &#125;);<br><br>    <span class="hljs-comment">// 处理默认导出,如 export default</span><br>    <span class="hljs-keyword">let</span> a = <span class="hljs-string">&quot;title&quot;</span>;<br>    __webpack_exports__[<span class="hljs-string">&quot;default&quot;</span>] = a;<br>    <span class="hljs-keyword">const</span> age = <span class="hljs-string">&quot;age &quot;</span>;<br>    <span class="hljs-keyword">const</span> age1 = <span class="hljs-string">&quot;age1&quot;</span>;<br>  &#125;,<br>  <span class="hljs-string">&quot;./src/title.js&quot;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">module</span>, <span class="hljs-built_in">exports</span></span>) &#123;<br>    <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-string">&quot;title&quot;</span>;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>我们梳理下上面逻辑:</p><ul><li>对于es模块,会将module.exports变成<code>模块对象</code>, 并且增加<code>__esModule</code>属性, 表示该模块是一个es模块, 因为webpack不管什么模块,最终都会打包成commonjs模块, 所以需要知道原来是什么模块,通过该属性来区分</li><li>处理<code>命名导出</code>, 即在exports上增加对应属性</li><li>处理<code>默认导出</code>, 即在exports上增加default属性</li><li>__webpack_require__和上面的一模一样,没有变化</li></ul><h1 id="es模块加载es模块"><a href="#es模块加载es模块" class="headerlink" title="es模块加载es模块"></a>es模块加载es模块</h1><p>举个例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// title-es.js</span><br><span class="hljs-keyword">let</span> a=<span class="hljs-string">&quot;title&quot;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> a<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> age = <span class="hljs-string">&#x27;age&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> age1 = <span class="hljs-string">&#x27;age1&#x27;</span><br><br><span class="hljs-comment">// index.js 入口文件</span><br><span class="hljs-keyword">import</span> a, &#123;age,age1&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./title-es&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,age,age1); <span class="hljs-comment">// title age age1</span><br></code></pre></td></tr></table></figure><h2 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span> (<span class="hljs-params">modules</span>) &#123;<br>  <span class="hljs-keyword">var</span> installedModules = &#123;&#125;;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">__webpack_require__</span>(<span class="hljs-params">moduleId</span>) &#123;<br>    <span class="hljs-keyword">if</span> (installedModules[moduleId]) &#123;<br>      <span class="hljs-keyword">return</span> installedModules[moduleId].<span class="hljs-property">exports</span>;<br>    &#125;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = (installedModules[moduleId] = &#123;<br>      <span class="hljs-attr">i</span>: moduleId,<br>      <span class="hljs-attr">l</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">exports</span>: &#123;&#125;,<br>    &#125;);<br>    modules[moduleId].<span class="hljs-title function_">call</span>(<br>      <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>,<br>      <span class="hljs-variable language_">module</span>,<br>      <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>,<br>      __webpack_require__<br>    );<br>    <span class="hljs-variable language_">module</span>.<span class="hljs-property">l</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>;<br>  &#125;<br>  __webpack_require__.<span class="hljs-property">d</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">exports</span>, name, getter</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!__webpack_require__.<span class="hljs-title function_">o</span>(<span class="hljs-built_in">exports</span>, name)) &#123;<br>      <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-built_in">exports</span>, name, &#123; <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">get</span>: getter &#125;);<br>    &#125;<br>  &#125;;<br>  __webpack_require__.<span class="hljs-property">r</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">exports</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Symbol</span> !== <span class="hljs-string">&quot;undefined&quot;</span> &amp;&amp; <span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toStringTag</span>) &#123;<br>      <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-built_in">exports</span>, <span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toStringTag</span>, &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;Module&quot;</span> &#125;);<br>    &#125;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-built_in">exports</span>, <span class="hljs-string">&quot;__esModule&quot;</span>, &#123; <span class="hljs-attr">value</span>: <span class="hljs-literal">true</span> &#125;);<br>  &#125;;<br>  __webpack_require__.<span class="hljs-property">o</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">object, property</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(object, property);<br>  &#125;;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">__webpack_require__</span>((__webpack_require__.<span class="hljs-property">s</span> = <span class="hljs-string">&quot;./src/index.js&quot;</span>));<br>&#125;)(&#123;<br>  <span class="hljs-string">&quot;./src/index.js&quot;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-variable language_">module</span>,</span><br><span class="hljs-params">    __webpack_exports__,</span><br><span class="hljs-params">    __webpack_require__</span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-string">&quot;use strict&quot;</span>;<br>    __webpack_require__.<span class="hljs-title function_">r</span>(__webpack_exports__); <span class="hljs-comment">// 声明es模块(准确来说含有es模块就会有该声明, 因为可以混用)</span><br>    <span class="hljs-keyword">var</span> _title_es__WEBPACK_IMPORTED_MODULE_0__ = <span class="hljs-title function_">__webpack_require__</span>(<span class="hljs-string">&quot;./src/title-es.js&quot;</span>); <span class="hljs-comment">// 使用编译后的commonjs对象</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>      _title_es__WEBPACK_IMPORTED_MODULE_0__[<span class="hljs-string">&quot;default&quot;</span>],<br>      _title_es__WEBPACK_IMPORTED_MODULE_0__[<span class="hljs-string">&quot;age&quot;</span>],<br>      _title_es__WEBPACK_IMPORTED_MODULE_0__[<span class="hljs-string">&quot;age1&quot;</span>]<br>    );<br>  &#125;,<br><br>  <span class="hljs-string">&quot;./src/title-es.js&quot;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-variable language_">module</span>,</span><br><span class="hljs-params">    __webpack_exports__,</span><br><span class="hljs-params">    __webpack_require__</span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-string">&quot;use strict&quot;</span>;<br>    __webpack_require__.<span class="hljs-title function_">r</span>(__webpack_exports__);<br>    __webpack_require__.<span class="hljs-title function_">d</span>(__webpack_exports__, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> age;<br>    &#125;);<br>    __webpack_require__.<span class="hljs-title function_">d</span>(__webpack_exports__, <span class="hljs-string">&quot;age1&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> age1;<br>    &#125;);<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-string">&quot;title&quot;</span>;<br>    __webpack_exports__[<span class="hljs-string">&quot;default&quot;</span>] = a;<br>    <span class="hljs-keyword">const</span> age = <span class="hljs-string">&quot;age&quot;</span>;<br>    <span class="hljs-keyword">const</span> age1 = <span class="hljs-string">&quot;age1&quot;</span>;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>我们梳理下上面逻辑:</p><ul><li>声明es模块(准确来说含有es模块就会有该声明, 因为可以混用)</li><li>因为我们上面讲了es模块会转换为commonjs模块,所以在引入该模块的时候,这里就直接使用的是编译后的commonjs对象.</li></ul><h1 id="es模块加载commonjs模块"><a href="#es模块加载commonjs模块" class="headerlink" title="es模块加载commonjs模块"></a>es模块加载commonjs模块</h1><p>举个例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// title.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;title&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-string">&quot;age&quot;</span>,<br>  <span class="hljs-attr">age1</span>:<span class="hljs-string">&#x27;age1&#x27;</span><br>&#125;;<br><br><span class="hljs-comment">// index.js 入口文件</span><br><span class="hljs-keyword">import</span> a, &#123;age,age1&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./title&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,age,age1); <span class="hljs-comment">// &#123;title,age,age1&#125; age age1</span><br></code></pre></td></tr></table></figure><h2 id="核心代码-3"><a href="#核心代码-3" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span> (<span class="hljs-params">modules</span>) &#123;<br>  <span class="hljs-keyword">var</span> installedModules = &#123;&#125;;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">__webpack_require__</span>(<span class="hljs-params">moduleId</span>) &#123;<br>    ...<br>  &#125;<br>  __webpack_require__.<span class="hljs-property">d</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">exports</span>, name, getter</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!__webpack_require__.<span class="hljs-title function_">o</span>(<span class="hljs-built_in">exports</span>, name)) &#123;<br>      <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-built_in">exports</span>, name, &#123; <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">get</span>: getter &#125;);<br>    &#125;<br>  &#125;;<br>  __webpack_require__.<span class="hljs-property">r</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-built_in">exports</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Symbol</span> !== <span class="hljs-string">&quot;undefined&quot;</span> &amp;&amp; <span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toStringTag</span>) &#123;<br>      <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-built_in">exports</span>, <span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toStringTag</span>, &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;Module&quot;</span> &#125;);<br>    &#125;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-built_in">exports</span>, <span class="hljs-string">&quot;__esModule&quot;</span>, &#123; <span class="hljs-attr">value</span>: <span class="hljs-literal">true</span> &#125;);<br>  &#125;;<br>  <span class="hljs-comment">// 获取默认导出(es取default, commonjs直接取对象)</span><br>  __webpack_require__.<span class="hljs-property">n</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">module</span></span>) &#123;<br>    <span class="hljs-comment">// 注意这里的module不是__webpack_require__中的的module,是module.exports,</span><br>    <span class="hljs-keyword">var</span> getter =<br>      <span class="hljs-variable language_">module</span> &amp;&amp; <span class="hljs-variable language_">module</span>.<span class="hljs-property">__esModule</span> <span class="hljs-comment">// es模块</span><br>        ? <span class="hljs-keyword">function</span> <span class="hljs-title function_">getDefault</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">module</span>[<span class="hljs-string">&quot;default&quot;</span>];<br>          &#125;<br>        : <span class="hljs-keyword">function</span> <span class="hljs-title function_">getModuleExports</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-comment">// commonjs模块</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">module</span>;<br>          &#125;;<br>    <span class="hljs-comment">//   定义a属性,值是上面的兼容性导出(为什么是a?不是b? 这里是webpack为了代码少, 就定义了一个字母, 也可以改成b没任何区别)</span><br>    __webpack_require__.<span class="hljs-title function_">d</span>(getter, <span class="hljs-string">&quot;a&quot;</span>, getter);<br>    <span class="hljs-keyword">return</span> getter;<br>  &#125;;<br><br>  __webpack_require__.<span class="hljs-property">o</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">object, property</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(object, property);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">__webpack_require__</span>(<span class="hljs-string">&quot;./src/index.js&quot;</span>);<br>&#125;)(&#123;<br>  <span class="hljs-string">&quot;./src/index.js&quot;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span><br><span class="hljs-params">    <span class="hljs-variable language_">module</span>,</span><br><span class="hljs-params">    __webpack_exports__,</span><br><span class="hljs-params">    __webpack_require__</span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-string">&quot;use strict&quot;</span>;<br>    __webpack_require__.<span class="hljs-title function_">r</span>(__webpack_exports__);<br>    <span class="hljs-keyword">var</span> _title__WEBPACK_IMPORTED_MODULE_0__ =<br>      <span class="hljs-title function_">__webpack_require__</span>(<span class="hljs-string">&quot;./src/title.js&quot;</span>);<br>    <span class="hljs-keyword">var</span> _title__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.<span class="hljs-title function_">n</span>(<br>      _title__WEBPACK_IMPORTED_MODULE_0__<br>    );<br>    <span class="hljs-comment">// es加载common</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>      _title__WEBPACK_IMPORTED_MODULE_0___default.<span class="hljs-property">a</span>,<br>      _title__WEBPACK_IMPORTED_MODULE_0__[<span class="hljs-string">&quot;age&quot;</span>],<br>      _title__WEBPACK_IMPORTED_MODULE_0__[<span class="hljs-string">&quot;age1&quot;</span>]<br>    );<br>  &#125;,<br><br>  <span class="hljs-string">&quot;./src/title.js&quot;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">module</span>, <span class="hljs-built_in">exports</span></span>) &#123;<br>    <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;title&quot;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-string">&quot;age&quot;</span>,<br>      <span class="hljs-attr">age1</span>: <span class="hljs-string">&quot;age1&quot;</span>,<br>    &#125;;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>我们梳理下上面逻辑:</p><ul><li>因为入口依赖commonjs, commonjs就是一个对象, 通过<code>.o </code>方法传入该对象, 做兼容处理(es取default, commonjs直接取对象)</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>webpack无论什么模块都会转换为commonjs模块</li><li>commonjs不处理,原样输出. es模块编译成commonjs就是变成一个对象(里面有default、命名导出的属性、__esModule )以及模块类型 <code>[object Module]</code></li><li>无论原先使用require还是import引入,都会变成 <code>__webpack_require__(xxx)</code>引入</li><li>先加载入口,再加载依赖</li></ul>]]></content>
      
      
      <categories>
          
          <category> webpack4 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>监控原理</title>
      <link href="/ypf-blog/2024/10/12/monitor/%E7%9B%91%E6%8E%A7%E5%8E%9F%E7%90%86/"/>
      <url>/ypf-blog/2024/10/12/monitor/%E7%9B%91%E6%8E%A7%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建上报框架"><a href="#搭建上报框架" class="headerlink" title="搭建上报框架"></a>搭建上报框架</h1><p>我们定义一个基本上报框架结构:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// https://www.npmjs.com/package/user-agent</span><br><span class="hljs-keyword">const</span> userAgent = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;user-agent&quot;</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getExtraData</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">userAgent</span>: userAgent.<span class="hljs-title function_">parse</span>(navigator.<span class="hljs-property">userAgent</span>), <span class="hljs-comment">// 浏览器信息</span><br>    <span class="hljs-attr">url</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>, <span class="hljs-comment">// 当前页面url</span><br>    <span class="hljs-attr">title</span>: <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span>, <span class="hljs-comment">// 页面标题</span><br>    <span class="hljs-attr">timestamp</span>: <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>(), <span class="hljs-comment">// 时间戳</span><br>  &#125;;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SendTracker</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">url</span> = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 上报接口地址</span><br>  &#125;<br>  <span class="hljs-title function_">send</span>(<span class="hljs-params">log = &#123;&#125;</span>) &#123;<br>    <span class="hljs-keyword">const</span> data = &#123;<br>      ...<span class="hljs-title function_">getExtraData</span>(),<br>      ...log,<br>    &#125;;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data, <span class="hljs-string">&quot;上报&quot;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">sendImg</span>(data)<br>  &#125;<br>  <span class="hljs-title function_">sendImg</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-keyword">const</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>    img.<span class="hljs-property">src</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">url</span> + <span class="hljs-string">&quot;?d=&quot;</span> + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data);<br>    img.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// console.log(&quot;img onload&quot;);</span><br>    &#125;;<br>    img.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;img onerror&quot;</span>);<br>    &#125;;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendTracker</span>();<br></code></pre></td></tr></table></figure><h1 id="监控错误"><a href="#监控错误" class="headerlink" title="监控错误"></a>监控错误</h1><h2 id="js执行错误-资源加载错误"><a href="#js执行错误-资源加载错误" class="headerlink" title="js执行错误+资源加载错误"></a>js执行错误+资源加载错误</h2><h3 id="举个🌰"><a href="#举个🌰" class="headerlink" title="举个🌰:"></a>举个🌰:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;showError(&#x27;js&#x27;)&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span>js<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> // js执行错误<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/a.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  // 资源加载错误 <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">showError</span>(<span class="hljs-params">type</span>) &#123;</span><br><span class="language-javascript">  <span class="hljs-variable language_">window</span>.<span class="hljs-property">test</span>.<span class="hljs-property">a</span> = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">  <span class="hljs-comment">// 或者主动抛出错误</span></span><br><span class="language-javascript">  <span class="hljs-comment">// throw new Error(&#x27;js error&#x27;)</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js执行错误<br><img src="images/2.jpg" width="100%"/><br>资源加载错误<br><img src="images/3.jpg" width="100%"/></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 监听全局未捕获的错误</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">let</span> lastEvent = <span class="hljs-title function_">getLastEvent</span>(); <span class="hljs-comment">// 最后一个交互事件</span><br>  <span class="hljs-keyword">let</span> errorType=<span class="hljs-string">&#x27;jsError&#x27;</span><br>  <span class="hljs-keyword">if</span>(e.<span class="hljs-property">target</span> &amp;&amp; (e.<span class="hljs-property">target</span>.<span class="hljs-property">src</span> || e.<span class="hljs-property">target</span>.<span class="hljs-property">href</span>))&#123; <span class="hljs-comment">// 说明是资源加载错误</span><br>    lastEvent=e<br>    errorType=<span class="hljs-string">&#x27;resourceError&#x27;</span><br>  &#125; <br>  <span class="hljs-keyword">let</span> log = &#123;<br>    <span class="hljs-attr">kind</span>: <span class="hljs-string">&quot;stability&quot;</span>, <span class="hljs-comment">// 监控指标大类</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-comment">// 监控指标小类</span><br>    errorType, <span class="hljs-comment">// 错误类型-全局未捕获的错误</span><br>    <span class="hljs-attr">message</span>: e.<span class="hljs-property">message</span>, <span class="hljs-comment">// 报错信息</span><br>    <span class="hljs-attr">filename</span>: e.<span class="hljs-property">filename</span>, <span class="hljs-comment">// 错误文件</span><br>    <span class="hljs-attr">position</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;e.lineno&#125;</span>:<span class="hljs-subst">$&#123;e.colno&#125;</span>`</span>, <span class="hljs-comment">// 错误行列</span><br>    <span class="hljs-comment">// 处理前: &quot;TypeError: Cannot set properties of undefined (setting &#x27;a&#x27;)\n    at showError (http://localhost:9000/:15:30)\n    at HTMLButtonElement.onclick (http://localhost:9000/:9:39)&quot;</span><br>    <span class="hljs-attr">stack</span>: e.<span class="hljs-property">error</span>&amp;&amp;e.<span class="hljs-property">error</span>.<span class="hljs-property">stack</span>?<span class="hljs-title function_">formatStack</span>(e.<span class="hljs-property">error</span>.<span class="hljs-property">stack</span>):<span class="hljs-literal">null</span>, <span class="hljs-comment">// 错误堆栈</span><br>    <span class="hljs-attr">selector</span>: lastEvent ? <span class="hljs-title function_">getSelector</span>(lastEvent) : <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">//  最后一个交互事件对应的元素</span><br>  &#125;;<br>  tracker.<span class="hljs-title function_">send</span>(log)<br>&#125;,<span class="hljs-literal">true</span>); <span class="hljs-comment">// true代表在捕获阶段调用,false代表在冒泡阶段捕获,使用true或false都可以</span><br></code></pre></td></tr></table></figure><p>主要核心点:</p><ul><li>格式化堆栈信息,<strong>formatStack</strong></li><li>获取用户操作哪个dom节点报的错,<strong>getSelector(lastEvent)</strong></li></ul><h3 id="formatStack"><a href="#formatStack" class="headerlink" title="formatStack"></a>formatStack</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 格式化堆栈信息</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">formatStack</span>(<span class="hljs-params">stack</span>) &#123;<br>  <span class="hljs-keyword">return</span> stack<br>    .<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br>    .<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 删除message,已经有e.message属性了</span><br>    .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\s+at\s+/g</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    .<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;^&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="lastEvent"><a href="#lastEvent" class="headerlink" title="lastEvent"></a>lastEvent</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> lastEvent;<br>[<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-string">&quot;touchstart&quot;</span>, <span class="hljs-string">&quot;keydown&quot;</span>, <span class="hljs-string">&quot;mousedown&quot;</span>, <span class="hljs-string">&quot;mouseover&quot;</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span><br><span class="hljs-params">  eventType</span><br><span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<br>    eventType,<br>    <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>      lastEvent = e;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">capture</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//捕获阶段获取</span><br>      <span class="hljs-attr">passive</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//true: 不阻止默认事件</span><br>      <span class="hljs-comment">//   once: false, //事件是否只执行一次</span><br>    &#125;<br>  );<br>&#125;);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> lastEvent;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要原理就是监听常见用户操作,获取event</p><h3 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// https://segmentfault.com/a/1190000043414306</span><br><span class="hljs-comment">// 获取真实dom数组</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">composedPath</span> = (<span class="hljs-params">e</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 当前有直接return</span><br>  <span class="hljs-keyword">let</span> pathArr = e.<span class="hljs-property">path</span> || (e.<span class="hljs-property">composedPath</span> &amp;&amp; e.<span class="hljs-title function_">composedPath</span>()); <span class="hljs-comment">// 优先判断 Event.composedPath() 方法是否为空数组</span><br>  <span class="hljs-keyword">if</span> ((pathArr || []).<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-keyword">return</span> pathArr;<br>  &#125;<br>  <span class="hljs-comment">// 不存在则遍历target节点</span><br>  <span class="hljs-keyword">let</span> target = e.<span class="hljs-property">target</span>;<br>  e.<span class="hljs-property">path</span> = [];<br>  <span class="hljs-keyword">while</span> (target.<span class="hljs-property">parentNode</span> !== <span class="hljs-literal">null</span>) &#123;<br>    e.<span class="hljs-property">path</span>.<span class="hljs-title function_">push</span>(target);<br>    target = target.<span class="hljs-property">parentNode</span>;<br>  &#125;<br>  <span class="hljs-comment">// 最后在add进去 document 与 window对象</span><br>  e.<span class="hljs-property">path</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">document</span>, <span class="hljs-variable language_">window</span>);<br>  <span class="hljs-keyword">return</span> e.<span class="hljs-property">path</span>;<br>&#125;;<br><span class="hljs-comment">// 格式化成字符串</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getSelector</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-keyword">const</span> path = <span class="hljs-title function_">composedPath</span>(event);<br>  <span class="hljs-keyword">return</span> path<br>    .<span class="hljs-title function_">reverse</span>()<br>    .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">el</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> el !== <span class="hljs-variable language_">document</span> &amp;&amp; el !== <span class="hljs-variable language_">window</span>; <span class="hljs-comment">// 去除document 和 window</span><br>    &#125;)<br>    .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">el</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">let</span> selector = <span class="hljs-string">&quot;&quot;</span>;<br>      <span class="hljs-keyword">if</span> (el.<span class="hljs-property">id</span>) &#123;<br>        selector = <span class="hljs-string">`#<span class="hljs-subst">$&#123;el.id&#125;</span>`</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (el.<span class="hljs-property">className</span>) &#123;<br>        selector = el.<span class="hljs-property">className</span><br>          .<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>)<br>          .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> <span class="hljs-string">`.<span class="hljs-subst">$&#123;c&#125;</span>`</span>)<br>          .<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        selector = el.<span class="hljs-property">nodeName</span>.<span class="hljs-title function_">toLowerCase</span>();<br>      &#125;<br>      <span class="hljs-keyword">return</span> selector;<br>    &#125;)<br>    .<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>e.path谷歌已经移除, e.composedPath()有的浏览器没有该属性,不是标准方法</li><li>我们通过e.target一层层网上找parentNode存数组里面</li><li>最后将el数组通过<code>getSelector</code>格式化成字符串</li></ul><p>e.composedPath()以及自己实现composedPath函数的打印结果如下图:<br><img src="images/1.jpg" width="50%"/></p><h2 id="promise错误"><a href="#promise错误" class="headerlink" title="promise错误"></a>promise错误</h2><h3 id="举个🌰-1"><a href="#举个🌰-1" class="headerlink" title="举个🌰:"></a>举个🌰:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;showError(&#x27;promise&#x27;)&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;promise a&quot;</span>&gt;</span>promise<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">showError</span>(<span class="hljs-params">type</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">         <span class="hljs-variable language_">window</span>.<span class="hljs-property">test</span>.<span class="hljs-property">a</span> = <span class="hljs-number">1</span>;</span><br><span class="language-javascript">          <span class="hljs-comment">// 或者主动抛出错误</span></span><br><span class="language-javascript">          <span class="hljs-comment">// reject(&quot;error&quot;); </span></span><br><span class="language-javascript">          <span class="hljs-comment">// reject(&#123;</span></span><br><span class="language-javascript">          <span class="hljs-comment">//     a:1</span></span><br><span class="language-javascript">          <span class="hljs-comment">// &#125;) // 注意, reject对象,e.message是undefined,其他信息都有, 所以reject最后抛出字符串</span></span><br><span class="language-javascript">      &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">      <span class="hljs-comment">// 注意,如果加上catch,上面不会被捕获,因为已经catch了</span></span><br><span class="language-javascript">      <span class="hljs-comment">// .catch(()=&gt;&#123;&#125;)</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="images/4.jpg" width="100%"/><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 监听promise错误(如果有catch不会触发下面函数, 没有catch才会触发)</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;unhandledrejection&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">let</span> lastEvent = <span class="hljs-title function_">getLastEvent</span>(); <span class="hljs-comment">// 最后一个交互事件</span><br>  <span class="hljs-keyword">let</span> message;<br>  <span class="hljs-keyword">let</span> lineno;<br>  <span class="hljs-keyword">let</span> colno;<br>  <span class="hljs-keyword">let</span> filename;<br>  <span class="hljs-keyword">let</span> stack;<br>  <span class="hljs-keyword">const</span> reason = e.<span class="hljs-property">reason</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> reason === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    message = reason;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> reason === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>    message = reason.<span class="hljs-property">message</span>;<br>    <span class="hljs-comment">// &quot;TypeError: Cannot set properties of undefined (setting &#x27;a&#x27;)\n    at http://localhost:9000/:18:34\n    at new Promise (&lt;anonymous&gt;)\n    at showError (http://localhost:9000/:17:18)\n    at HTMLButtonElement.onclick (http://localhost:9000/:10:44)&quot;</span><br>    <span class="hljs-keyword">if</span> (reason.<span class="hljs-property">stack</span>) &#123;<br>      <span class="hljs-keyword">const</span> matchResult= reason.<span class="hljs-property">stack</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/at\s+(.+):(\d+):(\d+)/</span>);<br>      filename = matchResult[<span class="hljs-number">1</span>];<br>      lineno = matchResult[<span class="hljs-number">2</span>];<br>      colno = matchResult[<span class="hljs-number">3</span>];<br>      stack = <span class="hljs-title function_">formatStack</span>(reason.<span class="hljs-property">stack</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">const</span> log=&#123;<br>    <span class="hljs-attr">kind</span>: <span class="hljs-string">&quot;stability&quot;</span>, <span class="hljs-comment">// 监控指标大类</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-comment">// 监控指标小类</span><br>    <span class="hljs-attr">errorType</span>: <span class="hljs-string">&quot;promiseError&quot;</span>, <span class="hljs-comment">// 错误类型-全局未捕获的错误</span><br>    message, <span class="hljs-comment">// 报错信息</span><br>    filename, <span class="hljs-comment">// 错误文件</span><br>    <span class="hljs-attr">position</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;lineno&#125;</span>:<span class="hljs-subst">$&#123;colno&#125;</span>`</span>, <span class="hljs-comment">// 错误行列</span><br>    <span class="hljs-comment">// &quot;TypeError: Cannot set properties of undefined (setting &#x27;a&#x27;)\n    at showError (http://localhost:9000/:15:30)\n    at HTMLButtonElement.onclick (http://localhost:9000/:9:39)&quot;</span><br>    stack, <span class="hljs-comment">// 错误堆栈</span><br>    <span class="hljs-attr">selector</span>: lastEvent ? <span class="hljs-title function_">getSelector</span>(lastEvent) : <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">//  最后一个交互事件对应的元素</span><br>  &#125;<br>  tracker.<span class="hljs-title function_">send</span>(log)<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>只要加catch就不会触发unhandledrejection</li><li>reject最好传字符串, 传其他e.meesage是undefined</li></ul><h2 id="XHR请求"><a href="#XHR请求" class="headerlink" title="XHR请求"></a>XHR请求</h2><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">injectXhr</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-title class_">XMLHttpRequest</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>;<br>  <span class="hljs-keyword">let</span> oldOpen = <span class="hljs-title class_">XMLHttpRequest</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">open</span>;<br>  <span class="hljs-title class_">XMLHttpRequest</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">open</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">method, url, <span class="hljs-keyword">async</span></span>) &#123;<br>    <span class="hljs-comment">// 过滤掉上报日志的接口, 要不就死循环了</span><br>    <span class="hljs-keyword">if</span> (!url.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/dig.gif/</span>)) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">logData</span> = &#123;<br>        method,<br>        url,<br>        <span class="hljs-keyword">async</span>,<br>      &#125;;<br>    &#125;<br>    <span class="hljs-keyword">return</span> oldOpen.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>  &#125;;<br>  <span class="hljs-keyword">let</span> oldSend = <span class="hljs-title class_">XMLHttpRequest</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">send</span>;<br>  <span class="hljs-title class_">XMLHttpRequest</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">send</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">body</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">logData</span>) &#123;<br>      <span class="hljs-keyword">let</span> startTime = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>(); <span class="hljs-comment">// 开始请求时间</span><br>      <span class="hljs-keyword">const</span> <span class="hljs-title function_">handler</span> = (<span class="hljs-params">type</span>) =&gt; &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">let</span> duration = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - startTime; <span class="hljs-comment">// 请求耗时</span><br>          <span class="hljs-keyword">let</span> status = <span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span>; <span class="hljs-comment">// 状态码 如 200 404 500</span><br>          <span class="hljs-keyword">let</span> statusText = <span class="hljs-variable language_">this</span>.<span class="hljs-property">statusText</span>; <span class="hljs-comment">// 状态码对应的文本 如 &quot;OK&quot; &quot;Not Found&quot; &quot;Internal Server Error&quot;</span><br>          <span class="hljs-keyword">const</span> log = &#123;<br>            <span class="hljs-attr">kind</span>: <span class="hljs-string">&quot;stability&quot;</span>, <span class="hljs-comment">// 监控指标大类</span><br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;xhr&quot;</span>, <span class="hljs-comment">// 小类</span><br>            <span class="hljs-attr">xhrType</span>: type, <span class="hljs-comment">// 请求类型 如 load error abort</span><br>            <span class="hljs-attr">apiUrl</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">logData</span>.<span class="hljs-property">url</span>, <span class="hljs-comment">// 请求路径</span><br>            <span class="hljs-attr">status</span>: status + <span class="hljs-string">&quot;-&quot;</span> + statusText, <span class="hljs-comment">// 状态码 - 状态码文本</span><br>            duration, <span class="hljs-comment">// 请求耗时</span><br>            <span class="hljs-attr">reqData</span>: body || <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 请求参数</span><br>            <span class="hljs-attr">resData</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">response</span> ? <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">response</span>) : <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 响应数据</span><br>          &#125;;<br>          tracker.<span class="hljs-title function_">send</span>(log);<br>        &#125;;<br>      &#125;;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;load&quot;</span>, <span class="hljs-title function_">handler</span>(<span class="hljs-string">&quot;load&quot;</span>), <span class="hljs-literal">false</span>); <span class="hljs-comment">// 监听请求完成(包含成功、失败),比如失败500</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-title function_">handler</span>(<span class="hljs-string">&quot;error&quot;</span>), <span class="hljs-literal">false</span>); <span class="hljs-comment">// 监听请求失败</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;abort&quot;</span>, <span class="hljs-title function_">handler</span>(<span class="hljs-string">&quot;abort&quot;</span>), <span class="hljs-literal">false</span>); <span class="hljs-comment">// 监听请求中断</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> oldSend.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>重写xhr的open、send方法, 复制旧的, XMLHttpRequest.prototype.open=自己的, 里面加逻辑后,调用旧的执行,通过apply传入所有参数</li><li>监听load、error、abort事件计算请求耗时</li><li>请求耗时计算: 在send中记录开始时间, 在请求结束(上面3个事件)用当时时间-开始时间即可.</li></ul><p><strong>fetch拦截类似,也是重写fetch方法</strong></p><h2 id="白屏"><a href="#白屏" class="headerlink" title="白屏"></a>白屏</h2><p>所谓白屏,就是页面啥都没有,相当于只有body(注意:骨架屏不算白屏, 算有内容)</p><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// https://developer.mozilla.org/zh-CN/docs/Web/API/Document/elementsFromPoint</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">blankScreen</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> wrapperElArr = [<span class="hljs-string">&quot;html&quot;</span>, <span class="hljs-string">&quot;body&quot;</span>, <span class="hljs-string">&quot;#app&quot;</span>]; <span class="hljs-comment">// 容器元素</span><br>  <span class="hljs-keyword">let</span> emptyPoint = <span class="hljs-number">0</span>; <span class="hljs-comment">// 空白点个数</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getSelector</span>(<span class="hljs-params">el</span>) &#123;<br>    <span class="hljs-keyword">let</span> selector = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span> (el.<span class="hljs-property">id</span>) &#123;<br>      selector = <span class="hljs-string">`#<span class="hljs-subst">$&#123;el.id&#125;</span>`</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (el.<span class="hljs-property">className</span>) &#123;<br>      selector = el.<span class="hljs-property">className</span><br>        .<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>)<br>        .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> <span class="hljs-string">`.<span class="hljs-subst">$&#123;c&#125;</span>`</span>)<br>        .<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      selector = el.<span class="hljs-property">nodeName</span>.<span class="hljs-title function_">toLowerCase</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> selector;<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">isWrapper</span>(<span class="hljs-params">el</span>) &#123;<br>    <span class="hljs-keyword">let</span> selecter = <span class="hljs-title function_">getSelector</span>(el);<br>    <span class="hljs-keyword">if</span> (wrapperElArr.<span class="hljs-title function_">indexOf</span>(selecter) &gt; -<span class="hljs-number">1</span>) &#123;<br>      emptyPoint++;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 执行blankScreen问题, 因为js放到head执行,dom肯定没有,所以需要onload执行</span><br>  <span class="hljs-title function_">onload</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; total; i++) &#123;<br>      <span class="hljs-keyword">const</span> total=<span class="hljs-number">20</span> <span class="hljs-comment">// 每条轴采样点个数</span><br>      <span class="hljs-keyword">const</span> xElements = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">elementsFromPoint</span>(<br>        (<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> / total) * i,<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span> / <span class="hljs-number">2</span><br>      );<br>      <span class="hljs-keyword">const</span> yElements = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">elementsFromPoint</span>(<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> / <span class="hljs-number">2</span>,<br>        (<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span> / total) * i<br>      );<br>      <span class="hljs-comment">//   左45度 (因为只有x、y)有时候不是白屏,仍会当成白屏. 比如就屏幕前1/3高度有元素, x检测不到, y轴的9个点都刚好在行内元素行上,就当成body了</span><br>      <span class="hljs-keyword">const</span> xElements45 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">elementsFromPoint</span>(<br>        (<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> / total) * i,<br>        (<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span> / total) * i<br>      );<br>      <span class="hljs-title function_">isWrapper</span>(xElements[<span class="hljs-number">0</span>]);<br>      <span class="hljs-title function_">isWrapper</span>(yElements[<span class="hljs-number">0</span>]);<br>      <span class="hljs-title function_">isWrapper</span>(xElements45[<span class="hljs-number">0</span>]);<br>    &#125;<br>   <span class="hljs-keyword">if</span> (emptyPoint &gt;= (total-<span class="hljs-number">1</span>)*<span class="hljs-number">3</span>) &#123; <span class="hljs-comment">// 所以上面3条轴,采样点总共57个点</span><br>      <span class="hljs-keyword">let</span> centerEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">elementsFromPoint</span>(<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> / <span class="hljs-number">2</span>,<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span> / <span class="hljs-number">2</span><br>      );<br>      tracker.<span class="hljs-title function_">send</span>(&#123;<br>        <span class="hljs-attr">kind</span>: <span class="hljs-string">&quot;stability&quot;</span>, <span class="hljs-comment">// 监控指标大类</span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;blank&quot;</span>, <span class="hljs-comment">// 小类</span><br>        emptyPoint, <span class="hljs-comment">// 空白点个数</span><br>        <span class="hljs-attr">screen</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>.<span class="hljs-property">width</span> + <span class="hljs-string">&quot;*&quot;</span> + <span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>.<span class="hljs-property">height</span>,<br>        <span class="hljs-attr">viewpoint</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> + <span class="hljs-string">&quot;*&quot;</span> + <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>,<br>        <span class="hljs-attr">selector</span>: <span class="hljs-title function_">getSelector</span>(centerEl[<span class="hljs-number">0</span>]), <span class="hljs-comment">// 中心点</span><br>      &#125;);<br>    &#125;<br>  &#125;);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">onload</span>(<span class="hljs-params">callback</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">readyState</span> === <span class="hljs-string">&quot;complete&quot;</span>) &#123;<br>    <span class="hljs-title function_">callback</span>();<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;load&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">callback</span>();<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>document.elementsFromPoint(x,y)</code>用来获取执行位置的元素</li><li>我们通过取样屏幕中心x、y轴,各取9个点,判断这18个点,如果是容器元素,说明是白屏.</li><li>因为js放到head执行,获取dom采样点肯定没有,所以需要onload执行</li><li>上面采样用的横竖2条中心轴,但是存在(比如就屏幕前1/3高度有元素是行内元素, x检测不到, y轴检测不到,就当成body了),所以上面加了个左45度</li><li> 白屏的指标也统计了屏幕分辨率<code>window.screen.width + &quot;*&quot; + window.screen.height</code></li><li> 白屏的指标也统计了文档即视口分辨率 <code>window.innerWidth + &quot;*&quot; + window.innerHeight</code></li></ul><p>我们把html的dom注释掉看看效果<br><img src="images/5.jpg" width="100%"/></p><h1 id="监控性能指标-耗时"><a href="#监控性能指标-耗时" class="headerlink" title="监控性能指标(耗时)"></a>监控性能指标(耗时)</h1><p>做性能分析，不管是在本地，还是通过工具，最重要的是要有数据支撑。目前，w3c 对性能相关数据,已经有了详尽的分类标准. 下图就来自于 <a href="https://www.w3.org/TR/navigation-timing/">w3c</a><br><img src="images/performance-0.png" width="100%"/><br>这个加载过程模型，是<a href="https://www.w3.org/webperf/">web 性能工作组</a> 早在 2012 年就针对页面加载过程制定的，定义了从上一个页面结束，到下一个页面从开始加载到完成加载的整个过程。基于这个模型，我们可以获取到页面加载过程中各个阶段的耗时情况，然后分析出页面加载性能。</p><h2 id="加载阶段描述"><a href="#加载阶段描述" class="headerlink" title="加载阶段描述"></a>加载阶段描述</h2><h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>navigationStart</td><td>用户完成卸载前一个文档的时间点。</td></tr><tr><td>redirectStart</td><td>重定向开始时间。如果页面没有重定向，该值为0。</td></tr><tr><td>redirectEnd</td><td>重定向结束时间(表示<strong>最后一次</strong>重定向)。如果页面没有重定向，该值为0。</td></tr></tbody></table><h3 id="请求阶段"><a href="#请求阶段" class="headerlink" title="请求阶段"></a>请求阶段</h3><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>fetchStart</td><td>浏览器开始请求页面的时刻。</td></tr><tr><td>domainLookupStart</td><td>查询DNS的开始时刻。如果请求没有发起DNS请求，如keep-alive、缓存等，则返回fetchStart的时间点。</td></tr><tr><td>domainLookupEnd</td><td>查询DNS的结束时刻。如果没有发起DNS请求，如keep-alive、缓存等，则返回fetchStart的时间点。</td></tr><tr><td>connectStart</td><td>当浏览器开始与服务器连接时的时刻。如果没有建立连接，如请求是keep-alive、缓存等，那么它的值等同于domainLookupEnd。</td></tr><tr><td>secureConnectionStart</td><td>如果页面使用HTTPS，它的值是安全连接握手之前的时刻。如果该属性不可用，则返回undefined。如果该属性可用，但没有使用HTTPS，则返回0。</td></tr><tr><td>connectEnd</td><td>当浏览器端完成与服务器端建立连接的时刻。如果没有建立连接，如请求是keep-alive、缓存等，那么它的值等同于domainLookupEnd。</td></tr><tr><td>requestStart</td><td>浏览器开始向服务器发送 HTTP 请求数据包时刻。</td></tr><tr><td>responseStart</td><td>指浏览器收到从服务器（或缓存、本地资源）响应回的第一个字节的数据的时刻。</td></tr><tr><td>responseEnd</td><td>指浏览器收到从服务器端（或缓存、本地资源）响应回的最后一个字节的数据的时刻。</td></tr></tbody></table><h3 id="解析渲染阶段"><a href="#解析渲染阶段" class="headerlink" title="解析渲染阶段"></a>解析渲染阶段</h3><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>domLoading</td><td>浏览器即将开始解析第一批收到的 HTML 文档字节(即 Document.readyState 属性变为 loading，相应的 readystatechange 事件触发时)。</td></tr><tr><td>domInteractive</td><td>浏览器完成DOM解析的时间点,准备开始加载内嵌资源(比如外链css、js等)的时间点。(即 Document.readyState 的属性为 interactive，相应的 readystatechange 事件触发时.时间上和 DOMContentLoaded 同时发生，不过顺序在它之前.)</td></tr><tr><td>domContentLoaded</td><td>在 html 文档加载完毕，并且 html 所引用的内联 js、以及外链 js 的同步代码都执行完毕后触发，也就是jQuery中的 $(document).ready事件. 但图片、video、audio、flash、iframe资源尚未加载</td></tr><tr><td>domComplete</td><td>所有处理完成，并且网页上的所有资源（图像等）都已下载完毕，也就是说，加载转环已停止旋转, 表示网页及其所有子资源都准备就绪的时间点。即 Document.readyState 变为 complete 且相应的 readystatechange 事件被触发时</td></tr><tr><td>loadEventStart</td><td>作为每个网页加载的最后一步，浏览器会触发 onload 事件，以便触发额外的应用逻辑。</td></tr><tr><td>loadEventEnd</td><td>onload 事件 执行完成。 许多 JavaScript 框架都会等待onload事件发生后，才开始执行它们自己的逻辑。因此，浏览器会捕获 loadEventStart 和 loadEventEnd 时间戳来追踪执行所花费的时间。</td></tr></tbody></table><h4 id="document-readyState"><a href="#document-readyState" class="headerlink" title="document.readyState"></a>document.readyState</h4><p>该属性描述了文档的加载状态，发生变化时，会在 document 对象上触发 readystatechange 事件。有3种状态：</p><ul><li>loading 正在加载</li><li>interactive 文档已被解析，loading 状态结束，但是诸如图像，样式表和框架之类的子资源仍在加载，会在 document 和 window 对象上触发 DOMContentLoaded 事件。</li><li>complete 所有资源完成加载，会在 window 对象上触发 load 事件。<h4 id="浏览器页面渲染过程"><a href="#浏览器页面渲染过程" class="headerlink" title="浏览器页面渲染过程"></a>浏览器页面渲染过程</h4></li></ul><ol><li>浏览器与服务器建立 TCP 连接发送 HTTP 请求，获取 HTML 文档并开始从上到下解析，构建 DOM。</li><li>在构建 DOM 过程中：</li></ol><ul><li><p>如果遇到外联的 css 文件，下载文件并执行构建 CSSOM，此过程不影响 DOM 构建，但在完成之前会阻止页面渲染。</p></li><li><p>如果遇到外联的 js 文件，则暂停构建 DOM，</p></li><li><p>若在这之前的 css 文件已加载完毕且 CSSOM 构建完成，则合并已经构建好的 DOM 与 CSSOM 并渲染到页面上</p></li><li><p>之后等 js 文件下载并执行后，然后继续构建后边的 DOM。</p></li></ul><ol start="3"><li>完成文档解析后，将 DOM 和 CSSOM 进行关联和映射，生成 Render Tree 渲染页面。</li><li>当所有同步的 js 代码执行完毕后，会在 document 和 window 对象上触发 DOMContentLoaded 事件，此时对应 document.readyState === ‘interactive’。</li><li>当所有资源完成加载后，会在 window 对象上触发 load 事件，此时对应 document.readyState === ‘complete’。</li></ol><h2 id="各阶段计算公式"><a href="#各阶段计算公式" class="headerlink" title="各阶段计算公式"></a>各阶段计算公式</h2><img src="images/performance-1.png" width="100%"/><p>经过上面各个字段的说明，可以清晰得出以下公式。</p><table><thead><tr><th>事件</th><th>计算公式</th><th>描述</th></tr></thead><tbody><tr><td>Redirect</td><td>redirectEnd - redirectStart</td><td>重定向耗时</td></tr><tr><td>AppCache</td><td>domainLookupStart - fetchStart</td><td>浏览器缓存耗时(比如静态资源缓存)</td></tr><tr><td>DNS</td><td>domainLookupEnd - domainLookupStart</td><td>DNS解析耗时</td></tr><tr><td>TCP</td><td>connectEnd - connectStart</td><td>TCP连接耗时</td></tr><tr><td>SSL</td><td>connectEnd - secureConnectionStart</td><td>SSL耗时 (TCP包含SSL)</td></tr><tr><td><strong>TTFB</strong></td><td>responseStart - navigationStart</td><td>首字节到达时间(time to first byte,浏览器从服务器接收到第一个字节的时间,起点选择navigationStart 是为了和web-vitals规范保持一致,也可以用fetchStart)</td></tr><tr><td>Response</td><td>responseEnd - responseStart</td><td>响应完成耗时</td></tr><tr><td>DomParse</td><td>domInteractive - domLoading</td><td>Dom解析完成耗时(即 DOM 树构建完成的时长)</td></tr><tr><td>DomReady</td><td>domContentLoaded - domLoading</td><td>Dom挂载完成总耗时,即domContentLoaded</td></tr><tr><td>resourceLoad</td><td>loadEventStart - domContentLoaded</td><td>资源加载耗时,<strong>可观察资源流是否过大</strong></td></tr><tr><td>DomProcessing</td><td>domComplete - domLoading</td><td>整个dom进程的总耗时</td></tr><tr><td>onLoad</td><td>loadEventEnd - loadEventStart</td><td>onload 事件执行耗时</td></tr><tr><td>Load</td><td>loadEventEnd - navigationStart</td><td>页面完全加载总时间</td></tr></tbody></table><img src="images/performance-2.png" width="80%"/>通过下面代码可以计算上面指标<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> timing =<br>     (performance.<span class="hljs-property">getEntriesByType</span> &amp;&amp;<br>       performance.<span class="hljs-title function_">getEntriesByType</span>(<span class="hljs-string">&quot;navigation&quot;</span>)[<span class="hljs-number">0</span>]) ||<br>     performance.<span class="hljs-property">timing</span>; <span class="hljs-comment">// 官方显示performance.timing属性已经弃用，但是实测最新浏览器仍支持</span><br></code></pre></td></tr></table></figure><h2 id="用户体验指标-耗时"><a href="#用户体验指标-耗时" class="headerlink" title="用户体验指标(耗时)"></a>用户体验指标(耗时)</h2><h3 id="页面何时开始渲染-FP"><a href="#页面何时开始渲染-FP" class="headerlink" title="页面何时开始渲染(FP)"></a>页面何时开始渲染(FP)</h3><ul><li>FP, first paint, 表示页面第一个像素点绘制时刻,一般认为该指标是白屏时间. 比如body背景色. FCP是有第一个dom渲染.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">performance.<span class="hljs-title function_">getEntries</span>().<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">name</span> === <span class="hljs-string">&#x27;first-paint&#x27;</span>)[<span class="hljs-number">0</span>];  <span class="hljs-comment">// 获取 FP 时间</span><br><span class="hljs-comment">// 也可以通过 performanceObserver 的方式获取</span><br><span class="hljs-keyword">var</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PerformanceObserver</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">list, obj</span>) &#123;<br>    <span class="hljs-keyword">var</span> entries = list.<span class="hljs-title function_">getEntries</span>();<br>    entries.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (item.<span class="hljs-property">name</span> === <span class="hljs-string">&#x27;first-paint&#x27;</span>) &#123;<br>            ...<br>        &#125;<br>        <span class="hljs-keyword">if</span> (item.<span class="hljs-property">name</span> === <span class="hljs-string">&#x27;first-contentful-paint&#x27;</span>) &#123;<br>            ...<br>        &#125;<br>    &#125;)<br>&#125;);<br>observer.<span class="hljs-title function_">observe</span>(&#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;paint&#x27;</span>&#125;);<br></code></pre></td></tr></table></figure><h3 id="页面何时渲染内容-FCP、LCP、FMP、SI"><a href="#页面何时渲染内容-FCP、LCP、FMP、SI" class="headerlink" title="页面何时渲染内容(FCP、LCP、FMP、SI)"></a>页面何时渲染内容(FCP、LCP、FMP、SI)</h3></li><li>FCP, first contentful paint, 首次内容绘制时间，表示第一个dom渲染到浏览器的时间,比如文本、图片、视频等。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">performance.<span class="hljs-title function_">getEntries</span>().<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-property">name</span> === <span class="hljs-string">&#x27;first-contentful-paint&#x27;</span>)[<span class="hljs-number">0</span>];  <span class="hljs-comment">// 获取 FCP 时间</span><br></code></pre></td></tr></table></figure></li><li>LCP, largest contentful paint, 最大内容绘制时间，表示浏览器将最大的内容渲染到屏幕的时间，和 FMP 类似，但只聚焦页面首次加载时最大元素的绘制时间点<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">PerformanceObserver</span>(<span class="hljs-function">(<span class="hljs-params">entryList</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> entry <span class="hljs-keyword">of</span> entryList.<span class="hljs-title function_">getEntries</span>()) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;LCP candidate:&#x27;</span>, entry.<span class="hljs-property">startTime</span>, entry);<br>    &#125;<br>&#125;).<span class="hljs-title function_">observe</span>(&#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;largest-contentful-paint&#x27;</span>, <span class="hljs-attr">buffered</span>: <span class="hljs-literal">true</span>&#125;);<br></code></pre></td></tr></table></figure></li><li>FMP, first meaningful paint, 首次有意义内容绘制时间. (已经<strong>废弃</strong>的性能指标,因为该指标的定义依赖于特定于浏览器的实现细节，这意味着它不能标准化,所以官方并没有提供有效的获取 FMP 的接口,无法计算)</li><li>SI, speed index, 速度指标, lighthouse 面板中的六大指标之一，用于衡量页面加载期间内容的绘制速度，值越小约好.SI 和 FMP 一样，官方也没有提供有效的获取接口，只能通过 lighthouse 面板来查看，不作为 Sentry 等工具做性能分析的指标。<h3 id="页面何时可以交互-TTI、TBT"><a href="#页面何时可以交互-TTI、TBT" class="headerlink" title="页面何时可以交互(TTI、TBT)"></a>页面何时可以交互(TTI、TBT)</h3></li><li>TTI, time to ineractive, 可交互时间， lighthouse 面板中的六大指标之一, 用于测量页面从开始加载到主要资源完成渲染，并能够快速、可靠地响应用户输入所需的时间, 值越小约好.<br>和 FMP、SI 一样，官方并没有提供获取 TTI 的有效接口，只能通过 lighthouse 面板来查看，不会作为日志平台来进行性能分析的指标。</li><li>TBT, total blocking time，总的阻塞时间， lighthouse 面板中的六大指标之一，用于测量 FCP 到 TTI 之间的总的阻塞时间，值越小约好。官方资料: <a href="https://web.dev/lighthouse-total-blocking-time/">TBT</a>。<br>和 TTI 一样，官方也没有提供获取 TBT 的有效接口，只能通过 lighthouse 面板来查看，不会作为 Sentry 做性能分析的指标。<h3 id="交互是否有延迟-FID"><a href="#交互是否有延迟-FID" class="headerlink" title="交互是否有延迟(FID)"></a>交互是否有延迟(FID)</h3></li><li>FID，first input delay, 首次输入延迟，测量从用户第一次与页面交互（例如当他们单击链接、点按按钮或使用由 JavaScript 驱动的自定义控件）直到浏览器对交互作出响应所经过的时间.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">PerformanceObserver</span>(<span class="hljs-function">(<span class="hljs-params">entryList</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> entry <span class="hljs-keyword">of</span> entryList.<span class="hljs-title function_">getEntries</span>()) &#123;<br>    <span class="hljs-keyword">const</span> delay = entry.<span class="hljs-property">processingStart</span> - entry.<span class="hljs-property">startTime</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;FID candidate:&#x27;</span>, delay, entry);<br>  &#125;<br>&#125;).<span class="hljs-title function_">observe</span>(&#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;first-input&#x27;</span>, <span class="hljs-attr">buffered</span>: <span class="hljs-literal">true</span>&#125;);<br></code></pre></td></tr></table></figure><h3 id="页面视觉是否流畅-CLS"><a href="#页面视觉是否流畅-CLS" class="headerlink" title="页面视觉是否流畅(CLS)"></a>页面视觉是否流畅(CLS)</h3></li><li>CLS, cumulative layout shift, 累计布局偏移(视觉不稳定/流畅性)，测量页面在加载过程中，元素位置在屏幕上的移动程度，值越大，页面视觉不流畅。<br>解释下:我们在浏览网页时可能会遇到这样的情况：当我们正聚精会神地阅读网页内容时，突然发现内容在没有任何预警的情况下被挤到了另一个位置。更糟糕的是，当您准备点击一个链接或按钮时，正巧在手指按下的瞬间，链接突然移位，导致您误点到其他内容。通常情况下，这样的网站会给用户带来极差的体验，甚至瞬间的位移错误交互可能造成一定程度的破坏。<br>通常，页面元素发生意外偏移的原因包括异步资源加载以及在 DOM 元素上方动态插入新的元素等。具体而言，这些偏移可能源于图片或视频元素尺寸未设置、不受控的第三方广告引入或者小组件自身大小的动态调整。<br>因此，我们需要一个指标来度量意外偏移对用户“视觉稳定性”产生的影响。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">PerformanceObserver</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">list</span>) &#123;<br>    <span class="hljs-keyword">var</span> perfEntries = list.<span class="hljs-title function_">getEntries</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; perfEntries.<span class="hljs-property">length</span>; i++) &#123;<br>        ...<br>    &#125;<br>&#125;)<span class="hljs-title function_">observe</span>(&#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;layout-shift&#x27;</span>, <span class="hljs-attr">buffered</span>: <span class="hljs-literal">true</span>&#125;);<br></code></pre></td></tr></table></figure>所以:</li><li>不要在现有内容之上插入内容，除非是为了响应用户交互。</li><li>多用 transform animations，而不是触发布局变化的animations properties。</li><li>在图片和视频元素中包含大小属性，或者用 CSS 长宽比框之类的东西保留所需的空间。<br>具体实现可以参考 <a href="https://wukongdoc.tingyun.com/browser/metric/CLS.html">https://wukongdoc.tingyun.com/browser/metric/CLS.html</a><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3></li><li>如果是本地通过 lighthouse 进行性能分析，会使用 6 大指标: FCP、LCP、SI、TTI、TBT、CLS。这些指标涵盖了页面渲染、交互和视觉稳定性情况。</li><li>如果是通过 Sentry 等工具进行性能分析，会使用 4 大指标: FCP、LCP、FID、CLS。这些指标也涵盖了页面渲染、交互、视觉稳定性情况。之所以选这四个指标，原因想必大家也知道，就是这四个指标的数据可以通过 performanceObserver 获取。</li></ul><h1 id="监控业务business"><a href="#监控业务business" class="headerlink" title="监控业务business"></a>监控业务business</h1><h2 id="pv、uv"><a href="#pv、uv" class="headerlink" title="pv、uv"></a>pv、uv</h2><ul><li>pv: 展示统计周期内页面访问量，即用户访问页面的总次数。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">pv</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> connection = navigator.<span class="hljs-property">connection</span>;<br>  tracker.<span class="hljs-title function_">send</span>(&#123;<br>    <span class="hljs-attr">kind</span>: <span class="hljs-string">&quot;business&quot;</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;pv&quot;</span>,<br>    <span class="hljs-attr">effectiveType</span>: connection.<span class="hljs-property">effectiveType</span>, <span class="hljs-comment">//网络环境</span><br>    <span class="hljs-attr">rtt</span>: connection.<span class="hljs-property">rtt</span>, <span class="hljs-comment">//往返时间</span><br>    <span class="hljs-attr">screen</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">window</span>.screen.width&#125;</span>x<span class="hljs-subst">$&#123;<span class="hljs-variable language_">window</span>.screen.height&#125;</span>`</span>, <span class="hljs-comment">//设备分辨率</span><br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>注意,如果是vue的hash变化,需要监听<code>window.addeventlistener(“hashchange”,()=&gt;()</code>事件,再次调用pv统计</strong><br>uv: 展示统计周期内指定页面用户访问次数。<br>一般通过服务器端来统计.如某一天,某个页面用户访问量(一般根据token来判断)</p><h2 id="页面停留时间"><a href="#页面停留时间" class="headerlink" title="页面停留时间"></a>页面停留时间</h2><ul><li><p>页面停留时间，即用户在页面停留的时间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">stay</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> startTime = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>  <span class="hljs-comment">// 在页面卸载时发送页面停留事件</span><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<br>    <span class="hljs-string">&quot;beforeunload&quot;</span>,<br>    <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// event.returnValue = &#x27;你确定要离开这个页面吗？&#x27;; // 设置returnValue属性以显示提示信息</span><br>      <span class="hljs-keyword">let</span> stayTime = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - startTime;<br>      tracker.<span class="hljs-title function_">send</span>(&#123;<br>        <span class="hljs-attr">kind</span>: <span class="hljs-string">&quot;business&quot;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;stayTime&quot;</span>,<br>        stayTime,<br>      &#125;);<br>    &#125;,<br>    <span class="hljs-literal">false</span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="长任务-页面卡顿"><a href="#长任务-页面卡顿" class="headerlink" title="长任务(页面卡顿)"></a>长任务(页面卡顿)</h2><p>如果一个任务在主线程上运行超过 50 毫秒，那么它就是 Long task。我们根据该指标可以观测某段js运行的时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 可以理解为异步执行</span><br><span class="hljs-comment"> * requestIdleCallback 是浏览器空闲时会自动执行内部函数</span><br><span class="hljs-comment"> * requestAnimationFrame 是浏览器必须执行的</span><br><span class="hljs-comment"> * 关于 requestIdleCallback 和  requestAnimationFrame 可以参考 https://www.cnblogs.com/cangqinglang/p/13877078.html</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">longTask</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">PerformanceObserver</span>(<span class="hljs-function">(<span class="hljs-params">list</span>) =&gt;</span> &#123;<br>    list.<span class="hljs-title function_">getEntries</span>().<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">entry</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (entry.<span class="hljs-property">duration</span> &gt; <span class="hljs-number">100</span>) &#123;<br>        <span class="hljs-keyword">let</span> lastEvent = <span class="hljs-title function_">getLastEvent</span>();<br>        <span class="hljs-title function_">requestIdleCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          tracker.<span class="hljs-title function_">send</span>(&#123;<br>            <span class="hljs-attr">kind</span>: <span class="hljs-string">&quot;experience&quot;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;longTask&quot;</span>,<br>            <span class="hljs-attr">eventType</span>: lastEvent.<span class="hljs-property">type</span>,<br>            <span class="hljs-attr">startTime</span>: <span class="hljs-title function_">formatTime</span>(entry.<span class="hljs-property">startTime</span>), <span class="hljs-comment">// 开始时间</span><br>            <span class="hljs-attr">duration</span>: <span class="hljs-title function_">formatTime</span>(entry.<span class="hljs-property">duration</span>), <span class="hljs-comment">// 持续时间</span><br>            <span class="hljs-attr">selector</span>: lastEvent<br>              ? <span class="hljs-title function_">getSelector</span>(lastEvent)<br>              : <span class="hljs-string">&quot;&quot;</span>,<br>          &#125;);<br>        &#125;);<br>      &#125;<br>    &#125;);<br>  &#125;).<span class="hljs-title function_">observe</span>(&#123; <span class="hljs-attr">entryTypes</span>: [<span class="hljs-string">&quot;longtask&quot;</span>] &#125;);<br></code></pre></td></tr></table></figure><h1 id="sourceMap"><a href="#sourceMap" class="headerlink" title="sourceMap"></a>sourceMap</h1><p>由于报错是<strong>压缩代码的行列</strong>,所以我们需要映射文件解析源代码.<br>一般来讲，线上产物中会把 SourceMap 去除，除了为了加速构建过程，更重要的是避免有开发经验的人直接在浏览器中「阅读源码」。现在需要sourceMap来定位到源代码:</p></li><li><p>webpack配置<code>source-map</code>, 打包后将sourceMap传到某个私有的地址（如 CDN 或 OSS）,此时日志平台可以获取私有地址上传的sourceMap做映射.但是谷歌控制台能否看到源码错误,有以下几种方案:</p><ul><li>不删除map文件, 不安全,谷歌控制台直接可以看到源码.</li><li>打包完使用<code>rimraf包</code>删除掉map文件.谷歌控制台不可以看到源码.因为sourceMappingURL指向的是和js同级路径,找不到了. 此时可以使用charles转发sourceMappingURL到私有云即可.</li><li>不删除map文件, 但打包的时候将<code>sourceMappingURL</code>改为上传的地址.服务端控制外部不能访问到sourcemap,内部才能访问. 这样连接内网,谷歌控制台才可以直接看到源代码,外网不可见.<img src="images/6.png" width="50%"/></li><li>不删除map文件,也不修改<code>sourceMappingURL</code>,服务端控制外部不能访问到map后缀文件,内部才能访问. 这样连接内网,谷歌控制台才可以直接看到源代码,外网不可见.</li></ul></li><li><p>webpack配置<code>hidden-source-map</code>, 因为没有<code>sourceMappingURL</code>，所以不用删除.谷歌控制台不可以看到源码.</p><ul><li>我们可以通过时间谷歌插件添加<code>Http Header：sourcemap</code>来实现. <a href="https://zhuanlan.zhihu.com/p/674981525">如何在线上使用 SourceMap</a></li><li>也可以在控制台一个一个添加sourcemap来看源代码, 但是不推荐, 因为每次都得手动添加.并且刷新一下就得重新添加.</li></ul></li></ul><h2 id="实现sourceMap转换源代码"><a href="#实现sourceMap转换源代码" class="headerlink" title="实现sourceMap转换源代码"></a>实现sourceMap转换源代码</h2><p>原理: 调用<code>source-map包</code>通过 map文件代码+压缩文件代码的报错<code>行、列转化为</code>源代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> sourceMap = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;source-map&quot;</span>);<br><span class="hljs-keyword">let</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getSource</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">sourcemap, line, column</span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> consumer = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> sourceMap.<span class="hljs-title class_">SourceMapConsumer</span>(<br>      <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(sourcemap)<br>    );<br>    <span class="hljs-keyword">const</span> originalInfo = consumer.<span class="hljs-title function_">originalPositionFor</span>(&#123; line, column &#125;); <span class="hljs-comment">// 获取源代码信息(注意行列需要为number类型, 字符串类型会报错)</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(originalInfo);<br>    <span class="hljs-keyword">const</span> originFileContent = consumer.<span class="hljs-title function_">sourceContentFor</span>(originalInfo.<span class="hljs-property">source</span>); <span class="hljs-comment">// 获取源代码整个文件内容</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      originFileContent,<br>      <span class="hljs-attr">line</span>: originalInfo.<span class="hljs-property">line</span>,<br>      <span class="hljs-attr">column</span>: originalInfo.<span class="hljs-property">column</span>,<br>      <span class="hljs-attr">originFileName</span>: originalInfo.<span class="hljs-property">source</span>,<br>    &#125;;<br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>    <span class="hljs-comment">// ElMessage.error(&quot;sourcemap解析失败&quot;);</span><br>  &#125;<br>&#125;;<br><span class="hljs-keyword">const</span> sourceFileUrl = <span class="hljs-string">&quot;../dist/js/app.72b4fccd.js.map&quot;</span>;<br><span class="hljs-keyword">const</span> sourceFileContentStr = fs.<span class="hljs-title function_">readFileSync</span>(sourceFileUrl, <span class="hljs-string">&quot;utf-8&quot;</span>);<br><span class="hljs-title function_">getSource</span>(sourceFileContentStr, <span class="hljs-number">1</span>, <span class="hljs-number">6040</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">origin</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(origin) <span class="hljs-comment">// 源代码,这里包含整个报错文件的源代码</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="只展示6行报错"><a href="#只展示6行报错" class="headerlink" title="只展示6行报错"></a>只展示6行报错</h2><p>一般我们展示, 只展示6行报错(前2行、报错行高亮、后2行),所以我们对上面的代码进行格式化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;preLine(origin)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">preLine</span>(<span class="hljs-params">origin</span>) &#123;<br>  <span class="hljs-keyword">const</span> line = origin.<span class="hljs-property">line</span>;  <span class="hljs-comment">// 错误的行号</span><br>  <span class="hljs-comment">// 先获取源码有多少行</span><br>  <span class="hljs-keyword">const</span> originCodeLine = origin?.<span class="hljs-property">originFileContent</span>?.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>  <span class="hljs-keyword">const</span> len = originCodeLine.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">const</span> start = line - <span class="hljs-number">3</span> &gt;= <span class="hljs-number">0</span> ? line - <span class="hljs-number">3</span> : <span class="hljs-number">0</span>; <br>  <span class="hljs-keyword">const</span> end = start + <span class="hljs-number">5</span> &gt;= len ? len : start + <span class="hljs-number">5</span>; <span class="hljs-comment">// 最多展示6行</span><br>  <span class="hljs-keyword">let</span> newLines = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = start; i &lt;= end; i++) &#123;<br>    <span class="hljs-keyword">const</span> content = i + <span class="hljs-number">1</span> + <span class="hljs-string">&quot;.    &quot;</span> + <span class="hljs-title function_">encodeHTML</span>(originCodeLine[i]);<br>    newLines.<span class="hljs-title function_">push</span>(<br>      <span class="hljs-string">`&lt;div class=&#x27;code-line <span class="hljs-subst">$&#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">        i + <span class="hljs-number">1</span> == line ? <span class="hljs-string">&quot;hightlight&quot;</span> : <span class="hljs-string">&quot;&quot;</span> // 高亮错误行</span></span><br><span class="hljs-subst"><span class="hljs-string">      &#125;</span>&#x27;&gt;<span class="hljs-subst">$&#123;content&#125;</span>&lt;/div&gt;`</span><br>    );<br>  &#125;<br>  <span class="hljs-keyword">return</span> newLines.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">encodeHTML</span>(<span class="hljs-params">str</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!str || str.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">return</span> str<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">&quot;&amp;#38;&quot;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&lt;/g</span>, <span class="hljs-string">&quot;&amp;lt;&quot;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&gt;/g</span>, <span class="hljs-string">&quot;&amp;gt;&quot;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&#x27;/g</span>, <span class="hljs-string">&quot;&amp;#39;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="接入方式"><a href="#接入方式" class="headerlink" title="接入方式"></a>接入方式</h1><ol><li>JavaScript方式: 我们可以打包成一个js文件,放到html最上面(必须置于其它脚本之前),否则嵌码JS前面的数据获取不到。</li><li>npm方式: 因为是在main.js引入, 所以有些资源加载错误无法捕获到.</li></ol><h1 id="上报方式"><a href="#上报方式" class="headerlink" title="上报方式"></a>上报方式</h1><h2 id="sendBeacon"><a href="#sendBeacon" class="headerlink" title="sendBeacon"></a>sendBeacon</h2><p>Navigator.sendBeacon 是一个用于发送少量数据到服务器的 API.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> res=navigator.<span class="hljs-title function_">sendBeacon</span>(url, data); <span class="hljs-comment">// data可以是 `ArrayBufferView` 或`Blob`, `DOMString即String` 或者`FormData`类型的数据。</span><br><span class="hljs-comment">// res 返回一个 Boolean值，如果返回 true，则表示数据已经放入队列并且在将来某个时间点会进行传输。</span><br><span class="hljs-comment">// 如果返回 false，则表示数据无法放入队列，可能因为队列已满或者网络问题。</span><br></code></pre></td></tr></table></figure><ul><li>sendBeacon 方法的设计目标是确保数据在页面卸载时能够可靠地发送。浏览器会在后台继续尝试发送数据，即使页面已经关闭或正在导航到新页面</li><li>发送是post请求, 是异步的，但不返回任何信息给调用者，无法处理服务器的响应。只能判断出是否放入浏览器任务队列，不能判断是否发送成功。</li><li>非阻塞的，不会阻碍页面的卸载过程</li><li>也会有跨域问题,除非服务器设置了适当的 CORS 头。</li><li>一般上报不超过64k</li><li>一般浏览器都支持, ie不支持,谷歌版本&gt;=39</li></ul><p>我们测试<code>navigator.sendBeacon(&#39;http://localhost:3000/log&#39;, &#39;test&#39;)</code>, 在控制台可以看到<code>ResourceType为ping</code>,但是看到请求头和正常post接口没任何区别,仍是post请求。<br><img src="images/7.jpg" width="100%"/></p><h2 id="xhr上报"><a href="#xhr上报" class="headerlink" title="xhr上报"></a>xhr上报</h2><ul><li>这种方法有一个问题，就是在页面卸载或刷新时进行上报的话，请求可能会在浏览器关闭或重新加载前还未发送至服务端就被浏览器 cancel 掉，导致数据上报失败。</li><li>可以将 ajax 请求改为同步方法，这样就能保证请求一定能发送到服务端. 但是同步就会阻塞页面关闭或重新加载的过程，这样就会影响用户体验。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">syncReport</span> = (<span class="hljs-params">url, &#123; data = &#123;&#125;, headers = &#123;&#125; &#125; = &#123;&#125;</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>  xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;POST&#x27;</span>, url, <span class="hljs-literal">false</span>); <span class="hljs-comment">// false表示同步请求(不异步)</span><br>  xhr.<span class="hljs-property">withCredentials</span> = <span class="hljs-literal">true</span>;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(headers).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>    xhr.<span class="hljs-title function_">setRequestHeader</span>(key, headers[key]);<br>  &#125;);<br>  xhr.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data));<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h2 id="img上报"><a href="#img上报" class="headerlink" title="img上报"></a>img上报</h2><ul><li>我们可以通过在 beforeunload 事件处理器中创建一个图片元素并设置它的 src 属性的方法来延迟卸载以保证数据的发送，因为绝大多数浏览器会延迟卸载以保证图片的载入(load事件)，所以数据可以在卸载事件中发送。不过beforeunload在移动端貌似不兼容,不会触发.</li><li>日志接口域名最好和当前页面域名不一致,因为浏览器对同一个域名的最大并发连接数为6个，如果日志同时上报了6次以上，就会对同域名的业务造成影响；更坏的情况如页面有一些错误、网络连接质量质量不高会让日志上报阻碍页面渲染.所以日志上报可以像使用CDN服务一样，使用单独域名和日志处理服务.(不同域名,最好在head头增加dns-prefetch预解析)</li><li>因为使用img,所以支持跨域,不过是get方法, 最长字符一般是2000个字符,一个英文字符占一个字节Byte,汉字占2字节. 1kb=1024字节Byte,所以一般不建议超过2kb</li><li>使用图片,就是浏览器禁止script,也不影响请求</li></ul><h2 id="gif图片上报"><a href="#gif图片上报" class="headerlink" title="gif图片上报"></a>gif图片上报</h2><ul><li>gif图片部署在nginx上,就能记录到请求的信息. 然后定时任务去读取nginx日志(比如<strong>每分钟拉一次</strong>),存入数据库.可以对数据进行清洗(格式化)</li><li>nginx的图片采用1X1的透明图,相比较于jpg，gif图更小，合法的 GIF 只需要 43 个字节.</li><li>和上面image不同的是,这个是通过nginx的日志来处理.(官方测试Nginx能够支持5万并发链接,实际生产环境中可以支撑2-4万并发连接数).而上面的是通过image的get请求发接口而已.</li></ul><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><h2 id="上报方式-1"><a href="#上报方式-1" class="headerlink" title="上报方式"></a>上报方式</h2><p>优雅降级<br>sendBeacon &gt; image &gt; xhr<br>判断如果浏览器支持sendBeacon,且上报数据小于64k(sendBeacon最大支持64k),使用sendBeacon上报(但是只能post接口). 注意还需要根据res判断是否加入队列成功.<br>否则判断上报数据 &lt; 2k, 使用image上报(get请求最多2000字符).<br>否则使用xhr上报.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 判断对象是否超过指定kb大小</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> object 源对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> limitInKB 最大kb</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">isObjectOverSizeLimit</span>(<span class="hljs-params"></span><br><span class="hljs-params">  object: object,</span><br><span class="hljs-params">  limitInKB: number</span><br><span class="hljs-params"></span>): boolean &#123;<br>  <span class="hljs-keyword">const</span> serializedObject = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(object)<br>  <span class="hljs-keyword">const</span> sizeInBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextEncoder</span>().<span class="hljs-title function_">encode</span>(serializedObject).<span class="hljs-property">length</span><br>  <span class="hljs-keyword">const</span> sizeInKB = sizeInBytes / <span class="hljs-number">1024</span><br>  <span class="hljs-keyword">return</span> sizeInKB &gt; limitInKB<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="上报频率"><a href="#上报频率" class="headerlink" title="上报频率"></a>上报频率</h2><ul><li>pv: 就是上报一次, 所以我们不需要上报频率.</li><li>性能监控:onload完, 上报一次, 所以我们不需要上报频率.(最好onload完加个1s的延时,因为onload完不加延时,有时performance获取的fp、fcp都可能获取不到)</li><li>错误监控: 每次调用上报方法的时候,先塞入数组中,去重,然后setTimeout(比如3s)上报.这相当于把多次合并为一次上报，以降低对服务器的压力。<br> 如何对同一个错误去重? 我们可以根据错误信息、错误文件、行、列、页面url组合一起做为唯一标识进行去重.</li><li>接口错误: 不去重.</li><li>静态资源监控: 上报一次, 所以我们不需要上报频率.</li></ul><h2 id="sourceMap-1"><a href="#sourceMap-1" class="headerlink" title="sourceMap"></a>sourceMap</h2><ul><li>项目打包的时候同时将sourcemap打包到上传服务器, 做一个监控页面, 通过接口获取报错行列、报错文件.map,然后渲染源代码.</li><li>不做多版本sourcemap,因为sourcemap每次打包都是新的, 老的报错如果渲染过源代码就存下来.</li></ul><h1 id="vue错误上报"><a href="#vue错误上报" class="headerlink" title="vue错误上报"></a>vue错误上报</h1><p><code>window.addEventListener(&quot;error&quot;,()=&gt;&#123;&#125;)</code>只能监听js的错误, vue的错误是组件的错误, 监听不到, 需要vue提供的方法处理.<br>测试了下:</p><ul><li>vue普通代码报错(template和jsx):  addEventListener监听不到, vue的errorHandler可以监听到</li><li>vue Promise代码报错(template和jsx):  unhandledrejection可以监听到, vue的errorHandler不能监听到</li><li>main.js代码报错(普通和promise), addEventListener和unhandledrejection可以监听到, vue的errorHandler不能监听到</li></ul><p><strong>所以使用vue的errorHandler</strong></p><ul><li>可以捕获error捕获不到的vue错误,其他错误原生js可以正常捕获.</li><li>vue的errorHandler方法,返回的error对象, 信息只有message、stack.但第三个参数可以知道是钩子的名称, 比如created,mounted等.如下图<img src="images/8.jpg" width="100%"/></li></ul><h2 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">errorHandler</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">err, vm, info</span>) &#123;<br>  <span class="hljs-title function_">send</span>(err) <span class="hljs-comment">// 上报错误信息</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br>app.<span class="hljs-property">config</span>.<span class="hljs-property">errorHandler</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">err, vm, info</span>) &#123;<br>   <span class="hljs-title function_">send</span>(err) <span class="hljs-comment">// 上报错误信息</span><br>&#125;;<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://m-cheng-web.github.io/web-tracing/guide/spotlight">web-tracing</a><br><a href="https://juejin.cn/post/7108660942686126093?searchId=202411211542117B97BF46B14987073FA1">腾讯三面：说说前端监控平台/监控SDK的架构设计和难点亮点</a><br><a href="https://calendar.perfplanet.com/2012/deciphering-the-critical-rendering-path/">DOM 和 CSSOM</a><br><a href="https://segmentfault.com/a/1190000021713604">浅谈浏览器页面渲染过程 load 与 DOMContentLoaded 事件</a><br><a href="https://wukongdoc.tingyun.com/browser/metric/timing.html?q=">听云</a><br><a href="https://wukongdoc.tingyun.com/browser/introduce/principle.html?h=navigation">听云</a><br><a href="https://juejin.cn/post/6973567030528065573">使用 Performance API 获取页面性能</a><br><a href="https://blog.itpub.net/70024924/viewspace-2992688/">页面CLS 优化实践</a><br><a href="https://juejin.cn/post/7148364027817623589#heading-7">使用 Sentry 做性能监控 - 原理篇</a><br><a href="https://juejin.cn/post/6908506976674807815#heading-5">前端异常上报</a><br><a href="https://blog.csdn.net/qq_63358859/article/details/139849910">使用sendBeacon进行前端数据上报</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> monitor </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git rebase变基</title>
      <link href="/ypf-blog/2024/10/09/git/git%20rebase%E5%8F%98%E5%9F%BA/"/>
      <url>/ypf-blog/2024/10/09/git/git%20rebase%E5%8F%98%E5%9F%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase -i [startHash] [endHash]  <span class="hljs-comment"># 左开右闭,所以不包含第一次, endHash可以省略</span><br>git rebase -i --root  <span class="hljs-comment"># 从第一次开始</span><br>git rebase -i HEAD~2 <span class="hljs-comment"># 最近2个commit</span><br></code></pre></td></tr></table></figure><p>执行完上面命令,会出现 startHash+1 - endHash之间的commit, 默认是pick, 可以修改执行不同的操作, 执行完后, 被操作的某个git记录,会变更为最新的日期<br><img src="images/2.jpg" width="50%" height="50%" /></p><table><thead><tr><th>命令</th><th>缩写</th><th>含义</th></tr></thead><tbody><tr><td>pick</td><td>p</td><td>保留该 commit不变</td></tr><tr><td>reword</td><td>r</td><td>保留该 commit，但需要修改该 commit 的注释</td></tr><tr><td>edit</td><td>e</td><td>保留该 commit, 但我要停下来修改(不仅仅修改注释)</td></tr><tr><td>squash</td><td>s</td><td>将该 commit合并到前一个 commit</td></tr><tr><td>fixup</td><td>f</td><td>将该 commit合并到前一个 commit，但不要保留该提交的注释信息</td></tr><tr><td>exec</td><td>x</td><td>执行 Shell 命令</td></tr><tr><td>drop</td><td>d</td><td>丢弃该 commit</td></tr></tbody></table><p>所以我们需要通过<code>git log</code> 查看hash值, 常用的命令有:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --pretty=format:<span class="hljs-string">&#x27;%h: %s&#x27;</span> <span class="hljs-comment"># 只显示短hash和commit信息</span><br>git <span class="hljs-built_in">log</span> --oneline  <span class="hljs-comment"># 只显示短hash和commit信息, 和上面区别是: 如果有其他分支合并过来的commit会在hash后显示分支</span><br></code></pre></td></tr></table></figure><p><strong>注意: git rebase 执行完的git记录比较特殊,是正序的, 和git log的显示顺序是相反的</strong></p><h2 id="合并连续commit-squash"><a href="#合并连续commit-squash" class="headerlink" title="合并连续commit(squash)"></a>合并连续commit(squash)</h2><p>假设我们有4次提交记录, 想要将最后3次合并到第一次.<br><img src="images/1.jpg" width="50%" height="50%" /></p><ol><li>执行<code>git rebase -i --root</code></li></ol><p>因为是左开区间, 所以我们需要找到 <strong>目标commit的上一个</strong>,所以这里要找到第一次的上一次, 但是已经到头了,所以需要找到根节点.<br><img src="images/2.jpg" width="50%" height="50%" /><br>2. 将234行的<code>pick</code>改为<code>s</code>或者 <code>squash</code>, 保存退出.就会将234合并到1.</p><h2 id="合并不连续commit-squash"><a href="#合并不连续commit-squash" class="headerlink" title="合并不连续commit(squash)"></a>合并不连续commit(squash)</h2><p>上面我们是合并连续的commit, 现在假设我们要将3合并至1. </p><ol><li>执行<code>git rebase -i --root</code></li><li>要先进行<code>排序</code>,将3排到1后面. (vim中剪切排序是 <code>dd-剪切 p-粘贴</code>到某一行后面),所以我们是在3执行dd,然后定义到1,执行p.</li><li>再将3改为S保存退出. (因为s命令是合并到前一次的, 所以我们要移动到一起才行)</li></ol><p><strong>注意:</strong><br>无论连续不连续合并, 如果上面执行S保存退出后,如果存在冲突时需要</p><ol><li>先解决冲突</li><li>执行<code>git add .</code></li><li><code>git rebase --continue</code></li></ol><h2 id="修改某次commit-edit"><a href="#修改某次commit-edit" class="headerlink" title="修改某次commit(edit)"></a>修改某次commit(edit)</h2><p>假设我们有4次提交记录,想直接在第一次记录上修改.<br><img src="images/3.jpg" width="50%" height="50%" /></p><ol><li>我们把第一行修改为<code>e</code>保存退出,此时代码会还原到第一次提交记录. 可以看下图commitid也是第一次, 命令行显示的是commitid也不是分支了.<img src="images/4.jpg" width="50%" height="50%" /></li><li>修改完后, 执行<code>git add .</code>, 然后执行<code>git rebase --continue</code>, 会弹出窗口,此时还可以在窗口中修改commit信息. 保存退出即可, 同样有冲突解决冲突重新add, continue即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1.eslint配置、插件</title>
      <link href="/ypf-blog/2024/09/11/eslint/1.eslint%E9%85%8D%E7%BD%AE%E3%80%81%E6%8F%92%E4%BB%B6/"/>
      <url>/ypf-blog/2024/09/11/eslint/1.eslint%E9%85%8D%E7%BD%AE%E3%80%81%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://eslint.nodejs.cn/docs/latest/use/getting-started">eslint官网</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>新建eslint文件夹<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">eslint<br>  - packages<br>  pnpm-lock.<span class="hljs-property">yaml</span><br></code></pre></td></tr></table></figure>其中<code>pnpm-lock.yaml</code>内容如下<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">packages</span>:<br>  - <span class="hljs-string">&quot;packages/*&quot;</span><br></code></pre></td></tr></table></figure></li><li>初始化项目<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">pnpm init   <span class="hljs-comment">// 1.初始化package.json</span><br>pnpm create @eslint/config@latest <span class="hljs-comment">// 2.初始化eslint配置以及node_modules依赖</span><br></code></pre></td></tr></table></figure>执行<code>pnpm create @eslint/config@latest</code>命令会弹窗一系列交互选择,<br>最后生成eslint的配置文件,以及package.json安装了<code>eslint、@eslint/js、globals</code>三个包<img src="images/1.jpg" width="80%" height="80%" /></li></ol><p>因为现在官方于2024.02.24发布了9.x版本,但是实际项目很多用的都是8.x版本, 两个版本配置文件变化较大,所以使用8.x版本最后一个版本8.57.0来讲解.</p><p><strong>因为上面命令创建的是新版本,所以就不能使用上面的命令创建配置文件以及依赖了</strong></p><h2 id="手动配置旧版本"><a href="#手动配置旧版本" class="headerlink" title="手动配置旧版本"></a>手动配置旧版本</h2><ol start="3"><li>手动创建配置文件<code>.eslintrc.js</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">root</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 多个配置文件,默认eslint会一直找父级目录的配置文件,都会生效, 所以如果我们只想让当前配置文件生效,其他配置文件不生效,所以这里设置为true,就不会往上找了</span><br>  <span class="hljs-comment">// 当前可以使用哪个环境的全局变量,不配置会检测标红</span><br>  <span class="hljs-attr">env</span>: &#123;<br>    <span class="hljs-attr">browser</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 表示可以使用 window/document等浏览器全局变量,document就是window的一个属性</span><br>    <span class="hljs-comment">// es2015: true, // 表示可以使用 ES6 语法,如 let、const、箭头函数等</span><br>    <span class="hljs-attr">es2021</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//  表示可以使用 ES12 语法,如 async/await等 https://zh-hans.eslint.org/docs/latest/use/configure/language-options#</span><br>    <span class="hljs-attr">node</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 表示可以使用 node 环境的全局变量,如 require、module、exports、process写法等</span><br>  &#125;,<br>  <span class="hljs-comment">// extends用于继承别人写好的rule规则</span><br>  <span class="hljs-attr">extends</span>:[ <br>    <span class="hljs-string">&quot;eslint:recommended&quot;</span>,<br>    <span class="hljs-string">&quot;plugin:@typescript-eslint/recommended&quot;</span>,<br>  ],<br>  <span class="hljs-attr">parserOptions</span>: &#123;<br>    <span class="hljs-attr">ecmaVersion</span>: <span class="hljs-string">&quot;latest&quot;</span>, <span class="hljs-comment">// 指定你想要使用的 ECMAScript 版本</span><br>    <span class="hljs-attr">sourceType</span>: <span class="hljs-string">&quot;module&quot;</span>,   <span class="hljs-comment">// 支持脚本类型为模块,否则不支持import/export写法</span><br>    <span class="hljs-attr">ecmaFeatures</span>: &#123;<br>      <span class="hljs-attr">jsx</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 支持jsx语法,否则不支持</span><br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-comment">// 此处就会覆盖掉上面extends继承的规则</span><br>    <span class="hljs-comment">// 0/off-关闭规则  1/warn-开启规则并标黄 2/error 开启规则并标红</span><br>    <span class="hljs-string">&quot;quotes&quot;</span>: [<span class="hljs-string">&quot;warn&quot;</span>, <span class="hljs-string">&quot;double&quot;</span>],<br>  &#125;,<br>  <span class="hljs-attr">globals</span>: &#123;<br>    <span class="hljs-comment">// 定义全局变量(比如是外部script引入的变量)</span><br>    <span class="hljs-attr">aa</span>: <span class="hljs-string">&quot;writable&quot;</span>, <span class="hljs-comment">//  readonly表示只读，不可修改，true/writable表示可修改</span><br>  &#125;,<br>  <span class="hljs-comment">// 内部解析器,默认不传就是espree, 我们可以自定义解析器,如exprima. 我们随便改一个,比如test,执行npx eslint test.js命令就会去找该解析器,找不到就报错</span><br>  <span class="hljs-attr">parser</span>: <span class="hljs-string">&quot;test&quot;</span>,<br>  <span class="hljs-comment">// 插件</span><br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// &quot;@typescript-eslint/eslint-plugin&quot;</span><br>  ],<br>  <span class="hljs-comment">// parser: &quot;@typescript-eslint/parser&quot;,</span><br>&#125;;<br><br></code></pre></td></tr></table></figure></li><li>package.json新增依赖,然后<code>pnpm install</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;devDependencies&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;eslint&quot;</span>: <span class="hljs-string">&quot;8.57.0&quot;</span>,<br>&#125;,<br></code></pre></td></tr></table></figure></li><li>执行检测<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">npx eslint test.<span class="hljs-property">js</span><br># <span class="hljs-variable constant_">OR</span><br>npx eslint --ext .<span class="hljs-property">jsx</span> --ext .<span class="hljs-property">js</span> lib/<br># <span class="hljs-variable constant_">OR</span><br>npx eslint --ext .<span class="hljs-property">jsx</span>,.<span class="hljs-property">js</span> lib/<br></code></pre></td></tr></table></figure></li></ol><h3 id="parserOptions-ecmaVersion和env中es的区别"><a href="#parserOptions-ecmaVersion和env中es的区别" class="headerlink" title="parserOptions.ecmaVersion和env中es的区别"></a>parserOptions.ecmaVersion和env中es的区别</h3><ul><li>ecmaVersion表示要检查代码的 ECMAScript 版本,是从语法层面解析的. 比如只开了ecmaVersion,不开env中es,下面代码会报错不识别<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a=&#123;<br>    <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>env中的es是用来表示能否使用es中的全局变量的, 所以使用了全局变量,还需要设置解析器才行.是不是感觉很多余, v9版本已经将这两个配置合并到一起了.</li><li>官网文档上描述可以不设置ecmaVersion,只设置env,会自动设置ecmaVersion到对应版本 <a href="https://zh-hans.eslint.org/docs/latest/use/configure/language-options#">https://zh-hans.eslint.org/docs/latest/use/configure/language-options#</a></li><li>我们可以在<code>packages/demo/node_modules/eslint/conf/globals.js</code>看到可以设置的es版本, es是向下兼容的,只设置一个即可.</li><li>一般建议env和parserOptions.ecmaVersion都设置成一样的.</li></ul><h3 id="ts支持"><a href="#ts支持" class="headerlink" title="ts支持"></a>ts支持</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">pnpm install @typescript-eslint/parser typescript @typescript-eslint/eslint-plugin -D<br></code></pre></td></tr></table></figure><ul><li><strong>@typescript-eslint/parser: ts解析器(注意设置成ts解析器,不用担心js无法解析, ts解析器是支持js的)</strong></li></ul><h2 id="extends、plugin、rules区别"><a href="#extends、plugin、rules区别" class="headerlink" title="extends、plugin、rules区别"></a>extends、plugin、rules区别</h2><h3 id="创建插件"><a href="#创建插件" class="headerlink" title="创建插件"></a>创建插件</h3><p>我们直接开发一个plugin来了解区别.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"># 安装脚手架模版工具<br>npm install -g yo generator-eslint<br><br># 生成eslint插件模版(初始化项目结构)<br>yo <span class="hljs-attr">eslint</span>:plugin<br>- <span class="hljs-title class_">What</span> is your name? 插件作者 就是package.<span class="hljs-property">json</span>中的author<br>- <span class="hljs-title class_">What</span> is the plugin <span class="hljs-variable constant_">ID</span>? 插件名称, 就是package.<span class="hljs-property">json</span>中的name, 会自动拼接上eslint-plugin-<br>- <span class="hljs-title class_">Type</span> a short description <span class="hljs-keyword">of</span> <span class="hljs-variable language_">this</span> <span class="hljs-attr">plugin</span>: 插件描述, 就是package.<span class="hljs-property">json</span>中的description<br>- <span class="hljs-title class_">Does</span> <span class="hljs-variable language_">this</span> plugin contain custom <span class="hljs-title class_">ESLint</span> rules? 是否包含自定义规则<br>- <span class="hljs-title class_">Does</span> <span class="hljs-variable language_">this</span> plugin contain one or more processors?  是否包含处理器<br></code></pre></td></tr></table></figure><p>生成的目录结构如下:<br><img src="images/2.jpg" width="80%" height="80%" /></p><p>我们来看下packages/eslint-plugin-test/lib/index.js的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@fileoverview</span> 测试插件</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> <span class="hljs-variable">ypf</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">&quot;use strict&quot;</span>;<br><span class="hljs-comment">//------------------------------------------------------------------------------</span><br><span class="hljs-comment">// Requirements</span><br><span class="hljs-comment">//------------------------------------------------------------------------------</span><br><span class="hljs-keyword">const</span> requireIndex = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;requireindex&quot;</span>);<br><span class="hljs-comment">//------------------------------------------------------------------------------</span><br><span class="hljs-comment">// Plugin Definition</span><br><span class="hljs-comment">//------------------------------------------------------------------------------</span><br><span class="hljs-comment">// import all rules in lib/rules</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">rules</span> = <span class="hljs-title function_">requireIndex</span>(__dirname + <span class="hljs-string">&quot;/rules&quot;</span>);<br><span class="hljs-comment">// 插件处理器,一般用于处理如vue等第三方语法</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">processors</span> = &#123;<br>  <span class="hljs-comment">// add your processors here</span><br>    <span class="hljs-string">&#x27;.vue&#x27;</span> : &#123;<br>      <span class="hljs-attr">preprocess</span>: <span class="hljs-function">(<span class="hljs-params">code, filename</span>) =&gt;</span> &#123;<br>      &#125;,<br>      <span class="hljs-attr">postprocess</span>: <span class="hljs-function">(<span class="hljs-params">messages, filename</span>) =&gt;</span> &#123;<br>      &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>上面的逻辑很简单就是加载rules目录下的所有规则(看requireindex源码,是fs读取文件夹下的所有.js、.json、.node文件)</p><p><strong>至此我们已经完成了一个最简单的插件结构.(插件里面引入了规则rule、processors等)</strong></p><h3 id="创建规则"><a href="#创建规则" class="headerlink" title="创建规则"></a>创建规则</h3><p>我们在插件的基础上创建一条规则, 比如我们插件名叫no-var, 即不能出现var 关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">yo <span class="hljs-attr">eslint</span>:rule<br>- <span class="hljs-title class_">What</span> is your name? 作者,和上面一样<br>- <span class="hljs-title class_">Where</span> will <span class="hljs-variable language_">this</span> rule be published 是插件还是官方核心, 自己肯定不开发官方插件,所以是插件<span class="hljs-literal">false</span><br>- <span class="hljs-title class_">What</span> is the rule <span class="hljs-variable constant_">ID</span>?  规则名称, 如no-<span class="hljs-keyword">var</span><br>- <span class="hljs-title class_">Type</span> a short description <span class="hljs-keyword">of</span> <span class="hljs-variable language_">this</span> <span class="hljs-attr">rule</span>: 规则描述<br>- <span class="hljs-title class_">Type</span> a short example <span class="hljs-keyword">of</span> the code that will <span class="hljs-attr">fail</span>: 错误示例,可以忽略<br></code></pre></td></tr></table></figure><img src="images/3.jpg" width="80%" height="80%" /><img src="images/4.jpg" width="80%" height="80%" /><p>我们来看下packages/eslint-plugin-test/lib/rules/no-var.js的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@fileoverview</span> 不能有var</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> <span class="hljs-variable">ypf</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">&quot;use strict&quot;</span>;<br><br><span class="hljs-comment">//------------------------------------------------------------------------------</span><br><span class="hljs-comment">// Rule Definition</span><br><span class="hljs-comment">//------------------------------------------------------------------------------</span><br><br><span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">import(&#x27;eslint&#x27;).Rule.RuleModule</span>&#125; */</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">meta</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// `problem`, `suggestion`, or `layout`</span><br>    <span class="hljs-attr">docs</span>: &#123;<br>      <span class="hljs-attr">description</span>: <span class="hljs-string">&quot;不能有var&quot;</span>,<br>      <span class="hljs-attr">recommended</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">url</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// URL to the documentation page for this rule</span><br>    &#125;,<br>    <span class="hljs-attr">fixable</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// Or `code` or `whitespace`</span><br>    <span class="hljs-attr">schema</span>: [], <span class="hljs-comment">// Add a schema if the rule has options</span><br>    <span class="hljs-attr">messages</span>: &#123;&#125;, <span class="hljs-comment">// Add messageId and message</span><br>  &#125;,<br><br>  <span class="hljs-title function_">create</span>(<span class="hljs-params">context</span>) &#123;<br>    <span class="hljs-comment">// variables should be defined here</span><br><br>    <span class="hljs-comment">//----------------------------------------------------------------------</span><br>    <span class="hljs-comment">// Helpers</span><br>    <span class="hljs-comment">//----------------------------------------------------------------------</span><br><br>    <span class="hljs-comment">// any helper functions should go here or else delete this section</span><br><br>    <span class="hljs-comment">//----------------------------------------------------------------------</span><br>    <span class="hljs-comment">// Public</span><br>    <span class="hljs-comment">//----------------------------------------------------------------------</span><br><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-comment">// visitor functions for different types of nodes</span><br>    &#125;;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>我们编写规则的核心就是在create方法中通过ast编写规则逻辑,进行是否报错修复. 现在我们来编写<code>no-var</code>规则</p><h4 id="查看要更改的代码ast结构"><a href="#查看要更改的代码ast结构" class="headerlink" title="查看要更改的代码ast结构"></a>查看要更改的代码ast结构</h4><p><a href="https://astexplorer.net/">astexplorer</a><br><img src="images/5.jpg" width="80%" height="80%" /></p><h4 id="context中操作ast"><a href="#context中操作ast" class="headerlink" title="context中操作ast"></a>context中操作ast</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">meta</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">`suggestion`</span>, <span class="hljs-comment">// `problem`, `suggestion`, or `layout` 插件的类型,和rule里面的type不是一个东西,只是用来标识该插件的类型</span><br>    <span class="hljs-attr">docs</span>: &#123;<br>      <span class="hljs-attr">description</span>: <span class="hljs-string">&quot;不能有var&quot;</span>,<br>      <span class="hljs-attr">recommended</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 是否是被推荐的,一般自己的插件不用,是core官方包用的,可以删掉</span><br>      <span class="hljs-attr">url</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// URL to the documentation page for this rule 该规则的在线文档地址,可以删掉</span><br>    &#125;,<br>    <span class="hljs-comment">// fixable: null, // Or `code` or `whitespace`</span><br>    <span class="hljs-attr">fixable</span>: <span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-comment">// Or `code` or `whitespace` 修复的是代码还是空格</span><br>    <span class="hljs-attr">schema</span>: [], <span class="hljs-comment">// Add a schema if the rule has options</span><br>    <span class="hljs-attr">messages</span>: &#123;<br>      <span class="hljs-attr">noVar</span>: <span class="hljs-string">&quot;不能有&#123;&#123;name&#125;&#125;&quot;</span>,<br>    &#125;, <span class="hljs-comment">// Add messageId and message</span><br>  &#125;,<br>  <span class="hljs-title function_">create</span>(<span class="hljs-params">context</span>) &#123;<br>    <span class="hljs-keyword">const</span> sourceCode = context.<span class="hljs-property">sourceCode</span>; <span class="hljs-comment">// 要用这个来修复代码</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-title class_">VariableDeclaration</span>: <span class="hljs-function">(<span class="hljs-params">node</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// console.log(node);</span><br>        <span class="hljs-keyword">if</span> (node.<span class="hljs-property">kind</span> === <span class="hljs-string">&quot;var&quot;</span>) &#123;<br>          <span class="hljs-comment">// 报告问题</span><br>          context.<span class="hljs-title function_">report</span>(&#123;<br>            node,<br>            <span class="hljs-comment">// 传递给messageId的data</span><br>            <span class="hljs-attr">data</span>: &#123;<br>              <span class="hljs-attr">name</span>: node.<span class="hljs-property">kind</span>,<br>            &#125;,<br>            <span class="hljs-comment">// message: &quot;不能有var&quot;, 在上面的messages中定义messageId</span><br>            <span class="hljs-attr">messageId</span>: <span class="hljs-string">&quot;noVar&quot;</span>,<br>            <span class="hljs-attr">fix</span>: <span class="hljs-function">(<span class="hljs-params">fixer</span>) =&gt;</span> &#123;<br>              <span class="hljs-comment">// 修复代码</span><br>              <span class="hljs-keyword">const</span> varToken = sourceCode.<span class="hljs-title function_">getFirstToken</span>(node, &#123;<br>                <span class="hljs-comment">// filter: (token) =&gt; token.value === &quot;var&quot;, // 测试可以不写</span><br>              &#125;);<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(varToken, <span class="hljs-string">&quot;varToken&quot;</span>);<br>              <span class="hljs-keyword">return</span> fixer.<span class="hljs-title function_">replaceText</span>(varToken, <span class="hljs-string">&quot;let&quot;</span>);<br>              <span class="hljs-comment">// return fixer.replaceText(node, &quot;let&quot;) // 这个会把 var a=1 整个直接替换为let, 所以要找到第一个token即 var</span><br>            &#125;,<br>          &#125;);<br>        &#125;<br>      &#125;,<br>    &#125;;<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>message和messageId至少要一个, 不能都写, 一般写messageId</li><li>context.report()执行代码检测到报告问题,代码会标红(需要编辑器安装eslint插件支持),如果传fix, 当我们执行<code>npx eslint [glob] --fix</code>就会执行fix方法进行修复.</li></ul><p><strong>我们在下面安装测试会截图可以看标红</strong></p><h4 id="项目中安装插件测试"><a href="#项目中安装插件测试" class="headerlink" title="项目中安装插件测试"></a>项目中安装插件测试</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">mkdir demo  <br>cd demo <br>pnpm init  <br>pnpm install eslint-plugin-test@workspace<br>touch test.<span class="hljs-property">js</span><br>vim test.<span class="hljs-property">js</span> 写入<span class="hljs-keyword">var</span> a=<span class="hljs-number">1</span><br>touch .<span class="hljs-property">eslintrc</span>.<span class="hljs-property">js</span> <br></code></pre></td></tr></table></figure><p>.eslintrc.js内容如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">env</span>: &#123;<br>    <span class="hljs-attr">browser</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 表示可以使用 window/document等浏览器全局变量,document就是window的一个属性</span><br>    <span class="hljs-attr">es2021</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//  表示可以使用 ES12 语法,如 async/await等</span><br>    <span class="hljs-attr">node</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 表示可以使用 node 环境的全局变量,如 require、module、exports、process等</span><br>  &#125;,<br>  <span class="hljs-attr">parserOptions</span>: &#123;<br>    <span class="hljs-attr">ecmaVersion</span>: <span class="hljs-string">&quot;latest&quot;</span>, <span class="hljs-comment">// 指定你想要使用的 ECMAScript 版本</span><br>  &#125;,<br>  <span class="hljs-comment">// 插件</span><br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-string">&quot;eslint-plugin-test&quot;</span> <span class="hljs-comment">// 或者省略eslint-plugin-直接写test</span><br>  ],<br>  <span class="hljs-comment">// 必须写上rules执行npx eslint才会生效</span><br>  <span class="hljs-comment">// test下的no-var规则</span><br> <span class="hljs-attr">rules</span>: &#123;<br>    <span class="hljs-string">&quot;test/no-var&quot;</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li>必须写上rules执行npx eslint才会生效,否则执行不会有任何反应</li><li>eslint只要检测到.eslintrc.js就可以在编辑上看到标红, 和执行npx eslint没任何关系,执行会在控制台报错</li></ul><img src="images/6.jpg" width="80%" height="80%" />上面的fix如果不写fix函数,点击没反应的<p>现在我们执行下 <code>npx eslint test.js </code>,可以看到控制台报错<br><img src="images/7.jpg" width="80%" height="80%" /><br>执行<code>npx eslint test.js --fix</code>就会执行fix函数修复代码</p><p><strong>所以plugin 和 rules 是必须一起使用的</strong></p><h3 id="创建extends"><a href="#创建extends" class="headerlink" title="创建extends"></a>创建extends</h3><p>上面我们每次使用的时候都要写plugin和rules,这样每次都要写很麻烦,我们可以创建extends,将plugin和rules包含在一起。使用只需要写extends即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 修改packages/eslint-plugin-test/lib/index.js 即插件js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">rules</span>: <span class="hljs-title function_">requireIndex</span>(__dirname + <span class="hljs-string">&quot;/rules&quot;</span>),<br>  <span class="hljs-attr">configs</span>: &#123;<br>    <span class="hljs-comment">// extends使用的名字,我们这里叫recommended</span><br>    <span class="hljs-attr">recommended</span>: &#123;<br>      <span class="hljs-comment">// 插件</span><br>      <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-comment">// 可以省略eslint-plugin-</span><br>      ],<br>      <span class="hljs-attr">rules</span>: &#123;<br>        <span class="hljs-string">&quot;test/no-var&quot;</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>demo中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">env</span>: &#123;<br>    <span class="hljs-attr">browser</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 表示可以使用 window/document等浏览器全局变量,document就是window的一个属性</span><br>    <span class="hljs-attr">es2021</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//  表示可以使用 ES12 语法,如 async/await等</span><br>    <span class="hljs-attr">node</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 表示可以使用 node 环境的全局变量,如 require、module、exports、process等</span><br>  &#125;,<br>  <span class="hljs-attr">parserOptions</span>: &#123;<br>    <span class="hljs-attr">ecmaVersion</span>: <span class="hljs-string">&quot;latest&quot;</span>, <span class="hljs-comment">// 指定你想要使用的 ECMAScript 版本</span><br>  &#125;,<br>  <span class="hljs-comment">// 插件</span><br>  <span class="hljs-comment">// plugins: [</span><br>  <span class="hljs-comment">//   &quot;eslint-plugin-test&quot; // 或者省略eslint-plugin-直接写test</span><br>  <span class="hljs-comment">// ],</span><br>  <span class="hljs-comment">// 必须写上rules执行npx eslint才会生效</span><br>  <span class="hljs-comment">// test下的no-var规则</span><br><span class="hljs-comment">//  rules: &#123;</span><br><span class="hljs-comment">//     &quot;test/no-var&quot;: &quot;error&quot;,</span><br><span class="hljs-comment">//   &#125;,</span><br>  <span class="hljs-attr">extends</span>: [<br>    <span class="hljs-string">&quot;plugin:test/recommended&quot;</span>, <span class="hljs-comment">// 表示使用test插件的recommended推荐规则, plugin:后不能有空格,否则不生效</span><br>  ]<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>所以extends=plugin+rules</strong></p><h2 id="node集成使用"><a href="#node集成使用" class="headerlink" title="node集成使用"></a>node集成使用</h2><p>上面我们使用eslint必须依赖项目使用, 假如我们想封装一个脚手架,直接在任意项目执行检测修复呢?<br><a href="https://eslint.nodejs.cn/docs/latest/integrate/integration-tutorial">node官网也有文档支持</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ESLint</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;eslint&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ESLintPlugin</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;eslint-plugin-test&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">lint</span>(<span class="hljs-params">patterns, fix</span>) &#123;<br>  <span class="hljs-keyword">const</span> eslint = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ESLint</span>(&#123;<br>    <span class="hljs-attr">useEslintrc</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 不检测其他规则,只检测i18n规则, 不设置为false,则会检测项目中的.eslintrc.js文件规则</span><br>    <span class="hljs-comment">// 只检测js,jsx,vue文件</span><br>    <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&quot;.js&quot;</span>, <span class="hljs-string">&quot;.jsx&quot;</span>, <span class="hljs-string">&quot;.vue&quot;</span>],<br>    <span class="hljs-attr">fix</span>: fix || <span class="hljs-literal">false</span>, <span class="hljs-comment">// 是否自动修复</span><br>    <span class="hljs-attr">overrideConfigFile</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">plugins</span>: &#123; <span class="hljs-string">&#x27;eslint-plugin-test&#x27;</span>: <span class="hljs-title class_">ESLintPlugin</span> &#125;, <span class="hljs-comment">// 必须写,下面的extends才能识别, 和配置文件那种不一样,配置文件那种只写extends就行,不用写plugins</span><br>    <span class="hljs-attr">overrideConfig</span>: &#123;<br>      <span class="hljs-attr">extends</span>: [<br>        <span class="hljs-string">&quot;plugin:test/recommended&quot;</span>, <span class="hljs-comment">// 表示使用test插件的推荐规则, plugin:后不能有空格,否则不生效</span><br>      ],<br>    &#125;,<br>  &#125;);<br>  <span class="hljs-title class_">Loading</span>.<span class="hljs-title function_">start</span>(<span class="hljs-string">`检测中...`</span>);<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 检查文件</span><br>    <span class="hljs-keyword">const</span> results = <span class="hljs-keyword">await</span> eslint.<span class="hljs-title function_">lintFiles</span>(patterns);<br>    <span class="hljs-keyword">if</span> (!fix) &#123;<br>      <span class="hljs-comment">// 判断是否有匹配到错误</span><br>      <span class="hljs-keyword">const</span> hasErrors = results.<span class="hljs-title function_">some</span>(<br>        <span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> result.<span class="hljs-property">messages</span> &amp;&amp; result.<span class="hljs-property">messages</span>.<span class="hljs-property">length</span><br>      );<br>      <span class="hljs-keyword">if</span> (!hasErrors) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Loading</span>.<span class="hljs-title function_">succeed</span>(<span class="hljs-string">`没有要修复的错误`</span>);<br>      &#125;<br>      <span class="hljs-title class_">Loading</span>.<span class="hljs-title function_">succeed</span>(<span class="hljs-string">`检测完成`</span>);<br>      <span class="hljs-comment">// 如果没有fix,则直接输出错误</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">stylish</span>(results));<br>    &#125;<br>    <span class="hljs-comment">// 判断是否有匹配到错误</span><br>    <span class="hljs-keyword">const</span> hasErrors1 = results.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> result.<span class="hljs-property">output</span> || result.<span class="hljs-property">warningCount</span>);<br>    <span class="hljs-keyword">if</span> (!hasErrors1) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Loading</span>.<span class="hljs-title function_">succeed</span>(<span class="hljs-string">`没有要修复的错误`</span>);<br>    &#125;<br>    <span class="hljs-comment">// 输出回原文件</span><br>    <span class="hljs-keyword">await</span> <span class="hljs-title class_">ESLint</span>.<span class="hljs-title function_">outputFixes</span>(results);<br>  <br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-title class_">Loading</span>.<span class="hljs-title function_">fail</span>(<span class="hljs-string">`检测失败`</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(chalk.<span class="hljs-title function_">red</span>(error));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面我们执行 <code>lint([&quot;test.js&quot;], true)</code> 可以执行eslint检测了.可以封装一个eslint-cli,对任意文件夹执行检测和修复</p><p>具体其他配置可以看上面官网的文档.</p><h2 id="eslint忽略"><a href="#eslint忽略" class="headerlink" title="eslint忽略"></a>eslint忽略</h2><h3 id="忽略文件-文件夹"><a href="#忽略文件-文件夹" class="headerlink" title="忽略文件/文件夹"></a>忽略文件/文件夹</h3><ol><li>根目录新建.eslintignore文件</li><li>写入<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">test.<span class="hljs-property">js</span> <span class="hljs-comment">// 忽略单个文件</span><br>test <span class="hljs-comment">// 忽略test文件夹下的所有文件</span><br></code></pre></td></tr></table></figure><h3 id="代码忽略"><a href="#代码忽略" class="headerlink" title="代码忽略"></a>代码忽略</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// eslint-disable-line  忽略当前行</span><br><span class="hljs-comment">// eslint-disable-next-line  忽略下一行</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>) <br><span class="hljs-comment">/* eslint-disable */</span> <span class="hljs-comment">// 忽略整个文件(注意, 放到代码任何位置都行,都会忽略整个文件, 一般放到顶部. // eslint-disable测试不生效;  )</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">/* eslint-disable */</span> 块级忽略<br><span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)<br><span class="hljs-comment">/* eslint-disable */</span> <br><br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> eslint </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2.eslint原理</title>
      <link href="/ypf-blog/2024/08/01/eslint/2.eslint%E5%8E%9F%E7%90%86/"/>
      <url>/ypf-blog/2024/08/01/eslint/2.eslint%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="调试源码"><a href="#调试源码" class="headerlink" title="调试源码"></a>调试源码</h1><p>我们要了解eslint原理,需要在vscode中打开一个 <code>javascript调试终端</code>, 然后执行 <code>npx eslint ...</code>, 编辑器会自动定位到<strong>运行和调试</strong>,但此时没有断点. 然后我们去node_modules/eslint中打上一个断点, 重新执行下<code>npx eslint ...</code>就会触发断点了.</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="执行bin命令"><a href="#执行bin命令" class="headerlink" title="执行bin命令"></a>执行bin命令</h2><p>我们正常执行eslint命令,相当于<strong>执行bin命令</strong>(node_modules中eslint/bin/eslint目录执行Execute方法)</p><img src="images/1.jpg" width="50%" height="50%" /><h2 id="parse解析命令行参数以及初始化默认参数"><a href="#parse解析命令行参数以及初始化默认参数" class="headerlink" title="parse解析命令行参数以及初始化默认参数"></a>parse解析命令行参数以及初始化默认参数</h2><p>解析参数为对象以及对象中加一些初始化默认参数, 如—fix变为 <code>—fix:true</code><br><img src="images/2.jpg" width="50%" height="50%" /></p><h2 id="初始化类生成eslint实例"><a href="#初始化类生成eslint实例" class="headerlink" title="初始化类生成eslint实例"></a>初始化类生成eslint实例</h2><p>执行<code>const engine=new ESlint()</code><br><img src="images/3.jpg" width="50%" height="50%" /><br>ESlint类中主要定义了<code>lintFiles、outputFixes、getErrorResults、lintText</code>等方法</p><h2 id="进行检测"><a href="#进行检测" class="headerlink" title="进行检测"></a>进行检测</h2><p>调用<code>engine.lintFiles()</code>进行规则检测<br><img src="images/4.jpg" width="50%" height="50%" /></p><h3 id="解析文件路径为数组进行循环"><a href="#解析文件路径为数组进行循环" class="headerlink" title="解析文件路径为数组进行循环"></a>解析文件路径为数组进行循环</h3><p>比如执行<code>npx eslint src</code>就会解析成<code>[&#123;path:&#39;1.js&#39;,config,...&#125;,&#123;path:&#39;2.js&#39;,config,...&#39;&#125;]</code><br><img src="images/4-1.jpg" width="50%" height="50%" /><br>config就是规则数组,包含默认和用户自己的( 1.默认忽略规则2.被检测的文件夹中的.eslintrc.js规则文件)<br><img src="images/4-2.jpg" width="50%" height="50%" /></p><h3 id="根据文件数组循环调用verifyText进行检测以及生成修复补丁、结果-fs直接获取内容"><a href="#根据文件数组循环调用verifyText进行检测以及生成修复补丁、结果-fs直接获取内容" class="headerlink" title="根据文件数组循环调用verifyText进行检测以及生成修复补丁、结果(fs直接获取内容)"></a>根据文件数组循环调用verifyText进行检测以及生成修复补丁、结果(fs直接获取内容)</h3><img src="images/4-3.jpg" width="50%" height="50%" /><h4 id="do-while循环计数检测生成修复代码补丁、结果-注此时没有更新到文件"><a href="#do-while循环计数检测生成修复代码补丁、结果-注此时没有更新到文件" class="headerlink" title="do while循环计数检测生成修复代码补丁、结果(注此时没有更新到文件)"></a>do while循环计数检测生成修复代码补丁、结果(注此时没有更新到文件)</h4><p>循环检测:</p><ul><li>如果有–fix,检测完生成修复补丁,根据补丁生成修复结果fixedResult,再拿着fixedResult的output当成文本检测一次(<code>这里就是let a=1,第一次是var a=1</code>),直至没有错误为止.(eslint默认最多循环10次(eslint默认初始化定义了 <code>const MAX_AUTOFIX_PASSES=10</code>))</li><li>如果没有, 检测一次后生成修复补丁就跳出,不会根据补丁生成修复结果去检测</li></ul><p><strong>修复补丁</strong><br><img src="images/4-10.jpg" width="50%" height="50%" /></p><p><strong>修复结果</strong><br><img src="images/4-4-1.jpg" width="50%" height="50%" /></p><h5 id="利用解析器将文本转为ast树"><a href="#利用解析器将文本转为ast树" class="headerlink" title="利用解析器将文本转为ast树"></a>利用解析器将文本转为ast树</h5><img src="images/4-4.jpg" width="50%" height="50%" /><h5 id="遍历ast-将节点拍平为一维数组存起来"><a href="#遍历ast-将节点拍平为一维数组存起来" class="headerlink" title="遍历ast,将节点拍平为一维数组存起来"></a>遍历ast,将节点拍平为一维数组存起来</h5><img src="images/4-5.jpg" width="50%" height="50%" /><h5 id="读取配置规则进行遍历校验"><a href="#读取配置规则进行遍历校验" class="headerlink" title="读取配置规则进行遍历校验"></a>读取配置规则进行遍历校验</h5><img src="images/4-6.jpg" width="50%" height="50%" /><ul><li><p>获取每个规则的create函数(里面是用户自定义规则的各个ast节点函数)进行遍历,并定义了一个emitter钩子监听器用于存储每个ast节点函数</p><img src="images/4-7.jpg" width="50%" height="50%" /></li><li><p>遍历之前存储的一维ast数组节点,执行emitter匹配到的节点函数,并传入context上下文(context定义了report上报方法)</p><img src="images/4-9.jpg" width="50%" height="50%" /><img src="images/4-8.jpg" width="50%" height="50%" /></li><li><p>当执行节点函数就会执行<code>context.report</code>逻辑, 如果存在fix方法,就会触发fix方法(所以无论执行命令存不存在–fix都会触发fix方法),生成一个修复补丁对象(包含修复后节点的文本,以及被修复的节点位置loc),此时还不会覆盖到原代码. (因为是遍历ast每个节点,所以假设有两个var,都要变成let, 遍历会触发2次VariableDeclaration方法,所以每个修复补丁都会细致到节点,都会有对应的位置loc)</p><img src="images/4-10.jpg" width="50%" height="50%" /></li><li><p>如果有–fix,根据补丁生成修复结果fixedResult,再拿着fixedResult的output当成文本会再执行一次检测是否修复好了,没好再重复循环,最多10次;</p></li><li><p>如果没有–fix,直接跳出</p></li></ul><h2 id="进行修复"><a href="#进行修复" class="headerlink" title="进行修复"></a>进行修复</h2><img src="images/5.jpg" width="50%" height="50%" /><img src="images/5-1.jpg" width="50%" height="50%" />此时才会写入文件, 上面检测只会生成修复补丁, 不会覆盖到原文件<h2 id="统计打印结果"><a href="#统计打印结果" class="headerlink" title="统计打印结果"></a>统计打印结果</h2><p>打印总计多少错误、警告、每个错误文件路径等信息<br><img src="images/6.jpg" width="50%" height="50%" /></p><h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><img src="images/7.jpg" width="80%" height="80%" /><img src="images/8.jpg" width="80%" height="80%" />]]></content>
      
      
      <categories>
          
          <category> eslint </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ast实际应用</title>
      <link href="/ypf-blog/2024/07/02/ast/ast%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/"/>
      <url>/ypf-blog/2024/07/02/ast/ast%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="esprima"><a href="#esprima" class="headerlink" title="esprima"></a>esprima</h1><p><strong>使用esprima解析器用法,将下面函数进行转换</strong></p><h2 id="实战1-函数名修改"><a href="#实战1-函数名修改" class="headerlink" title="实战1-函数名修改"></a>实战1-函数名修改</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>&#125;<br><span class="hljs-comment">// 转换为 函数名a变为b</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>) &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们先看下<a href="https://astexplorer.net/">astexplorer</a>的ast长什么样子<br><img src="images/1.jpg" width="80%" height="80%" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> esprima = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;esprima&quot;</span>); <span class="hljs-comment">// 最早ast的编译器</span><br><span class="hljs-keyword">const</span> estraverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;estraverse&quot;</span>); <span class="hljs-comment">// 遍历ast</span><br><span class="hljs-keyword">const</span> escodegen = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;escodegen&quot;</span>); <span class="hljs-comment">// ast生成代码</span><br><span class="hljs-keyword">let</span> code = <span class="hljs-string">`</span><br><span class="hljs-string">function a() &#123;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-comment">// 1.将代码转换成ast语法树</span><br><span class="hljs-keyword">let</span> ast = esprima.<span class="hljs-title function_">parseScript</span>(code);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ast)<br><br><span class="hljs-comment">// 2.遍历ast语法树(访问器)</span><br><span class="hljs-comment">// estraverse.traverse没有返回值,直接修改原来的的ast,同步操作</span><br><span class="hljs-comment">// ast遍历逻辑是: 遍历树,先进后出(从外面进去,从里面再出来), Program-&gt;FunctionDeclaration-&gt;Identifier(再走到leave的Identifier,即退出)-&gt;BlockStatement(再走到leave的BlockStatement,即退出)-&gt;....</span><br>estraverse.<span class="hljs-title function_">traverse</span>(ast, &#123;<br>  <span class="hljs-comment">// 进入节点</span><br>  <span class="hljs-title function_">enter</span>(<span class="hljs-params">node</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(node.<span class="hljs-property">type</span>, <span class="hljs-string">&quot;enter&quot;</span>);<br>    <span class="hljs-keyword">if</span> (node.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;FunctionDeclaration&quot;</span>) &#123;<br>      node.<span class="hljs-property">id</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;b&quot;</span>;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">//   退出节点</span><br>  <span class="hljs-title function_">leave</span>(<span class="hljs-params">node</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(node.<span class="hljs-property">type</span>, <span class="hljs-string">&quot;exit&quot;</span>);<br>  &#125;,<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ast.<span class="hljs-property">body</span>);<br><br><span class="hljs-comment">// 3.ast转换代码</span><br><span class="hljs-keyword">const</span> output = escodegen.<span class="hljs-title function_">generate</span>(ast);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(output);<br></code></pre></td></tr></table></figure><h3 id="代码转ast"><a href="#代码转ast" class="headerlink" title="代码转ast"></a>代码转ast</h3><p>打印结果如就是上面最开始用astexplorer查看的样子</p><h3 id="traverse"><a href="#traverse" class="headerlink" title="traverse"></a>traverse</h3><ul><li>estraverse是一个ast访问器,用来遍历ast语法树.</li><li>没有返回值,直接修改原来的的ast,同步操作,我们打印的<code>ast.body</code>如下图,已经修改了</li><li>ast遍历的顺序是先进后出(从外面进去,从里面再出来). 上面的函数大概步骤是<code>Program-&gt;FunctionDeclaration-&gt;Identifier(再走到leave的Identifier,即退出)-&gt;BlockStatement(再走到leave的BlockStatement,即退出)-&gt;....</code><br>如下图<img src="images/2.jpg" width="80%" height="80%" /></li></ul><h3 id="ast生成代码"><a href="#ast生成代码" class="headerlink" title="ast生成代码"></a>ast生成代码</h3><img src="images/3.jpg" width="80%" height="80%" /><h1 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h1><p>babel解析器核心:<code>@babel/core,实际其内部require了@babel/parser和@babel/traverse</code><br>使用babel解析器用法,将下面函数进行转换</p><h2 id="实战1-箭头函数转普通函数"><a href="#实战1-箭头函数转普通函数" class="headerlink" title="实战1-箭头函数转普通函数"></a>实战1-箭头函数转普通函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">const sum = (a, b) =&gt; a+b<br>转换为<br>const sum = function(a, b) &#123;<br>  return a+b<br>&#125;<br></code></pre></td></tr></table></figure><p>我们先看下<a href="https://astexplorer.net/">astexplorer</a>的ast长什么样子<br><img src="images/4.jpg" width="80%" height="80%" /><br>我们可以看到要转换为普通函数,要注意</p><ul><li>要新增了大括号节点(BlockStatement)+return节点(ReturnStatement),然后包裹老的二进制表达式(BinaryExpression)节点</li></ul><h3 id="babel-plugin-transform-es2015-arrow-functions"><a href="#babel-plugin-transform-es2015-arrow-functions" class="headerlink" title="babel-plugin-transform-es2015-arrow-functions"></a>babel-plugin-transform-es2015-arrow-functions</h3><p>我们先看下第三方插件转换结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> babel = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/core&quot;</span>);<br><span class="hljs-keyword">const</span> t = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/types&quot;</span>);<br><span class="hljs-keyword">const</span> transformArrowFunction = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;babel-plugin-transform-es2015-arrow-functions&quot;</span>); <span class="hljs-comment">// 箭头函数转普通函数</span><br><span class="hljs-comment">// 实现 将箭头函数转换为普通函数</span><br><span class="hljs-keyword">const</span> code = <span class="hljs-string">`</span><br><span class="hljs-string">  const sum = (a, b) =&gt; a+b</span><br><span class="hljs-string">`</span>;<br><span class="hljs-comment">// 代码转换</span><br><span class="hljs-keyword">const</span> result = babel.<span class="hljs-title function_">transform</span>(code, &#123;<br>  <span class="hljs-attr">plugins</span>: [transformArrowFunction], <span class="hljs-comment">// 插件</span><br>  <span class="hljs-attr">presets</span>: [], <span class="hljs-comment">// 预设(插件的集合)</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">code</span>);<br></code></pre></td></tr></table></figure><img src="images/5.jpg" width="80%" height="80%" /><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>现在我们来实现,修改上面代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> babel = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/core&quot;</span>);<br><span class="hljs-keyword">const</span> t = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/types&quot;</span>);<br><span class="hljs-comment">// 实现</span><br><span class="hljs-keyword">const</span> transformArrowFunction=&#123;<br>    <span class="hljs-attr">visitor</span>:&#123;<br>        <span class="hljs-title class_">ArrowFunctionExpression</span>(path)&#123; <span class="hljs-comment">// path-就是访问的路径树, 包含一层层父级</span><br>            <span class="hljs-keyword">const</span> &#123;node&#125; = path;<br>            <span class="hljs-comment">// 1. 修改type</span><br>            node.<span class="hljs-property">type</span>=<span class="hljs-string">&quot;FunctionExpression&quot;</span>; <span class="hljs-comment">// const sum = function (a, b) a + b;</span><br>            <span class="hljs-keyword">let</span> body = node.<span class="hljs-property">body</span>; <span class="hljs-comment">// 老节点的 a+b</span><br>            <span class="hljs-comment">// 原格式可以有大括号const sum = (a, b) =&gt; &#123;return a + b&#125;, 或者没有const sum = (a, b) =&gt; a + b</span><br>            <span class="hljs-comment">// 2.所以我们需要判断有没有大括号(注意,不需要判通过有没有return来判断,因为有大括号肯定有return;没有大括号,肯定没return)</span><br>            <span class="hljs-keyword">if</span>(!t.<span class="hljs-title function_">isBlockStatement</span>(body))&#123;<br>                <span class="hljs-comment">// 没有大括号,需要创建大括号节点(BlockStatement)+return节点(ReturnStatement)</span><br>                node.<span class="hljs-property">body</span> = t.<span class="hljs-title function_">blockStatement</span>([<br>                    <span class="hljs-comment">// t.expressionStatement(t.stringLiteral(&#x27;hello&#x27;)), </span><br>                    t.<span class="hljs-title function_">returnStatement</span>(body),<br>                ])<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 实现 将箭头函数转换为普通函数</span><br><span class="hljs-keyword">const</span> code = <span class="hljs-string">`</span><br><span class="hljs-string">  const sum = (a, b) =&gt; a+b</span><br><span class="hljs-string">`</span>;<br><span class="hljs-comment">// 代码转换</span><br><span class="hljs-keyword">const</span> result = babel.<span class="hljs-title function_">transform</span>(code, &#123;<br>  <span class="hljs-attr">plugins</span>: [transformArrowFunction], <span class="hljs-comment">// 插件</span><br>  <span class="hljs-attr">presets</span>: [], <span class="hljs-comment">// 预设(插件的集合)</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>上面逻辑很简单</p><ol><li>修改type为普通函数<code>FunctionExpression</code></li><li>判断有没有大括号,没有则创建大括号节点(BlockStatement)+return节点(ReturnStatement)</li></ol><p>上面是对原ast进行修改的,我们也可以生成一个新的ast直接<code>替换</code>旧的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> transformArrowFunction=&#123;<br>    <span class="hljs-attr">visitor</span>:&#123;<br>        <span class="hljs-title class_">ArrowFunctionExpression</span>(path)&#123;<br>            <span class="hljs-keyword">let</span> node=path.<span class="hljs-property">node</span><br>            <span class="hljs-keyword">let</span> params=node.<span class="hljs-property">params</span><br>            <span class="hljs-keyword">let</span> body;<br>            <span class="hljs-keyword">if</span>(!t.<span class="hljs-title function_">isBlockStatement</span>(node.<span class="hljs-property">body</span>))&#123;<br>                 body=t.<span class="hljs-title function_">blockStatement</span>([t.<span class="hljs-title function_">returnStatement</span>(node.<span class="hljs-property">body</span>)])<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                body=node.<span class="hljs-property">body</span><br>            &#125;<br>            <span class="hljs-comment">//t.functionExpression(id, params, body, generator, async);</span><br>            <span class="hljs-keyword">let</span> functionExpression=t.<span class="hljs-title function_">functionExpression</span>(<span class="hljs-literal">null</span>, params, body, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>            path.<span class="hljs-title function_">replaceWith</span>(functionExpression)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>直接创建一个es5节点进行替换<h2 id="实战2-箭头函数转普通函数this指向"><a href="#实战2-箭头函数转普通函数this指向" class="headerlink" title="实战2-箭头函数转普通函数this指向"></a>实战2-箭头函数转普通函数this指向</h2></li></ul><p>我们修改下转换前代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">aa</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>此时我们还是用第三方库<code>babel-plugin-transform-es2015-arrow-functions</code>转换下,可以看到下面结果<br><img src="images/6.jpg" width="80%" height="80%" /></p><p>我们知道:<code>箭头函数没有this,他的this就是会一层层往上找最近作用域的this</code><br>所以我们要实现</p><ol><li>在最近作用域创建<code>var _this = this;</code></li><li>修改箭头函数的所有用到this的地方为<code>_this</code></li></ol><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> babel = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/core&quot;</span>);<br><span class="hljs-keyword">const</span> t = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/types&quot;</span>);<br><span class="hljs-comment">// 实现上面transformArrowFunction插件</span><br><span class="hljs-keyword">const</span> transformArrowFunction = &#123;<br>  <span class="hljs-attr">visitor</span>: &#123;<br>    <span class="hljs-title class_">ArrowFunctionExpression</span>(path) &#123;<br>      <span class="hljs-keyword">const</span> &#123; node &#125; = path;<br>      <span class="hljs-comment">// 处理this问题</span><br>      <span class="hljs-title function_">processFunctionScope</span>(path);<br>      <span class="hljs-comment">// 转换为普通函数</span><br>      node.<span class="hljs-property">type</span> = <span class="hljs-string">&quot;FunctionExpression&quot;</span>; <span class="hljs-comment">// const sum = function (a, b) a + b; 此时存在括号问题</span><br>      <span class="hljs-keyword">let</span> body = node.<span class="hljs-property">body</span>; <span class="hljs-comment">// 老节点的 a+b</span><br>      <span class="hljs-comment">// 原格式可以有大括号或者const sum = (a, b) =&gt; &#123;return a + b&#125;, 没有const sum = (a, b) =&gt; a + b</span><br>      <span class="hljs-comment">// 所以我们需要判断有没有大括号(注意,不需要判通过有没有return来判断,因为有大括号肯定有return;没有大括号,肯定没return)</span><br>      <span class="hljs-keyword">if</span> (!t.<span class="hljs-title function_">isBlockStatement</span>(body)) &#123;<br>        <span class="hljs-comment">// 没有大括号,需要创建大括号节点(BlockStatement)+return节点(ReturnStatement)</span><br>        node.<span class="hljs-property">body</span> = t.<span class="hljs-title function_">blockStatement</span>([<br>          <span class="hljs-comment">// t.expressionStatement(t.stringLiteral(&#x27;hello&#x27;)),</span><br>          t.<span class="hljs-title function_">returnStatement</span>(body),<br>        ]);<br>      &#125;<br>    &#125;,<br>  &#125;,<br>&#125;;<br><span class="hljs-comment">// 处理作用范围</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getThisPaths</span>(<span class="hljs-params">path</span>) &#123;<br>  <span class="hljs-keyword">const</span> arr = []; <span class="hljs-comment">// 所有的this节点集合</span><br>  path.<span class="hljs-title function_">traverse</span>(&#123;<br>    <span class="hljs-comment">// this节点</span><br>    <span class="hljs-title class_">ThisExpression</span>(path) &#123;<br>      arr.<span class="hljs-title function_">push</span>(path);<br>    &#125;,<br>  &#125;);<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">processFunctionScope</span>(<span class="hljs-params">path</span>) &#123;<br>  <span class="hljs-comment">// 1. 查找父作用域</span><br>  <span class="hljs-comment">//   判断是函数且不是箭头函数,此时就是this的作用域 或者直接到根节点作用域(isProgram)</span><br>  <span class="hljs-keyword">const</span> thisEnv = path.<span class="hljs-title function_">findParent</span>(<span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      (path.<span class="hljs-title function_">isFunction</span>() &amp;&amp; !path.<span class="hljs-title function_">isArrowFunctionExpression</span>()) ||<br>      path.<span class="hljs-title function_">isProgram</span>()<br>    );<br>  &#125;);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(thisEnv.<span class="hljs-property">node</span>.<span class="hljs-property">id</span>);<br>  <span class="hljs-comment">//   2.创建var _this=this</span><br>  <span class="hljs-keyword">const</span> bindingThis = <span class="hljs-string">&quot;_this&quot;</span>;<br>  <span class="hljs-comment">//   找到所有的this进行替换_this,this的type是ThisExpression,可以去astexplorer查看</span><br>  <span class="hljs-keyword">const</span> thisPaths = <span class="hljs-title function_">getThisPaths</span>(path);<br>  thisPaths.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// this-&gt; _this</span><br>    path.<span class="hljs-title function_">replaceWith</span>(t.<span class="hljs-title function_">identifier</span>(bindingThis));<br>  &#125;);<br>  <span class="hljs-comment">//   3. 在上层作用域创建 var _this=this</span><br>  thisEnv.<span class="hljs-property">scope</span>.<span class="hljs-title function_">push</span>(&#123;<br>    <span class="hljs-attr">id</span>: t.<span class="hljs-title function_">identifier</span>(bindingThis),<br>    <span class="hljs-attr">init</span>: t.<span class="hljs-title function_">thisExpression</span>()<br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">const</span> code = <span class="hljs-string">`</span><br><span class="hljs-string">  function aa() &#123;</span><br><span class="hljs-string">      const sum = () =&gt; console.log(this)</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-comment">// 代码转换</span><br><span class="hljs-keyword">const</span> result = babel.<span class="hljs-title function_">transform</span>(code, &#123;<br>  <span class="hljs-attr">plugins</span>: [transformArrowFunction], <span class="hljs-comment">// 插件</span><br>  <span class="hljs-attr">presets</span>: [], <span class="hljs-comment">// 预设(插件的集合)</span><br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">code</span>);<br></code></pre></td></tr></table></figure><h3 id="找到箭头函数的上级作用域"><a href="#找到箭头函数的上级作用域" class="headerlink" title="找到箭头函数的上级作用域"></a>找到箭头函数的上级作用域</h3><ul><li>找作用域<code>processFunctionScope</code>: <strong>上级是函数且不是箭头函数</strong>或者是<strong>最外层根节点</strong></li><li>找到所有箭头函数用到this地方放到数组中: <code>getThisPaths</code>方法</li><li>遍历上面this数组,替换this为_this: <code>replaceWith</code>方法</li><li>在作用域上创建<code>var _this=this</code>: <code>scope.push</code>方法</li></ul><h2 id="实战3-预计算"><a href="#实战3-预计算" class="headerlink" title="实战3-预计算"></a>实战3-预计算</h2><blockquote><p><code>let delay= 2*3*4</code> 转换为 <code>let delay= 24</code>,  因为到浏览器端执行计算就会慢,可以在编译时就提前计算,到浏览器运行直接展示</p></blockquote><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> preCalculatePlugin= &#123;<br>  <span class="hljs-attr">visitor</span>: &#123;<br>    <span class="hljs-comment">// 节点是二进制表达式</span><br>    <span class="hljs-title class_">BinaryExpression</span>(path) &#123;<br>        <span class="hljs-keyword">let</span> node=path.<span class="hljs-property">node</span><br>        <span class="hljs-keyword">let</span> left=node.<span class="hljs-property">left</span><br>        <span class="hljs-keyword">let</span> right=node.<span class="hljs-property">right</span><br>        <span class="hljs-keyword">let</span> operator=node.<span class="hljs-property">operator</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;left&#x27;</span>,left.<span class="hljs-property">type</span>,left.<span class="hljs-property">value</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;right&#x27;</span>,right.<span class="hljs-property">type</span>,right.<span class="hljs-property">value</span>);<br>        <span class="hljs-keyword">if</span> (t.<span class="hljs-title function_">isNumericLiteral</span>(left) &amp;&amp; t.<span class="hljs-title function_">isNumericLiteral</span>(right)) &#123;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isNaN</span>(left.<span class="hljs-property">value</span>) &amp;&amp; !<span class="hljs-built_in">isNaN</span>(right.<span class="hljs-property">value</span>))&#123;<br>                <span class="hljs-keyword">let</span> value=<span class="hljs-built_in">eval</span>(left.<span class="hljs-property">value</span> + operator + right.<span class="hljs-property">value</span>)<br>                path.<span class="hljs-title function_">replaceWith</span>(t.<span class="hljs-title function_">numericLiteral</span>(value))<br>                <span class="hljs-comment">// 很重要, 因为如果不加, 执行到6 * 4 就结束了</span><br>                <span class="hljs-keyword">if</span>(path.<span class="hljs-property">parent</span>&amp;&amp;path.<span class="hljs-property">parent</span>.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;BinaryExpression&quot;</span>)&#123;<br>                    preCalculatePlugin.<span class="hljs-property">visitor</span>.<span class="hljs-property">BinaryExpression</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>,path.<span class="hljs-property">parentPath</span>)<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;,<br>  &#125;,<br>&#125;;<br><span class="hljs-keyword">const</span> result = babel.<span class="hljs-title function_">transform</span>(code, &#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    preCalculatePlugin,<br>  ],<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">code</span>);<br></code></pre></td></tr></table></figure><p>执行顺序是:<br><img src="images/7.jpg" width="80%" height="80%" /></p><h2 id="实战4-Class转换es5"><a href="#实战4-Class转换es5" class="headerlink" title="实战4-Class转换es5"></a>实战4-Class转换es5</h2><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> babel = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/core&quot;</span>);<br><span class="hljs-keyword">const</span> t = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/types&quot;</span>);<br><span class="hljs-keyword">const</span> generator = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>);<br><span class="hljs-comment">// const transformClassesPlugin = require(&quot;babel-plugin-transform-es2015-classes&quot;);</span><br><span class="hljs-comment">// https://babel.dev/docs/babel-types</span><br><span class="hljs-keyword">const</span> code = <span class="hljs-string">`</span><br><span class="hljs-string">class Person &#123;</span><br><span class="hljs-string">    constructor(name) &#123;</span><br><span class="hljs-string">        this.name = name;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    getName() &#123;</span><br><span class="hljs-string">        return this.name;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-comment">// 转为</span><br><span class="hljs-comment">// function Person (name) &#123;</span><br><span class="hljs-comment">//   this.name = name;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// Person.prototype.getName= function ()&#123;</span><br><span class="hljs-comment">//     return this.name;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-keyword">const</span> classPlugin = &#123;<br>  <span class="hljs-attr">visitor</span>: &#123;<br>    <span class="hljs-title class_">ClassDeclaration</span>(path) &#123;<br>      <span class="hljs-keyword">let</span> node = path.<span class="hljs-property">node</span>;<br>      <span class="hljs-keyword">let</span> id = node.<span class="hljs-property">id</span>;<br>      <span class="hljs-keyword">let</span> methods = node.<span class="hljs-property">body</span>.<span class="hljs-property">body</span>;<br>      <span class="hljs-keyword">let</span> expressions = [];<br>      methods.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">method</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (method.<span class="hljs-property">kind</span> === <span class="hljs-string">&quot;constructor&quot;</span>) &#123;<br>          <span class="hljs-keyword">let</span> functionDeclaration = t.<span class="hljs-title function_">functionDeclaration</span>(<br>            id,<br>            method.<span class="hljs-property">params</span>,<br>            method.<span class="hljs-property">body</span><br>          );<br>          expressions.<span class="hljs-title function_">push</span>(functionDeclaration);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.<span class="hljs-property">kind</span> === <span class="hljs-string">&quot;method&quot;</span>) &#123;<br>          <span class="hljs-keyword">let</span> expressionStatement = t.<span class="hljs-title function_">expressionStatement</span>(<br>            t.<span class="hljs-title function_">assignmentExpression</span>(<br>              <span class="hljs-string">&quot;=&quot;</span>,<br>              t.<span class="hljs-title function_">memberExpression</span>(<br>                t.<span class="hljs-title function_">memberExpression</span>(id, t.<span class="hljs-title function_">identifier</span>(<span class="hljs-string">&quot;prototype&quot;</span>)),<br>                method.<span class="hljs-property">key</span><br>              ),<br>              t.<span class="hljs-title function_">functionExpression</span>(<span class="hljs-literal">null</span>, method.<span class="hljs-property">params</span>, method.<span class="hljs-property">body</span>)<br>            )<br>          );<br>          expressions.<span class="hljs-title function_">push</span>(expressionStatement);<br>        &#125;<br>      &#125;);<br>      path.<span class="hljs-title function_">replaceWithMultiple</span>(expressions); <span class="hljs-comment">// 批量替换</span><br>    &#125;,<br>  &#125;,<br>&#125;;<br><span class="hljs-keyword">const</span> result = babel.<span class="hljs-title function_">transform</span>(code, &#123;<br>  <span class="hljs-attr">plugins</span>: [classPlugin],<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">code</span>);<br></code></pre></td></tr></table></figure><h2 id="实战5-babel-plugin-import按需加载"><a href="#实战5-babel-plugin-import按需加载" class="headerlink" title="实战5-babel-plugin-import按需加载"></a>实战5-babel-plugin-import按需加载</h2><blockquote><p><code>import &#123;flatten,concat&#125; from &#39;lodash&#39;</code>转换为<br><code>import flatten from &quot;lodash/flatten&quot;;import concat from &quot;lodash/concat&quot;;</code></p></blockquote><figure class="highlight js"><figcaption><span>[toggle]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> code = <span class="hljs-string">`</span><br><span class="hljs-string">import &#123;flatten,concat&#125; from &#x27;lodash&#x27;;</span><br><span class="hljs-string">`</span>;<br><span class="hljs-keyword">const</span> classPlugin = &#123;<br>  <span class="hljs-attr">visitor</span>: &#123;<br>    <span class="hljs-title class_">ImportDeclaration</span>(path) &#123;<br>      <span class="hljs-keyword">let</span> node = path.<span class="hljs-property">node</span>;<br>      <span class="hljs-keyword">let</span> id = node.<span class="hljs-property">id</span>;<br>      <span class="hljs-keyword">let</span> source = node.<span class="hljs-property">source</span>;<br>      <span class="hljs-keyword">let</span> specifiers = node.<span class="hljs-property">specifiers</span>;<br>      <span class="hljs-keyword">let</span> expressions = [];<br>      specifiers.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">specifier</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 判断下,否则下面又构造一个importDeclaration会导致死循环</span><br>        <span class="hljs-keyword">if</span> (specifier.<span class="hljs-property">type</span> === <span class="hljs-string">&quot;ImportSpecifier&quot;</span>) &#123;<br>          expressions.<span class="hljs-title function_">push</span>(<br>            t.<span class="hljs-title function_">importDeclaration</span>(<br>              [t.<span class="hljs-title function_">importDefaultSpecifier</span>(specifier.<span class="hljs-property">local</span>)],<br>              t.<span class="hljs-title function_">stringLiteral</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;source.value&#125;</span>/<span class="hljs-subst">$&#123;specifier.local.name&#125;</span>`</span>)<br>            )<br>          );<br>        &#125;<br>      &#125;);<br>      <span class="hljs-keyword">if</span>(expressions.<span class="hljs-property">length</span>)&#123;<br>          path.<span class="hljs-title function_">replaceWithMultiple</span>(expressions); <span class="hljs-comment">// 批量替换</span><br>      &#125;<br>    &#125;,<br>  &#125;,<br>&#125;;<br><span class="hljs-keyword">const</span> result = babel.<span class="hljs-title function_">transform</span>(code, &#123;<br>  <span class="hljs-attr">plugins</span>: [classPlugin],<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">code</span>);<br></code></pre></td></tr></table></figure><ul><li>因为lodash直接加载,会把所有包都加载进来,我们可以按上面方式实现按需加载</li><li>注意⚠️: 该方法的前提是组件<code>必须拆</code>出来一个个模块. lodash、ant、element、vant都是这样子的.</li><li>上面就是 <code>babel-plugin-import</code>的原理, 一般组件库实现按需都是这样拆出来一个个模块的.</li></ul><img src="images/8.jpg" width="50%" height="50%" />]]></content>
      
      
      <categories>
          
          <category> ast </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7.比对更新</title>
      <link href="/ypf-blog/2024/06/26/vue3%E6%BA%90%E7%A0%81/7.%E6%AF%94%E5%AF%B9%E6%9B%B4%E6%96%B0/"/>
      <url>/ypf-blog/2024/06/26/vue3%E6%BA%90%E7%A0%81/7.%E6%AF%94%E5%AF%B9%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../packages/runtime-dom/dist/@vue/runtime-dom.global.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue/3.3.4/vue.global.js&quot;&gt;&lt;/script&gt; --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> &#123; createApp, h, reactive &#125; = <span class="hljs-variable language_">window</span>.<span class="hljs-property">VueRuntimeDom</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">setup</span>(<span class="hljs-params">props</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> state = <span class="hljs-title function_">reactive</span>(&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;1&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">isShow</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">          state.<span class="hljs-property">isShow</span> = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">        &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">          state,</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">render</span>(<span class="hljs-params">proxy</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (proxy.<span class="hljs-property">state</span>.<span class="hljs-property">isShow</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> a = <span class="hljs-title function_">h</span>(</span><br><span class="language-javascript">            <span class="hljs-string">&quot;div&quot;</span>,</span><br><span class="language-javascript">            &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">style</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span>,</span><br><span class="language-javascript">              &#125;,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            [</span><br><span class="language-javascript">              <span class="hljs-title function_">h</span>(<span class="hljs-string">&quot;span&quot;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;A&quot;</span> &#125;, <span class="hljs-string">&quot;A&quot;</span>),</span><br><span class="language-javascript">              <span class="hljs-title function_">h</span>(<span class="hljs-string">&quot;span&quot;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;B&quot;</span> &#125;, <span class="hljs-string">&quot;B&quot;</span>),</span><br><span class="language-javascript">              <span class="hljs-title function_">h</span>(<span class="hljs-string">&quot;span&quot;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;C&quot;</span> &#125;, <span class="hljs-string">&quot;C&quot;</span>),</span><br><span class="language-javascript">              <span class="hljs-title function_">h</span>(<span class="hljs-string">&quot;span&quot;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;D&quot;</span> &#125;, <span class="hljs-string">&quot;D&quot;</span>),</span><br><span class="language-javascript">              <span class="hljs-title function_">h</span>(<span class="hljs-string">&quot;span&quot;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;E&quot;</span> &#125;, <span class="hljs-string">&quot;E&quot;</span>),</span><br><span class="language-javascript">              <span class="hljs-title function_">h</span>(<span class="hljs-string">&quot;span&quot;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;Q&quot;</span> &#125;, <span class="hljs-string">&quot;Q&quot;</span>),</span><br><span class="language-javascript">              <span class="hljs-title function_">h</span>(<span class="hljs-string">&quot;span&quot;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;F&quot;</span> &#125;, <span class="hljs-string">&quot;F&quot;</span>),</span><br><span class="language-javascript">              <span class="hljs-title function_">h</span>(<span class="hljs-string">&quot;span&quot;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;G&quot;</span> &#125;, <span class="hljs-string">&quot;G&quot;</span>),</span><br><span class="language-javascript">            ]</span><br><span class="language-javascript">          );</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, <span class="hljs-string">&quot;aaaa&quot;</span>);</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> a;</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">const</span> b = <span class="hljs-title function_">h</span>(</span><br><span class="language-javascript">            <span class="hljs-string">&quot;div&quot;</span>,</span><br><span class="language-javascript">            &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">style</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;blue&quot;</span>,</span><br><span class="language-javascript">              &#125;,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            [</span><br><span class="language-javascript">              <span class="hljs-title function_">h</span>(<span class="hljs-string">&quot;span&quot;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;A&quot;</span> &#125;, <span class="hljs-string">&quot;A&quot;</span>),</span><br><span class="language-javascript">              <span class="hljs-title function_">h</span>(<span class="hljs-string">&quot;span&quot;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;B&quot;</span> &#125;, <span class="hljs-string">&quot;B&quot;</span>),</span><br><span class="language-javascript">              <span class="hljs-title function_">h</span>(<span class="hljs-string">&quot;span&quot;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;E&quot;</span> &#125;, <span class="hljs-string">&quot;E&quot;</span>),</span><br><span class="language-javascript">              <span class="hljs-title function_">h</span>(<span class="hljs-string">&quot;span&quot;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;C&quot;</span> &#125;, <span class="hljs-string">&quot;C&quot;</span>),</span><br><span class="language-javascript">              <span class="hljs-title function_">h</span>(<span class="hljs-string">&quot;span&quot;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;D&quot;</span> &#125;, <span class="hljs-string">&quot;D&quot;</span>),</span><br><span class="language-javascript">              <span class="hljs-title function_">h</span>(<span class="hljs-string">&quot;span&quot;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;H&quot;</span> &#125;, <span class="hljs-string">&quot;H&quot;</span>),</span><br><span class="language-javascript">              <span class="hljs-title function_">h</span>(<span class="hljs-string">&quot;span&quot;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;F&quot;</span> &#125;, <span class="hljs-string">&quot;F&quot;</span>),</span><br><span class="language-javascript">              <span class="hljs-title function_">h</span>(<span class="hljs-string">&quot;span&quot;</span>, &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;G&quot;</span> &#125;, <span class="hljs-string">&quot;G&quot;</span>),</span><br><span class="language-javascript">            ]</span><br><span class="language-javascript">          );</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b, <span class="hljs-string">&quot;bbbb&quot;</span>);</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> b;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    <span class="hljs-comment">// a b c d e q f g</span></span><br><span class="language-javascript">    <span class="hljs-comment">// a b e c d h f g</span></span><br><span class="language-javascript">    <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>, &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">test</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">    &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="更新流程"><a href="#更新流程" class="headerlink" title="更新流程"></a>更新流程</h1><p>我们上节课讲过, <code>render函数是通过创建一个effect执行的</code>,所以当我们修改state后,会再次触发该state收集的effect函数执行, 拿到新的vnode,然后通过<code>patch</code>函数进行对比新老vnode进行vnode的el属性更新.<br><img src="images/1.jpg" width="80%"/></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">setupRenderEffect</span> = (<span class="hljs-params">instance, container</span>) =&gt; &#123;<br>    <span class="hljs-comment">// 创建effect, 在effect中调用render函数,这样render函数中获取数据就会收集这个effect</span><br>    <span class="hljs-title function_">effect</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">componentEffect</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 判断instance.isMounted: 是否挂载完成. 第一次肯定为false,否则为更新</span><br>        <span class="hljs-keyword">if</span> (!instance.<span class="hljs-property">isMounted</span>) &#123;<br>            <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&#x27;挂载&#x27;</span>)<br>            <span class="hljs-comment">// 渲染组件</span><br>            <span class="hljs-keyword">const</span> proxy = instance.<span class="hljs-property">proxy</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;执行render函数,并传入proxy且this也指向proxy&#x27;</span>)<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;const subTree =instance.render.call(instance.proxy, instance.proxy)&#x27;</span>)<br>            <span class="hljs-keyword">const</span> subTree = instance.<span class="hljs-property">subTree</span> = instance.<span class="hljs-property">render</span>.<span class="hljs-title function_">call</span>(proxy, proxy)<br>            <span class="hljs-comment">// 将render执行的结果再次patch即render渲染&#x27;, &#x27;patch(null, subTree, container)&#x27;</span><br>            <span class="hljs-title function_">patch</span>(<span class="hljs-literal">null</span>, subTree, container)<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;挂载完成修改标识位&#x27;</span>, <span class="hljs-string">&#x27;instance.isMounted = true&#x27;</span>)<br>            instance.<span class="hljs-property">isMounted</span> = <span class="hljs-literal">true</span> <span class="hljs-comment">// 组件挂载完成</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&#x27;更新&#x27;</span>)<br>            <span class="hljs-comment">// 比对旧和新</span><br>            <span class="hljs-keyword">const</span> prevTree = instance.<span class="hljs-property">subTree</span> <span class="hljs-comment">// 旧的vnode</span><br>            <span class="hljs-keyword">const</span> proxy = instance.<span class="hljs-property">proxy</span><br>            <span class="hljs-keyword">const</span> nextTree = instance.<span class="hljs-property">render</span>.<span class="hljs-title function_">call</span>(proxy, proxy) <span class="hljs-comment">// 执行获取新的vnode</span><br>            instance.<span class="hljs-property">subTree</span> = nextTree <span class="hljs-comment">// 更新为新的vnode</span><br>            <span class="hljs-title function_">patch</span>(prevTree, nextTree, container)<br>            <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfoEnd</span>()<br>        &#125;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfoEnd</span>()<br>    &#125;)<br>&#125;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">patch</span> = (<span class="hljs-params">n1, n2, container, anchor = <span class="hljs-literal">null</span></span>) =&gt; &#123;<br>    <span class="hljs-comment">// 针对不同类型的节点，做不同的处理 组件、元素、文本、注释</span><br>    <span class="hljs-keyword">let</span> &#123; shapeFlag, type &#125; = n2<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;判断type类型:&#x27;</span>, <span class="hljs-string">`type: <span class="hljs-subst">$&#123;type&#125;</span>`</span>, <span class="hljs-string">`shapeFlag: <span class="hljs-subst">$&#123;shapeFlag&#125;</span>`</span>)<br>    <span class="hljs-comment">// 比对</span><br>    <span class="hljs-keyword">if</span> (n1 &amp;&amp; !<span class="hljs-title function_">isSameVNodeType</span>(n1, n2)) &#123; <span class="hljs-comment">// 如果不是同一个元素,直接删除旧的,替换为新的</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;判断type不是同一个元素,直接删除旧的并n1=null,这样当patch时候,判断n1=null就是第一次挂载&#x27;</span>)<br>        <span class="hljs-comment">// 删除旧的</span><br>        <span class="hljs-title function_">unmount</span>(n1)<br>        n1 = <span class="hljs-literal">null</span><br>    &#125;<br>    <span class="hljs-keyword">switch</span> (type) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-title class_">Text</span>:<br>            <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&quot;是文本: 进行文本挂载&quot;</span>)<br>            <span class="hljs-title function_">processText</span>(n1, n2, container)<br>            <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfoEnd</span>()<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-attr">default</span>:<br>            <span class="hljs-comment">// 如果是元素</span><br>            <span class="hljs-keyword">if</span> (shapeFlag &amp; <span class="hljs-title class_">ShapeFlags</span>.<span class="hljs-property">ELEMENT</span>) &#123;<br>                <span class="hljs-comment">// 元素挂载</span><br>                <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&quot;是元素: 进行元素挂载&quot;</span>, <span class="hljs-string">&quot;processElement(n1, n2, container, anchor)&quot;</span>)<br>                <span class="hljs-title function_">processElement</span>(n1, n2, container, anchor)<br>                <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfoEnd</span>()<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (shapeFlag &amp; <span class="hljs-title class_">ShapeFlags</span>.<span class="hljs-property">STATEFUL_COMPONENT</span>) &#123; <span class="hljs-comment">// 如果是组件</span><br>                <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&quot;是组件: 进行组件挂载&quot;</span>)<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;执行: processComponent(n1, n2, container)函数. &#x27;</span>, <span class="hljs-string">&quot;n1-旧虚拟节点,n2-新虚拟节点,container-容器&quot;</span>)<br>                <span class="hljs-comment">// 组件挂载</span><br>                <span class="hljs-title function_">processComponent</span>(n1, n2, container)<br>                <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfoEnd</span>()<br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们梳理下流程</p><h2 id="如果不是同一个元素-直接卸载旧的-替换为新的"><a href="#如果不是同一个元素-直接卸载旧的-替换为新的" class="headerlink" title="如果不是同一个元素,直接卸载旧的,替换为新的"></a>如果不是同一个元素,直接卸载旧的,替换为新的</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">patch</span> = (<span class="hljs-params">n1, n2, container, anchor = <span class="hljs-literal">null</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (n1 &amp;&amp; !<span class="hljs-title function_">isSameVNodeType</span>(n1, n2)) &#123; <span class="hljs-comment">// 如果不是同一个元素,直接删除旧的</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;判断type不是同一个元素,直接删除旧的并n1=null,这样当patch时候,判断n1=null就是第一次挂载&#x27;</span>)<br>      <span class="hljs-comment">// 删除旧的</span><br>      <span class="hljs-title function_">unmount</span>(n1)<br>      n1 = <span class="hljs-literal">null</span> <span class="hljs-comment">// 因为为null,后面就会判定为第一次加载</span><br>  &#125;<br>  ...<br>  <span class="hljs-keyword">if</span> (shapeFlag &amp; <span class="hljs-title class_">ShapeFlags</span>.<span class="hljs-property">ELEMENT</span>) &#123;<br>      <span class="hljs-comment">// 元素挂载</span><br>      <span class="hljs-title function_">processElement</span>(n1, n2, container, anchor)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 判断新旧节点是否相同</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">isSameVNodeType</span> = (<span class="hljs-params">n1, n2</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> n1.<span class="hljs-property">type</span> === n2.<span class="hljs-property">type</span> &amp;&amp; n1.<span class="hljs-property">key</span> === n2.<span class="hljs-property">key</span><br>&#125;<br><span class="hljs-comment">// 卸载</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">unmount</span> = (<span class="hljs-params">vnode</span>) =&gt; &#123;<br>    <span class="hljs-title function_">hostRemove</span>(vnode.<span class="hljs-property">el</span>)<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">processElement</span> = (<span class="hljs-params">n1, n2, container, anchor</span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (n1 == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&quot;n1为null,第一次挂载&quot;</span>)<br>        <span class="hljs-comment">// 初始化(第一次挂载)</span><br>        <span class="hljs-title function_">mountElement</span>(n2, container, anchor)<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfoEnd</span>()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 更新</span><br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&quot;n1不为null,比对更新&quot;</span>)<br>        <span class="hljs-title function_">patchElement</span>(n1, n2, container, anchor)<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfoEnd</span>()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>上面判断type+key来保证不是同一个元素,不是的话直接卸载旧的</li><li>替换为新的: 因为将n1置为null,下面走到判断是元素-&gt;<code>元素挂载processElement(n1, n2, container, anchor)</code>-&gt;根据n1有没有值来判断是第一次挂载还是更新<h2 id="比对属性增删改-patchProps"><a href="#比对属性增删改-patchProps" class="headerlink" title="比对属性增删改 patchProps"></a>比对属性增删改 patchProps</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">patchElement</span> = (<span class="hljs-params">n1, n2, container, anchor</span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> el = (n2.<span class="hljs-property">el</span> = n1.<span class="hljs-property">el</span>)<br>    <span class="hljs-comment">// 比对属性-增删改</span><br>    <span class="hljs-keyword">const</span> oldProps = n1.<span class="hljs-property">props</span> || &#123;&#125;<br>    <span class="hljs-keyword">const</span> newProps = n2.<span class="hljs-property">props</span> || &#123;&#125;<br>    <span class="hljs-title function_">patchProps</span>(el, oldProps, newProps)<br>    <span class="hljs-comment">// 比对儿子</span><br>    <span class="hljs-title function_">patchChildren</span>(n1, n2, el)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="比对儿子-patchChildren"><a href="#比对儿子-patchChildren" class="headerlink" title="比对儿子 patchChildren"></a>比对儿子 patchChildren</h2>比对儿子存在4种情况</li></ul><ol><li>新的是文本</li></ol><ul><li>旧的是数组- 遍历卸载(删除)旧数组,设置新文本</li><li>旧的是文本- 对比不相同,直接设置新文本 </li></ul><ol start="2"><li>新的是数组</li></ol><ul><li>旧的是数组- 对比数组(最长递增子序列算法)</li><li>旧的是文本- 清空文本(设置文本为空),挂载新数组</li></ul><h3 id="新的是文本-旧的是数组"><a href="#新的是文本-旧的是数组" class="headerlink" title="新的是文本,旧的是数组"></a>新的是文本,旧的是数组</h3><blockquote><p>遍历卸载(删除)旧数组,设置新文本</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> prevShapeFlag = n1.<span class="hljs-property">shapeFlag</span> <span class="hljs-comment">// 旧的标识</span><br><span class="hljs-keyword">const</span> newShapeFlag = n2.<span class="hljs-property">shapeFlag</span> <span class="hljs-comment">// 新的标识</span><br><span class="hljs-keyword">if</span> (newShapeFlag &amp; <span class="hljs-title class_">ShapeFlags</span>.<span class="hljs-property">TEXT_CHILDREN</span>) &#123; <span class="hljs-comment">// 新的是文本</span><br>    <span class="hljs-keyword">if</span> (prevShapeFlag &amp; <span class="hljs-title class_">ShapeFlags</span>.<span class="hljs-property">ARRAY_CHILDREN</span>) &#123; <span class="hljs-comment">// 旧的是数组</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;旧的是数组,遍历数组卸载旧的&#x27;</span>)<br>        <span class="hljs-title function_">unmountChildren</span>(c1) <span class="hljs-comment">// 卸载旧的</span><br>    &#125;<br>    <span class="hljs-comment">// 旧的是数组/文本都要设置文本</span><br>    <span class="hljs-keyword">if</span> (c2 !== c1) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;判断新旧文本不同,设置新文本&#x27;</span>)<br>        <span class="hljs-title function_">hostSetElementText</span>(el, c2) <span class="hljs-comment">// 设置文本 如h(&#x27;div&#x27;,&#123;&#125;, &#x27;hello1&#x27;)=&gt;  h(&#x27;div&#x27;,&#123;&#125;, &#x27;hello2&#x27;)</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">unmountChildren</span> = (<span class="hljs-params">children</span>) =&gt; &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; children.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-title function_">unmount</span>(children[i])<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="新的是文本-旧的是文本"><a href="#新的是文本-旧的是文本" class="headerlink" title="新的是文本,旧的是文本"></a>新的是文本,旧的是文本</h3><blockquote><p>对比不相同,直接设置新文本<br>就是上面代码的逻辑</p></blockquote><h3 id="新的是数组-旧的是文本"><a href="#新的是数组-旧的是文本" class="headerlink" title="新的是数组,旧的是文本"></a>新的是数组,旧的是文本</h3><blockquote><p>清空文本(设置文本为空),挂载新数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (prevShapeFlag &amp; <span class="hljs-title class_">ShapeFlags</span>.<span class="hljs-property">ARRAY_CHILDREN</span>) &#123;  <span class="hljs-comment">// 旧的是数组</span><br>    <span class="hljs-keyword">if</span> (newShapeFlag &amp; <span class="hljs-title class_">ShapeFlags</span>.<span class="hljs-property">ARRAY_CHILDREN</span>) &#123;  <span class="hljs-comment">// 新的是数组 如h(&#x27;div&#x27;,&#123;&#125;, [h(&#x27;span&#x27;,&#123;&#125;,&#x27;hello1&#x27;)])=&gt;  h(&#x27;div&#x27;,&#123;&#125;, [h(&#x27;span&#x27;,&#123;&#125;,&#x27;hello2&#x27;)])</span><br>        <span class="hljs-title function_">patchKeyedChildren</span>(c1, c2, el)<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 旧的是文本,新的是数组 如h(&#x27;div&#x27;,&#123;&#125;, &#x27;hello1&#x27;)=&gt;  h(&#x27;div&#x27;,&#123;&#125;, [&#x27;hello2&#x27;])</span><br>    <span class="hljs-title function_">hostSetElementText</span>(el, <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">// 清空文本</span><br>    <span class="hljs-title function_">mountChildren</span>(c2, el) <span class="hljs-comment">// 挂载新数组 </span><br>&#125;<br><span class="hljs-comment">// 递归挂载</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mountChildren</span> = (<span class="hljs-params">children, container</span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;遍历children数组,如果遍历的元素是文本,创建文本虚拟dom,递归调用patch函数&#x27;</span>)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; children.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> child = <span class="hljs-title function_">normalizeVNode</span>(children[i])<br>        <span class="hljs-title function_">patch</span>(<span class="hljs-literal">null</span>, child, container)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="新的是数组-旧的是数组"><a href="#新的是数组-旧的是数组" class="headerlink" title="新的是数组,旧的是数组"></a>新的是数组,旧的是数组</h3><blockquote><p>对比数组(最长递增子序列算法)</p></blockquote><p>就是上面代码的逻辑 <code>patchKeyedChildren(c1, c2, el)</code>, 下面着重讲解</p><h2 id="新老都是数组"><a href="#新老都是数组" class="headerlink" title="新老都是数组"></a>新老都是数组</h2><p>核心点: 最长递增子序列+二分查找法</p><ul><li>正序头头对比,type和key一致就进行patch渲染,一旦不一样停止</li><li>开始倒序尾尾对比,type和key一致就进行patch渲染,一旦不一样停止</li><li>剩下乱序对比(最长递增子序列算法+二分查找法)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 比对数组</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">patchKeyedChildren</span> = (<span class="hljs-params">c1, c2, el</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span> <span class="hljs-comment">// 表示循环到哪个地方</span><br>  <span class="hljs-keyword">let</span> e1 = c1.<span class="hljs-property">length</span> - <span class="hljs-number">1</span> <span class="hljs-comment">// 旧的结束索引</span><br>  <span class="hljs-keyword">let</span> e2 = c2.<span class="hljs-property">length</span> - <span class="hljs-number">1</span> <span class="hljs-comment">// 新的结束索引</span><br>  <span class="hljs-comment">// 1. 正序头头对比</span><br>  <span class="hljs-comment">// 2. 倒序尾尾对比</span><br>  <span class="hljs-comment">// 3. 乱序对比</span><br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="正序头头对比"><a href="#正序头头对比" class="headerlink" title="正序头头对比"></a>正序头头对比</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 头部按序比对,type和key一致就进行patch渲染,一旦不一致跳出</span><br><span class="hljs-keyword">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) &#123;<br>    <span class="hljs-keyword">const</span> n1 = c1[i]<br>    <span class="hljs-keyword">const</span> n2 = c2[i]<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isSameVNodeType</span>(n1, n2)) &#123;<br>        <span class="hljs-title function_">patch</span>(n1, n2, el)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">break</span> <span class="hljs-comment">// 跳出后下面i++就不会执行了</span><br>    &#125;<br>    i++<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="倒序尾尾对比"><a href="#倒序尾尾对比" class="headerlink" title="倒序尾尾对比"></a>倒序尾尾对比</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 2. 尾部倒序比对,type和key一致就进行patch渲染,一旦不一致跳出</span><br><span class="hljs-keyword">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) &#123;<br>    <span class="hljs-keyword">const</span> n1 = c1[e1]<br>    <span class="hljs-keyword">const</span> n2 = c2[e2]<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isSameVNodeType</span>(n1, n2)) &#123;<br>        <span class="hljs-title function_">patch</span>(n1, n2, el)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">break</span><br>    &#125;<br>    e1--<br>    e2--<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>上面经过2轮对比,开头i,结尾e1,e2就会往中间靠拢,剩下的就是乱序即不一样的</strong></p><h3 id="剩下乱序对比"><a href="#剩下乱序对比" class="headerlink" title="剩下乱序对比"></a>剩下乱序对比</h3><p>存在3种情况:</p><ul><li>旧的长度少,新的多, 此时肯定要把多的新增(往前增或者往后增)</li><li>旧的长度多,新的少, 此时肯定要把多的删除</li><li>乱序(也会包含长度少,多的情况,只不过对比都不一样)</li></ul><h4 id="旧的长度少-新的多-把多的新增-往前增或者往后增"><a href="#旧的长度少-新的多-把多的新增-往前增或者往后增" class="headerlink" title="旧的长度少,新的多,把多的新增(往前增或者往后增)"></a>旧的长度少,新的多,把多的新增(往前增或者往后增)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 3. 旧的少新的多, 添加数据</span><br><span class="hljs-comment">// (a b)</span><br><span class="hljs-comment">// (a b) c</span><br><span class="hljs-comment">// i = 2, e1 = 1, e2 = 2</span><br><span class="hljs-comment">// (a b)</span><br><span class="hljs-comment">// c (a b)</span><br><span class="hljs-comment">// i = 0, e1 = -1, e2 = 0</span><br><span class="hljs-keyword">if</span> (i &gt; e1) &#123; <span class="hljs-comment">// 说明旧的肯定遍历完了,新的还有剩余</span><br>    <span class="hljs-keyword">if</span> (i &lt;= e2) &#123; <span class="hljs-comment">// 不和上面的if合并,因为旧的和新的比如都是 a, 这样就会走到乱序对比, 写到这走到第一层if,里面的if也不会走进去执行</span><br>        <span class="hljs-comment">// 头部添加还是尾部添加?</span><br>        <span class="hljs-keyword">const</span> nextPos = e2 + <span class="hljs-number">1</span><br>        <span class="hljs-comment">// 如果是前添加, e2+1一定&lt;c2.length</span><br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nextPos, c2.<span class="hljs-property">length</span>, <span class="hljs-string">&#x27;如果e2 + 1 &lt; c2.length,则是前添加,否则是后添加,因为序号&lt;自身长度,说明肯定倒序移动对比了,肯定是要插入某个元素前面&#x27;</span>, <span class="hljs-string">&#x27;const anchor = nextPos &lt; c2.length ? c2[nextPos].el : null&#x27;</span>)<br>        <span class="hljs-keyword">const</span> anchor = nextPos &lt; c2.<span class="hljs-property">length</span> ? c2[nextPos].<span class="hljs-property">el</span> : <span class="hljs-literal">null</span><br>        <span class="hljs-keyword">while</span> (i &lt;= e2) &#123;<br>            <span class="hljs-title function_">patch</span>(<span class="hljs-literal">null</span>, c2[i++], el, anchor)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>i &gt; e1</code>,说明旧的肯定遍历完了,此时如果<code>i&lt;=e2</code>说明新的还有剩余,所以把多的新增(往前增或者往后增), 往前需要锚点,往后需要锚点,直接添加到最后</li><li>判断前后: <code>如果e2 + 1 &lt; c2.length</code>,说明肯定倒序移动了才会e2变小,因为本身前面等式是相等的.此时锚点就是 e2+1,插入该元素前面. 为什么加1是因为, 遍历完多执行了一遍-1,所以加上才是最后一次遍历的位置.</li><li>最后遍历<code>i &lt;= e2</code>,进行patch</li></ul><h4 id="旧的长度多-新的少-把多的删除"><a href="#旧的长度多-新的少-把多的删除" class="headerlink" title="旧的长度多,新的少,把多的删除"></a>旧的长度多,新的少,把多的删除</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 4.旧的多新的少, 删除数据</span><br><span class="hljs-comment">// (a b) c</span><br><span class="hljs-comment">// (a b)</span><br><span class="hljs-comment">// i = 2, e1 = 2, e2 = 1</span><br><span class="hljs-comment">// a (b c)</span><br><span class="hljs-comment">// (b c)</span><br><span class="hljs-comment">// i = 0, e1 = 0, e2 = -1</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &gt; e2) &#123; <span class="hljs-comment">// 说明新的肯定遍历完了,旧的还有剩余</span><br>    <span class="hljs-keyword">while</span> (i &lt;= e1) &#123;<br>        <span class="hljs-title function_">unmount</span>(c1[i++])<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>i &gt; e2</code>,说明新的肯定遍历完了, 此时如果<code>i&lt;=e1</code>说明旧的还有剩余,所以把多的删除, 删除的时候不需要锚点,直接删除<code>i&lt;=e1</code>里面的元素即可</li></ul><h4 id="未知顺序-乱序"><a href="#未知顺序-乱序" class="headerlink" title="未知顺序(乱序)"></a>未知顺序(乱序)</h4><p>乱序中存在一部分新旧相同的节点,此时要去处理: <code>相同进行移动,剩下的再进行删除/新增</code><br>比如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">a b c<br>a c b<br>此时i=<span class="hljs-number">1</span>,e1=<span class="hljs-number">2</span>,e2=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h5 id="用剩下的新的创建新映射表"><a href="#用剩下的新的创建新映射表" class="headerlink" title="用剩下的新的创建新映射表"></a>用剩下的新的创建新映射表</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> s1 = i<br><span class="hljs-keyword">const</span> s2 = i<br><span class="hljs-keyword">const</span> newKeyIndexMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br><span class="hljs-comment">// 以新的数据创建一个映射表 build key:index map for newChildren</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = s2; i &lt;= e2; i++) &#123;<br>    newKeyIndexMap.<span class="hljs-title function_">set</span>(c2[i].<span class="hljs-property">key</span>, i)<br>&#125;<br></code></pre></td></tr></table></figure><p>此时newKeyIndexMap结果为  <code>Map(2) &#123;&#39;C&#39; =&gt; 1, &#39;B&#39; =&gt; 2&#125;</code></p><h5 id="遍历旧的-如果在新的映射表中也存在-则复用移动-如果不存在-则删除"><a href="#遍历旧的-如果在新的映射表中也存在-则复用移动-如果不存在-则删除" class="headerlink" title="遍历旧的,如果在新的映射表中也存在,则复用移动,如果不存在,则删除"></a>遍历旧的,如果在新的映射表中也存在,则复用移动,如果不存在,则删除</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> toBePatched = e2 - s2 + <span class="hljs-number">1</span> <span class="hljs-comment">// 乱序的个数</span><br><span class="hljs-keyword">const</span> oldNodeInNewNodePosIndexArray= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(toBePatched).<span class="hljs-title function_">fill</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = s1; i &lt;= e1; i++) &#123;<br>    <span class="hljs-keyword">const</span> oldChildVnode = c1[i]<br>    <span class="hljs-keyword">const</span> newIndex = newKeyIndexMap.<span class="hljs-title function_">get</span>(oldChildVnode.<span class="hljs-property">key</span>)<br>    <span class="hljs-keyword">if</span> (newIndex == <span class="hljs-literal">undefined</span>) &#123; <span class="hljs-comment">// 旧的在新的没有,删除</span><br>        <span class="hljs-title function_">unmount</span>(oldChildVnode)<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 旧的在新的有,复用移动</span><br>        oldNodeInNewNodePosIndexArray[newIndex - s2] = i + <span class="hljs-number">1</span> <span class="hljs-comment">// 新的数据在旧的数据的索引位置 +1</span><br>        <span class="hljs-title function_">patch</span>(oldChildVnode, c2[newIndex], el) <span class="hljs-comment">// 此时存在2个问题: 复用的元素没有移动、新创建的元素没有创建出来</span><br>    &#125;<br>&#125;<br>a b c<br>  <span class="hljs-number">3</span> <span class="hljs-number">2</span> 在新元素中的位置+<span class="hljs-number">1</span>,比如,b在新的元素中的位置是<span class="hljs-number">2</span>,c在新的元素中的位置是<span class="hljs-number">1</span>, 所以都+<span class="hljs-number">1</span>后是 <span class="hljs-number">3</span> <span class="hljs-number">2</span><br>a c b<br></code></pre></td></tr></table></figure><p>此时oldNodeInNewNodePosIndexArray结果为<code>[3, 2]</code></p><ul><li>遍历旧的,然后去新映射表里面找,找不到,就把旧的卸载</li><li>找到的话,定义一个数组<code>oldNodeInNewNodePosIndexArray</code>用于<strong>存储老的元素在新的元素中的位置</strong>,后面使用</li><li>oldNodeInNewNodePosIndexArray初始化的时候,是通过乱序的个数<code>e2 - s2 + 1</code>进行填充0, 为什么是 <code>e2 - s2 + 1</code>? 因为肯定以新的为基准,旧的不能为基准,旧的就算比新的多,多的也是要删除的.</li><li>最后进行对这些新老相同的节点,进行patch比对渲染<code>patch(oldChildVnode, c2[newIndex], el)</code></li></ul><p>此时仍存在2个问题:</p><ul><li>复用的元素只是patch进行递归对比了,但并没有移动</li><li>上面只对比了,旧的在新的不存在-删除,旧的在新的存在-复用, 但是新的还有一部分是新增的,没有创建出来</li></ul><h5 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h5>]]></content>
      
      
      <categories>
          
          <category> vue3源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>6.渲染(h、createApp)</title>
      <link href="/ypf-blog/2024/06/17/vue3%E6%BA%90%E7%A0%81/6.%E6%B8%B2%E6%9F%93(h%E3%80%81createApp)/"/>
      <url>/ypf-blog/2024/06/17/vue3%E6%BA%90%E7%A0%81/6.%E6%B8%B2%E6%9F%93(h%E3%80%81createApp)/</url>
      
        <content type="html"><![CDATA[<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/3.3.4/vue.global.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> &#123; createApp, h, reactive &#125; = <span class="hljs-variable language_">window</span>.<span class="hljs-property">Vue</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> <span class="hljs-title class_">App</span> = &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">setup</span>(<span class="hljs-params">props</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> state = <span class="hljs-title function_">reactive</span>(&#123;</span><br><span class="language-javascript">          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;1&quot;</span>,</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">          state,</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        <span class="hljs-comment">// 优先级高于外面的render函数</span></span><br><span class="language-javascript">        <span class="hljs-comment">//  return () =&gt; &#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//    return h(&#x27;div&#x27;, &#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//      style: &#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//        color: &#x27;red&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//      &#125;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//    &#125;, &#x27;hello world vue setup&#x27;,state.name)</span></span><br><span class="language-javascript">        <span class="hljs-comment">//  &#125;</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">render</span>(<span class="hljs-params">proxy</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy,<span class="hljs-variable language_">this</span>,proxy===<span class="hljs-variable language_">this</span>,<span class="hljs-number">888</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">state</span>,proxy.<span class="hljs-property">state</span>.<span class="hljs-property">name</span>,<span class="hljs-number">8888</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> a = <span class="hljs-title function_">h</span>(</span><br><span class="language-javascript">            <span class="hljs-string">&quot;div&quot;</span>,</span><br><span class="language-javascript">            &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">style</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;red&quot;</span>,</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-title function_">h</span>(<span class="hljs-string">&quot;span&quot;</span>, &#123;&#125;, [ <span class="hljs-title function_">h</span>(<span class="hljs-string">&quot;span&quot;</span>, &#123;&#125;, <span class="hljs-string">&quot;hello&quot;</span>), <span class="hljs-string">&quot;test&quot;</span> ] )</span><br><span class="language-javascript">        );</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, <span class="hljs-string">&quot;aaaa&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> a;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>, &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">test</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">    &#125;).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运行结果如下图:<br><img src="images/1.jpg" width="80%"/></p><ul><li>h函数: 用来创建虚拟节点</li><li>setup如果返回一个对象, 则会作为data属性使用;如果返回一个函数, 则会当成render函数使用,不会触发外层的render函数</li><li>render函数中的this以及参数proxy是一样的,都是组件实例对象(上下文)</li><li>createApp接收两个参数: 1.组件对象 2.组件的属性props, 返回一个对象,对象有一个方法mount,用来挂载组件</li></ul><p>下面我们通过渲染流程来讲解<strong>createApp和h函数</strong></p><h2 id="createApp"><a href="#createApp" class="headerlink" title="createApp"></a>createApp</h2><p><code>createApp(App, &#123;test: 1,&#125;).mount(&quot;#app&quot;)</code><br>createApp主要做了以下几件事情:</p><ol><li>定义渲染函数-render函数<ul><li>里面就是定义了render方法即render里面执行了patch方法 <code>patch(null, vnode, container) // 1.旧的虚拟节点 2.新的虚拟节点 3.容器</code>,该方法主要是将虚拟节点渲染到真实dom上(通过一些js操作dom的方法)</li></ul></li><li>定义了mount方法<ul><li>获取dom节点: <code>container = nodeOps.querySelector(container)</code></li><li>清空容器: <code>container.innerHTML = &#39;&#39;</code></li><li>挂载<ul><li>创建vnode: <code>let vnode=createVNode(rootComponent, rootProps)</code></li><li>执行上面的render方法进行渲染: <code>render(vnode, container)</code></li></ul></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">createApp</span> = (<span class="hljs-params">rootComponent, rootProps</span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> app = <span class="hljs-title function_">createRender</span>(rendererOptions)  <span class="hljs-comment">// 不同平台的渲染器</span><br>                    .<span class="hljs-title function_">createApp</span>(rootComponent, rootProps)<br>    <span class="hljs-keyword">let</span> &#123; mount &#125; = app<br>    app.<span class="hljs-property">mount</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">container</span>) &#123;<br>        container = nodeOps.<span class="hljs-title function_">querySelector</span>(container)<br>        container.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">// 挂载前清空容器</span><br>        <span class="hljs-title function_">mount</span>(container) <span class="hljs-comment">// 挂载 </span><br>    &#125;<br>    <span class="hljs-keyword">return</span> app<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createAppAPI</span>(<span class="hljs-params">render</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createApp</span>(<span class="hljs-params">rootComponent, rootProps</span>) &#123;<br>        <span class="hljs-keyword">let</span> app = &#123;<br>            <span class="hljs-attr">_component</span>: rootComponent,<br>            <span class="hljs-attr">_props</span>: rootProps,<br>            <span class="hljs-attr">_container</span>: <span class="hljs-literal">null</span>,<br>            <span class="hljs-title function_">mount</span>(<span class="hljs-params">container</span>) &#123;<br>                <span class="hljs-comment">// 1.创建vnode</span><br>                <span class="hljs-keyword">let</span> vnode = <span class="hljs-title function_">createVNode</span>(rootComponent, rootProps)<br>                <span class="hljs-comment">// 2.渲染</span><br>                <span class="hljs-title function_">render</span>(vnode, container)<br>                <span class="hljs-comment">// 保存容器</span><br>                app.<span class="hljs-property">_container</span> = container<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> app<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="images/2.jpg" width="80%"/><h2 id="创建组件vnode"><a href="#创建组件vnode" class="headerlink" title="创建组件vnode"></a>创建组件vnode</h2><p><strong>执行 let vnode = createVNode(rootComponent, rootProps)</strong><br><img src="images/3.jpg" width="80%"/></p><ul><li>createVNode函数中判断type是对象,说明是组件,构造了一个vnode对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">createVNode</span> = (<span class="hljs-params">type, props, children = []</span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> shapeFlag = <span class="hljs-number">0</span>  <span class="hljs-comment">// 标识是元素还是组件</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isString</span>(type)) &#123; <span class="hljs-comment">// 如果是字符串，那么就是元素</span><br>        shapeFlag = <span class="hljs-title class_">ShapeFlags</span>.<span class="hljs-property">ELEMENT</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isObject</span>(type)) &#123; <span class="hljs-comment">// 如果是对象，那么就是组件</span><br>        shapeFlag = <span class="hljs-title class_">ShapeFlags</span>.<span class="hljs-property">STATEFUL_COMPONENT</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> vnode = &#123;<br>        <span class="hljs-attr">__v_isVNode</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 标识是vnode</span><br>        type,<br>        props,<br>        children,<br>        <span class="hljs-attr">key</span>: props &amp;&amp; props.<span class="hljs-property">key</span>, <span class="hljs-comment">// diff会用到</span><br>        shapeFlag, <span class="hljs-comment">// 标识是元素还是组件</span><br>        <span class="hljs-attr">el</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// 挂载的dom节点</span><br>        <span class="hljs-attr">component</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// 组件实例</span><br>        <span class="hljs-attr">render</span>: <span class="hljs-literal">null</span> <span class="hljs-comment">// 组件的render函数</span><br>    &#125;<br>    <span class="hljs-comment">// 儿子标识</span><br>    <span class="hljs-title function_">normalizeChildren</span>(vnode, children)<br>    <span class="hljs-keyword">return</span> vnode<br>&#125;<br><span class="hljs-comment">// 儿子标识</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">normalizeChildren</span>(<span class="hljs-params">vnode, children</span>) &#123;<br>    <span class="hljs-keyword">let</span> type = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> (children == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 没有儿子</span><br>        children = <span class="hljs-literal">null</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isString</span>(children)) &#123; <span class="hljs-comment">// 文本节点</span><br>        type = <span class="hljs-title class_">ShapeFlags</span>.<span class="hljs-property">TEXT_CHILDREN</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isArray</span>(children)) &#123; <span class="hljs-comment">// 数组</span><br>        type = <span class="hljs-title class_">ShapeFlags</span>.<span class="hljs-property">ARRAY_CHILDREN</span><br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 插槽</span><br>        type = <span class="hljs-title class_">ShapeFlags</span>.<span class="hljs-property">SLOTS_CHILDREN</span><br>    &#125;<br>    vnode.<span class="hljs-property">shapeFlag</span> = vnode.<span class="hljs-property">shapeFlag</span> | type<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="执行createApp定义的render函数挂载组件"><a href="#执行createApp定义的render函数挂载组件" class="headerlink" title="执行createApp定义的render函数挂载组件"></a>执行createApp定义的render函数挂载组件</h2></li></ul><p><strong>执行 render(vnode, container)</strong><br><img src="images/4.jpg" width="80%"/></p><h3 id="判断节点类型是组件-进行组件挂载"><a href="#判断节点类型是组件-进行组件挂载" class="headerlink" title="判断节点类型是组件,进行组件挂载"></a>判断节点类型是组件,进行组件挂载</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 渲染</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">render</span> = (<span class="hljs-params">vnode, container</span>) =&gt; &#123;<br>    <span class="hljs-title function_">patch</span>(<span class="hljs-literal">null</span>, vnode, container) <span class="hljs-comment">// 1.旧的虚拟节点 2.新的虚拟节点 3.容器</span><br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">patch</span> = (<span class="hljs-params">n1, n2, container</span>) =&gt; &#123;<br>    <span class="hljs-comment">// 针对不同类型的节点，做不同的处理 组件、元素、文本、注释</span><br>    <span class="hljs-keyword">let</span> &#123; shapeFlag, type &#125; = n2<br>    <span class="hljs-keyword">switch</span> (type) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-title class_">Text</span>:<br>            <span class="hljs-title function_">processText</span>(n1, n2, container)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-attr">default</span>:<br>            <span class="hljs-keyword">if</span> (shapeFlag &amp; <span class="hljs-title class_">ShapeFlags</span>.<span class="hljs-property">ELEMENT</span>) &#123;  <span class="hljs-comment">// 如果是元素</span><br>                <span class="hljs-comment">// 元素挂载</span><br>                <span class="hljs-title function_">processElement</span>(n1, n2, container)<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (shapeFlag &amp; <span class="hljs-title class_">ShapeFlags</span>.<span class="hljs-property">STATEFUL_COMPONENT</span>) &#123; <span class="hljs-comment">// 如果是组件</span><br>                <span class="hljs-comment">// 组件挂载</span><br>                <span class="hljs-title function_">processComponent</span>(n1, n2, container)<br>            &#125;<br>    &#125;<br>&#125;<br>    <span class="hljs-comment">// 组件挂载</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">processComponent</span> = (<span class="hljs-params">n1, n2, container</span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (n1 == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 初始化(第一次挂载)</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;判断n1是空: 就是初始化第一次挂载&quot;</span>,n1)<br>        <span class="hljs-title function_">mountComponent</span>(n2, container)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 更新</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;判断n1不是空: 更新&quot;</span>,n1)<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mountComponent</span> = (<span class="hljs-params">initialVNode, container</span>) =&gt; &#123;<br>    <span class="hljs-comment">// 1.先有一个组件的实例对象 </span><br>    <span class="hljs-keyword">const</span> instance = initialVNode.<span class="hljs-property">component</span> = <span class="hljs-title function_">createComponentInstance</span>(initialVNode)<br>    <span class="hljs-comment">//  2.解析数据到组件实例对象 </span><br>    <span class="hljs-title function_">setupComponent</span>(instance)<br>    <span class="hljs-comment">// 3.创建一个effect让render函数执行 </span><br>    <span class="hljs-title function_">setupRenderEffect</span>(instance, container)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="创建组件实例"><a href="#创建组件实例" class="headerlink" title="创建组件实例"></a>创建组件实例</h4><img src="images/5.jpg" width="80%"/><h4 id="将vnode的属性值赋值到组件实例对象上"><a href="#将vnode的属性值赋值到组件实例对象上" class="headerlink" title="将vnode的属性值赋值到组件实例对象上"></a>将vnode的属性值赋值到组件实例对象上</h4><img src="images/6.jpg" width="80%"/><h3 id="创建effect让render函数执行"><a href="#创建effect让render函数执行" class="headerlink" title="创建effect让render函数执行"></a>创建effect让render函数执行</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">setupRenderEffect</span> = (<span class="hljs-params">instance, container</span>) =&gt; &#123;<br>     <span class="hljs-comment">// 创建effect, 在effect中调用render函数,这样render函数中获取数据就会收集这个effect</span><br>     <span class="hljs-title function_">effect</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">componentEffect</span>(<span class="hljs-params"></span>) &#123;<br>         <span class="hljs-keyword">if</span> (!instance.<span class="hljs-property">isMounted</span>) &#123;<br>             <span class="hljs-comment">// 渲染组件</span><br>             <span class="hljs-keyword">const</span> proxy = instance.<span class="hljs-property">proxy</span><br>             <span class="hljs-keyword">const</span> subTree = instance.<span class="hljs-property">render</span>.<span class="hljs-title function_">call</span>(proxy, proxy)<br>             <span class="hljs-title function_">patch</span>(<span class="hljs-literal">null</span>, subTree, container) <br>             instance.<span class="hljs-property">isMounted</span> = <span class="hljs-literal">true</span> <span class="hljs-comment">// 组件挂载完成</span><br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>             <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;更新&#x27;</span>)<br>         &#125;<br>     &#125;)<br> &#125;<br></code></pre></td></tr></table></figure><h4 id="执行render方法"><a href="#执行render方法" class="headerlink" title="执行render方法"></a>执行render方法</h4><img src="images/7.jpg" width="80%"/><h4 id="将render返回的vnode渲染到页面上"><a href="#将render返回的vnode渲染到页面上" class="headerlink" title="将render返回的vnode渲染到页面上"></a>将render返回的vnode渲染到页面上</h4><img src="images/8.jpg" width="80%"/><h4 id="修改标识位isMounted"><a href="#修改标识位isMounted" class="headerlink" title="修改标识位isMounted"></a>修改标识位isMounted</h4><p><code>instance.isMounted = true; // 组件挂载完成</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>流程比较长,需要对照着代码理解</p><ol><li>createApp()方法定义渲染函数-render函数</li><li>调用$mount()方法执行<ul><li>获取dom节点: <code>container = nodeOps.querySelector(container)</code></li><li>清空容器: <code>container.innerHTML = &#39;&#39;</code></li><li>挂载<ul><li>创建组件vnode: <code>let vnode=createVNode(rootComponent, rootProps)</code></li><li>执行上面的render方法进行渲染: <code>render(vnode, container)</code>,render内部即<code>patch(null, vnode, container) // 1.旧的虚拟节点 2.新的虚拟节点 3.容器</code></li></ul></li></ul></li><li>创建组件vnode<ul><li>定义vnode结构,以及type标识shapeFlag是组件/元素字符串等</li><li>执行上面的render方法-&gt;patch函数-&gt;通过shapeFlag判断是组件执行组件挂载mountComponent</li></ul></li><li>组件挂载mountComponent<ul><li>创建组件实例. <code>createComponentInstance(上面的vnode)</code></li><li>解析数据到组件实例对象: 将vnode的属性值赋值到组件实例对象上. <ul><li>1.先将props、data、children赋值到实例上 </li><li>2.在instance上绑定proxy用于代理ctx上下文,当获取属性时候直接返回,如proxy.state.name即返回instance.ctx._.setupState[key] . <code>instance.proxy = new Proxy(instance.ctx, componentPublicInstance as any)</code></li><li>3.判断setup返回值,如果是函数则赋值到instance.render,如果是对象就是data,否则instance绑定外层的render, 没有没有render且有template,编译template,也就是说render优先级&gt;template</li></ul></li><li>创建一个effect让instance.render函数执行 </li></ul></li><li>创建一个effect让instance.render函数执行,使其响应式.此时的effect为渲染effect<ul><li>判断instance.isMounted: 是否挂载完成. 第一次肯定为false,否则为更新</li><li>执行instance.render,并传入instance.proxy且this也指向instance.proxy<ul><li>render里面就是h函数,相当于调用createVNode创建vdom</li><li>对render返回的vdom进行patch操作,将vdom渲染到页面上(判断是元素、文本、组件等)</li></ul></li><li>还原标志位 <code>instance.isMounted = true</code>; // 组件挂载完成</li></ul></li><li>effect出栈</li></ol><h2 id="h函数"><a href="#h函数" class="headerlink" title="h函数"></a>h函数</h2><p>h函数就是createVNode函数, h函数内部就是调用了createVNode函数 <a href="https://cn.vuejs.org/api/render-function.html#h">h函数</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 除了 type 外，其他参数都是可选的</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">h</span>(<span class="hljs-params">type, props, children</span>) &#123;<br>  ...<br>  ...<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">createVNode</span>(type, props, children)<br>&#125;<br><span class="hljs-comment">// 创建原生元素：</span><br><span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br><span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;div&#x27;</span>, &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;foo&#x27;</span> &#125;)<br><br><span class="hljs-comment">// attribute 和 property 都可以用于 prop</span><br><span class="hljs-comment">// Vue 会自动选择正确的方式来分配它</span><br><span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;div&#x27;</span>, &#123; <span class="hljs-attr">class</span>: <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-attr">innerHTML</span>: <span class="hljs-string">&#x27;hello&#x27;</span> &#125;)<br><br><span class="hljs-comment">// class 与 style 可以像在模板中一样</span><br><span class="hljs-comment">// 用数组或对象的形式书写</span><br><span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;div&#x27;</span>, &#123; <span class="hljs-attr">class</span>: [foo, &#123; bar &#125;], <span class="hljs-attr">style</span>: &#123; <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span> &#125; &#125;)<br><br><span class="hljs-comment">// 事件监听器应以 onXxx 的形式书写</span><br><span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;div&#x27;</span>, &#123; <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125; &#125;)<br><br><span class="hljs-comment">// children 可以是一个字符串</span><br><span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;div&#x27;</span>, &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;foo&#x27;</span> &#125;, <span class="hljs-string">&#x27;hello&#x27;</span>)<br><br><span class="hljs-comment">// 没有 prop 时可以省略不写</span><br><span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;div&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>)<br><span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;div&#x27;</span>, [<span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;span&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>)])<br><br><span class="hljs-comment">// children 数组可以同时包含 vnode 和字符串</span><br><span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;div&#x27;</span>, [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;span&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>)])<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">创建组件：<br><span class="hljs-comment">// 传递 prop</span><br><span class="hljs-title function_">h</span>(<span class="hljs-title class_">Foo</span>, &#123;<br>  <span class="hljs-comment">// 等价于 some-prop=&quot;hello&quot;</span><br>  <span class="hljs-attr">someProp</span>: <span class="hljs-string">&#x27;hello&#x27;</span>,<br>  <span class="hljs-comment">// 等价于 @update=&quot;() =&gt; &#123;&#125;&quot;</span><br>  <span class="hljs-attr">onUpdate</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;<br>&#125;)<br><br><span class="hljs-comment">// 传递单个默认插槽</span><br><span class="hljs-title function_">h</span>(<span class="hljs-title class_">Foo</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-string">&#x27;default slot&#x27;</span>)<br><br><span class="hljs-comment">// 传递具名插槽</span><br><span class="hljs-comment">// 注意，需要使用 `null` 来避免</span><br><span class="hljs-comment">// 插槽对象被当作是 prop</span><br><span class="hljs-title function_">h</span>(<span class="hljs-title class_">MyComponent</span>, <span class="hljs-literal">null</span>, &#123;<br>  <span class="hljs-attr">default</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-string">&#x27;default slot&#x27;</span>,<br>  <span class="hljs-attr">foo</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;div&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>),<br>  <span class="hljs-attr">bar</span>: <span class="hljs-function">() =&gt;</span> [<span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;span&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>), <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;span&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>)]<br>&#125;)<br></code></pre></td></tr></table></figure><p>所以:</p><ul><li>第一个参数type: 组件或者原生标签</li><li>第二个参数props: 属性、children、默认插槽</li><li>第三个参数children: 子节点,可以为数组、字符串、具名插槽,数组中可以是h函数、字符串</li></ul><p><strong>createApp函数只能传前2个参数,type是组件,第二个参数是组件的属性</strong></p>]]></content>
      
      
      <categories>
          
          <category> vue3源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js操作(运算)符</title>
      <link href="/ypf-blog/2024/06/03/javascript/js%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
      <url>/ypf-blog/2024/06/03/javascript/js%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><blockquote><p>运算符(operator)也被称为操作符，是用于实现赋值、比较和执行计算数运算等 功能的符号</p></blockquote><ul><li>算数运算符, 如+ - * / %</li><li>比较运算符, 如== === != !== &gt; &lt; &gt;= &lt;=</li><li>逻辑运算符, 如&amp;&amp; || !</li><li>位运算符, 如&amp; | ^ ~ &lt;&lt; &gt;&gt;</li><li>赋值运算符, 如= += -= *= /= %=</li></ul><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p><a href="https://www.w3school.com.cn/js/js_bitwise.asp">w3school</a></p><blockquote><p>位操作符逻辑上可能要复杂一点因为我们习惯了使用十进制，而位操作符是<strong>基于二进制</strong>. 由于机器更容易理解二进制语言，所以使用二进制的目的是提高运算速度。  </p></blockquote><ul><li><code>内存占用减少</code>: 二进制占用空间比十进制小很多。因此相比于使用多个布尔变量或整数，它能够显著减少内存占用。</li><li><code>性能提升</code>: 位运算符比普通运算符快很多，因为位运算符是直接操作二进制，而普通运算符是先转换成二进制，然后再进行运算。</li></ul><ol><li>位与操作符：表示为 a&amp;b，计算法则是先把a,b转换成二进制，对齐，然后对a,b的同一位置进行比较，比较规则是 <strong>如果两位都是 1 则设置每位为 1</strong>。 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">5</span> &amp; <span class="hljs-number">3</span>; <span class="hljs-comment">// 0101 &amp; 0011 = 0001 -&gt;1</span><br></code></pre></td></tr></table></figure></li><li>位或操作符：表示为a|b,计算法则是先把a,b转换成二进制，对齐，然后对a,b的同一位置进行比较，比较规则是 <strong>如果两位之一为 1 则设置每位为 1</strong>。 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">5</span> | <span class="hljs-number">3</span> <span class="hljs-comment">// 0101 | 0011 = 0111 -&gt;7</span><br></code></pre></td></tr></table></figure></li><li>位非操作符：表示为 ~a 理解起来很简单就是转为二进制然后每一位这样操作如果是0换成1如果是1换成0，规则是 <strong>反转所有位</strong>。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">~<span class="hljs-number">5</span>; <span class="hljs-comment">// ~0101 = 1010 -&gt;10</span><br></code></pre></td></tr></table></figure></li><li>异或操作符：表示为a^b, 计算法则是先把a,b转换成二进制，对齐，然后对a,b的同一位置进行比较，比较规则是 <strong>如果两位只有一位为 1 则设置每位为 1</strong><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">5</span>^<span class="hljs-number">3</span> <span class="hljs-comment">// 0101 ^ 0011 = 0110 -&gt;6</span><br></code></pre></td></tr></table></figure></li><li>零填充左位移(左移)操作符：表示为a&lt;&lt;b,计算法则是把a转换成二进制，然后把二进制<strong>后面</strong>加b个0 (通过从右推入零向左位移，并使最左边的位脱落)。 <strong>一般左移一位都相当于乘以2的1次方，左移n位就相当于乘以2的n次方</strong>。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">3</span>; <span class="hljs-comment">// 0000 0000 0001 往左移动3位,结果为1000 -&gt; 8 相当于 1*2^3=8</span><br><span class="hljs-number">3</span> &lt;&lt; <span class="hljs-number">3</span>  <span class="hljs-comment">// 0000 0000 0011 往左移动3位,结果为11000 -&gt; 24 相当于 3*2^3=24</span><br></code></pre></td></tr></table></figure></li><li>右移操作符：表示为a&gt;&gt;b，计算法则是把a转换成二进制，然后把二进制<strong>前面</strong>加b个0. <strong>一般右移一位相当于除2，右移n位相当于除以2的n次方,取整</strong><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">8</span> &gt;&gt; <span class="hljs-number">2</span>; <span class="hljs-comment">// 1000 往右移动2位,结果为0010-&gt;2 相当于8/2^2=2</span><br><span class="hljs-number">100</span> &gt;&gt; <span class="hljs-number">4</span>; <span class="hljs-comment">// 1100100 往右移动4位,结果为0000110,结果为2+4=6 相当于100/2^4=6</span><br></code></pre></td></tr></table></figure></li><li>零填充右位移操作符: 表示为a&gt;&gt;&gt;b,即去除后面b位，然后往前面补0。规则是 <strong>通过从左推入零来向右位移，并使最右边的位脱落。</strong><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">5</span> &gt;&gt;&gt; <span class="hljs-number">3</span>; <span class="hljs-comment">// 0101 &gt;&gt;&gt; 3 = 0000 -&gt;0</span><br><span class="hljs-number">5</span> &gt;&gt;&gt; <span class="hljs-number">1</span>; <span class="hljs-comment">// 0101 &gt;&gt;&gt; 1 = 0010 -&gt;2</span><br></code></pre></td></tr></table></figure>除了以上用法，位操作符还可以用来：</li></ol><ul><li>两个数做交换：c=a^b, a=c^a, b=c^b.</li><li>判断两个数是否相等：a^b=0则a=b。</li></ul><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><ul><li>二进制-&gt;十进制：如1101，就是：1<em>2^0 + 0</em>2^1 + 1<em>2^2 + 1</em>2^3 = 13</li><li>十进制-&gt;二进制：就是除2取余，然后倒序输出。比如 13/2 = 6, <strong>余数是1</strong>, 6/2 = 3, <strong>余数是0</strong>, 3/2 = 1, <strong>余数是1</strong>, 1/2 = 0, <strong>余数是1</strong>, 倒序输出就是 1101</li></ul><p><strong>注意: 任意非0的0次方都是1, 讨论0的0次方是无意义的。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 十进制转二进制</span><br>(<span class="hljs-number">13</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// 1101</span><br><span class="hljs-comment">// 二进制转十进制, parseInt:解析参数,返回指定参数进制的十进制</span><br><span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;1101&#x27;</span>,<span class="hljs-number">2</span>) <span class="hljs-comment">// 13</span><br><span class="hljs-comment">// 字面量前缀 </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Ob1101</span>) <span class="hljs-comment">// 13</span><br></code></pre></td></tr></table></figure><img src="images/1.jpg" width="80%"/><blockquote><p><a href="https://zhuanlan.zhihu.com/p/90618809">JavaScript 中的位运算和权限设计</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>5.computed</title>
      <link href="/ypf-blog/2024/05/31/vue3%E6%BA%90%E7%A0%81/5.computed/"/>
      <url>/ypf-blog/2024/05/31/vue3%E6%BA%90%E7%A0%81/5.computed/</url>
      
        <content type="html"><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>computed是通过ComputedRefImpl类生成, 具有以下特点<br>1.没有使用,不会执行<br>2.具有缓存机制, 多次调用只执行一次<br>3.具有依赖收集,当依赖的值发生变化时,才会重新执行<br>4.要修改计算属性的值，相当于修改计算属性的依赖变量,set的参数就是传入的值</p></blockquote><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; ref, computed &#125; = <span class="hljs-variable language_">window</span>.<span class="hljs-property">Vue</span>;<br><span class="hljs-keyword">const</span> age = <span class="hljs-title function_">ref</span>(<span class="hljs-number">18</span>);<br><span class="hljs-keyword">const</span> myAge = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;缓存&#x27;</span>); <span class="hljs-comment">// 具有缓存(核心是_dirty属性),只执行一次</span><br>  <span class="hljs-keyword">return</span> age.<span class="hljs-property">value</span> + <span class="hljs-number">1</span>;<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myAge.<span class="hljs-property">value</span>,myAge); <span class="hljs-comment">// 19</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myAge.<span class="hljs-property">value</span>); <span class="hljs-comment">// 19</span><br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><img src="images/1.jpg" width="80%"/><p>上面例子可以看出:</p><ul><li>具有缓存机制, 多次调用只执行一次</li><li>通过ComputedRefImpl类生成</li><li>如果不调用, 是不会执行的</li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myAge = <span class="hljs-title function_">computed</span>(&#123;<br>  <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;缓存&#x27;</span>); <span class="hljs-comment">// 具有缓存(核心是_dirty属性),只执行一次</span><br>    <span class="hljs-keyword">return</span> age.<span class="hljs-property">value</span> + <span class="hljs-number">1</span>;<br>  &#125;,<br>  <span class="hljs-title function_">set</span>(<span class="hljs-params">val</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;set&#x27;</span>,val);<br>    age.<span class="hljs-property">value</span> = val;<br>  &#125;<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myAge.<span class="hljs-property">value</span>,myAge); <br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  myAge.<span class="hljs-property">value</span> = <span class="hljs-number">100</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myAge.<span class="hljs-property">value</span>); <br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><img src="images/2.jpg" width="80%"/>上面例子可以看出:<ul><li>要修改计算属性的值，相当于修改计算属性的依赖变量,set的参数就是传入的值</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="定义computed函数"><a href="#定义computed函数" class="headerlink" title="定义computed函数"></a>定义computed函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 新建packages/reactivity/src/computed.ts</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">computed</span>(<span class="hljs-params">getterOrOptions</span>) &#123;<br>    <span class="hljs-comment">// 函数、对象</span><br>    <span class="hljs-keyword">let</span> getter; <span class="hljs-comment">// 获取值</span><br>    <span class="hljs-keyword">let</span> setter; <span class="hljs-comment">// 设置值</span><br>    <span class="hljs-keyword">const</span> onlyGetter = <span class="hljs-title function_">isFunction</span>(getterOrOptions); <span class="hljs-comment">// 是否只有getter</span><br>    <span class="hljs-keyword">if</span> (onlyGetter) &#123;<br>        getter = getterOrOptions;<br>        setter =<br>            <span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&#x27;Write operation failed: computed value is readonly&#x27;</span>);<br>            &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        getter = getterOrOptions.<span class="hljs-property">get</span>;<br>        setter = getterOrOptions.<span class="hljs-property">set</span>;<br>    &#125;<br>    <span class="hljs-comment">// 创建一个计算属性</span><br>    <span class="hljs-keyword">const</span> cRef = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComputedRefImpl</span>(getter, setter);<br>    <span class="hljs-keyword">return</span> cRef;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>梳理下逻辑:</p><ul><li>定义getter、setter, 判断传过来的参数是否只有函数,是的话,setter函数<strong>直接提示不能修改,只读</strong></li><li>不是的的话,分别赋值为参数的get、set</li><li>创建一个计算属性(生成实例)<code>cRef=new ComputedRefImpl(getter, setter)</code></li></ul><h3 id="ComputedRefImpl类"><a href="#ComputedRefImpl类" class="headerlink" title="ComputedRefImpl类"></a>ComputedRefImpl类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ComputedRefImpl</span> &#123;<br>    public _dirty = <span class="hljs-literal">true</span>;<br>    public _value;<br>    public effect;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">getter, private readonly setter</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">effect</span> = <span class="hljs-title function_">effect</span>(getter, &#123;<br>            <span class="hljs-attr">lazy</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-comment">// 修改值时触发(trigger)</span><br>            <span class="hljs-attr">scheduler</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">_dirty</span>) &#123;<br>                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_dirty</span> = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">value</span>() &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_dirty</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_value</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">effect</span>();<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_dirty</span> = <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_value</span>;<br>    &#125;<br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">value</span>(<span class="hljs-params">newValue</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setter</span>(newValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 修改packages/reactivity/src/effect.ts</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">trigger</span>(<span class="hljs-params">target, type, key, value?, oldValue?</span>) &#123;<br>  ...<br>  effectSet.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">effect: any</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// effect();</span><br>      <span class="hljs-comment">// 如果effect是scheduler,则执行scheduler,scheduler意思是调度,调度是什么意思?调度是指在合适的时机执行某个操作 </span><br>      <span class="hljs-keyword">if</span> (effect.<span class="hljs-property">options</span>.<span class="hljs-property">scheduler</span>) &#123;<br>          effect.<span class="hljs-property">options</span>.<span class="hljs-title function_">scheduler</span>(effect);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-title function_">effect</span>();<br>      &#125;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>梳理下逻辑:</p><ul><li>_dirty表示是否重新计算值, true-执行 false-不执行, 默认为true</li><li>getter就是computed传过来的函数, 在类的constructor中初始化,传入effect中, lazy为true就是 <strong>没有使用,不会执行</strong>,scheduler用来修改数据时候重置标志位</li><li>当获取computed的值时候, 触发get函数,第一次_dirty为true,就会执行,后面再次获取,因为_dirty为false,就不会执行</li><li>当修改computed的值时候, 直接触发传过来的setter函数,里面是修改依赖项的值,触发trigger, 判断是computed的effect(即effect.options.scheduler存在),执行就修改了标志位_dirty=true,当我们再次获取computed的值时候,触发get函数,_dirty为true,就会执行</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们再结合effect和例子完整梳理一下流程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> age = <span class="hljs-title function_">ref</span>(<span class="hljs-number">18</span>);<br><span class="hljs-keyword">const</span> myAge = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> age.<span class="hljs-property">value</span> + <span class="hljs-number">1</span>;<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myAge.<span class="hljs-property">value</span>)<br></code></pre></td></tr></table></figure><ol><li><p><code>const myAge=computed(...)</code>定义了一个computed–&gt;判断是否是函数,通过getter、setter存储参数–&gt; <code>new ComputedRefImpl(getter, setter)生成实例</code>–&gt;<code>constructor</code>执行了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">effect</span> = <span class="hljs-title function_">effect</span>(getter, &#123;<br>         <span class="hljs-attr">lazy</span>: <span class="hljs-literal">true</span>,<br>         <span class="hljs-comment">// 修改值时触发(trigger)</span><br>         <span class="hljs-attr">scheduler</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>             <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">_dirty</span>) &#123;<br>                 <span class="hljs-variable language_">this</span>.<span class="hljs-property">_dirty</span> = <span class="hljs-literal">true</span>;<br>             &#125;<br>         &#125;<br>     &#125;);<br></code></pre></td></tr></table></figure></li><li><p>调用了effect函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">effect</span>(<span class="hljs-params">fn, options: any = &#123;&#125;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (fn.<span class="hljs-property">effect</span>) &#123;<br>      fn = fn.<span class="hljs-property">effect</span>;<br>  &#125;<br>  <span class="hljs-comment">// 创建响应式effect</span><br>  <span class="hljs-keyword">const</span> effect = <span class="hljs-title function_">createReactiveEffect</span>(fn, options);<br>  <span class="hljs-keyword">if</span> (!options.<span class="hljs-property">lazy</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;不是lazy,直接初始化执行effect()&#x27;</span>)<br>      <span class="hljs-title function_">effect</span>(); <span class="hljs-comment">// 默认执行一次</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> effect;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>触发了createReactiveEffect生成了effect</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">createReactiveEffect</span>(<span class="hljs-params">fn, options</span>) &#123;<br>    <span class="hljs-keyword">const</span> effect = <span class="hljs-keyword">function</span> <span class="hljs-title function_">reactiveEffect</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// window.console.groupInfo(&#x27;定义effect函数&#x27;)</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1-1.判断是否在effectStack中&#x27;</span>)<br>            <span class="hljs-keyword">if</span> (!effectStack.<span class="hljs-title function_">includes</span>(effect)) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1-2.不存在,定义effect函数入栈effectStack&#x27;</span>)<br>                effectStack.<span class="hljs-title function_">push</span>(effect); <span class="hljs-comment">// 入栈</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1-3.activeEffect保存当前活动的effect&#x27;</span>)<br>                activeEffect = effect; <span class="hljs-comment">// 保存当前活动的effect</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1-4.执行effect传入的fn&#x27;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_">fn</span>(); <span class="hljs-comment">// 执行用户传入的函数</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123; <span class="hljs-comment">// 为什么要try...finally?因为try执行完毕后,无论是否有错误,都要执行finally进行出栈</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1-4.执行完毕,出栈effectStack&#x27;</span>)<br>            effectStack.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">// 出栈</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1-5.activeEffect重新赋值为effectStack[effectStack.length - 1]&#x27;</span>)<br>            activeEffect = effectStack[effectStack.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]; <span class="hljs-comment">// 当前活动的effect</span><br>        &#125;<br>    &#125;;<br>    effect.<span class="hljs-property">id</span> = uid++; <span class="hljs-comment">// effect的唯一标识</span><br>    effect.<span class="hljs-property">_isEffect</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 标识effect是不是响应式effect</span><br>    effect.<span class="hljs-property">raw</span> = fn; <span class="hljs-comment">// 保存用户传入的函数</span><br>    <span class="hljs-comment">// effect.deps = []; // 保存effect的依赖</span><br>    effect.<span class="hljs-property">options</span> = options; <span class="hljs-comment">// 保存effect的配置</span><br>    <span class="hljs-keyword">return</span> effect;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>此时this.effect就是<strong>createReactiveEffect函数</strong></p></li><li><p>调用<code>myAge.value</code>触发get函数–&gt; 把标志位_dirty变为false且<code>this._value = this.effect()</code>–&gt;执行了createReactiveEffect函数. 此时activeEffect就是computed传过来的getter, 然后进行第一次执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">get</span> <span class="hljs-title function_">value</span>() &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_dirty</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_value</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">effect</span>();<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_dirty</span> = <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_value</span>;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>触发computed里面依赖的state即demo的age, 走到track收集,这样age就存下来一个computed的effect(即有effect.options.scheduler)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createGetter</span>(<span class="hljs-params">isReadonly = <span class="hljs-literal">false</span>, shallow = <span class="hljs-literal">false</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key, receiver</span>) &#123;<br>        <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, key, receiver)<br>        <span class="hljs-keyword">if</span> (!isReadonly) &#123;<br>            <span class="hljs-comment">// 如果不是只读的，就收集依赖 effect</span><br>            <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">`调用state.<span class="hljs-subst">$&#123;key&#125;</span>触发get收集effect`</span>, target, key)<br>            <span class="hljs-title function_">track</span>(target, <span class="hljs-title class_">TrackOpTypes</span>.<span class="hljs-property">GET</span>, key)<br>            <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfoEnd</span>()<br>        &#125;<br>        <span class="hljs-keyword">if</span> (shallow) &#123;<br>            <span class="hljs-comment">// 如果是浅层的，就返回结果</span><br>            <span class="hljs-keyword">return</span> res<br>        &#125;<br>        <span class="hljs-comment">// 是对象，递归代理</span><br>        <span class="hljs-comment">// 懒代理递归，即当取值的时候才会递归代理,性能优化</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isObject</span>(res)) &#123;<br>            <span class="hljs-keyword">return</span> isReadonly ? <span class="hljs-title function_">readonly</span>(res) : <span class="hljs-title function_">reactive</span>(res)<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">track</span>(<span class="hljs-params">target, type, key</span>) &#123;<br>    <span class="hljs-comment">// 如果当前没有活动的effect，则不需要收集依赖</span><br>    <span class="hljs-keyword">if</span> (activeEffect === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// console.log(activeEffect.id, &#x27;activeEffect.id&#x27;);</span><br>    <span class="hljs-keyword">let</span> depsMap = targetMap.<span class="hljs-title function_">get</span>(target);<br>    <span class="hljs-keyword">if</span> (!depsMap) &#123;<br>        targetMap.<span class="hljs-title function_">set</span>(target, (depsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()));<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(targetMap, <span class="hljs-string">&#x27;targetMap&#x27;</span>);<br>    <span class="hljs-keyword">let</span> dep = depsMap.<span class="hljs-title function_">get</span>(key); <span class="hljs-comment">//&#123;key:set[]&#125;</span><br>    <span class="hljs-keyword">if</span> (!dep) &#123;<br>        depsMap.<span class="hljs-title function_">set</span>(key, (dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()));<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!dep.<span class="hljs-title function_">has</span>(activeEffect)) &#123;<br>        dep.<span class="hljs-title function_">add</span>(activeEffect); <span class="hljs-comment">// 收集依赖</span><br>        <span class="hljs-comment">// activeEffect.deps.push(dep);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改值的时候,触发了set,就执行了传过来的set函数, 里面执行了 <strong>依赖的属性</strong> 修改语句就触发了trigger</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">set</span> <span class="hljs-title function_">value</span>(<span class="hljs-params">newValue</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setter</span>(newValue);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>trigger执行属性对应的effect数组, 判断effect如果是computed(即effect.options.scheduler调度),执行把标志位_dirty变为true,当再次获取的时候,触发get,因为为true又可以执行了.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createSetter</span>(<span class="hljs-params">shallow = <span class="hljs-literal">false</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, value, receiver</span>) &#123;<br>        <span class="hljs-comment">// 触发更新</span><br>        <span class="hljs-comment">// 注意:1.是数组还是对象 2.是新增还是修改</span><br>        <span class="hljs-keyword">const</span> oldValue = target[key] <span class="hljs-comment">// 获取老值</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isArray</span>(target) ,<span class="hljs-title function_">isIntegerKey</span>(key),key,<span class="hljs-keyword">typeof</span> key,<span class="hljs-string">&#x27;key&#x27;</span>)<br>        <span class="hljs-keyword">const</span> hadKey = <span class="hljs-title function_">isArray</span>(target) &amp;&amp; <span class="hljs-title function_">isIntegerKey</span>(key) ? <span class="hljs-title class_">Number</span>(key) &lt; target.<span class="hljs-property">length</span> : <span class="hljs-title function_">hasOwn</span>(target, key) <span class="hljs-comment">// 判断是否有这个属性</span><br>        <span class="hljs-keyword">const</span> result = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, key, value, receiver)<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&#x27;set&#x27;</span>)<br>        <span class="hljs-keyword">if</span> (!hadKey) &#123;<br>            <span class="hljs-comment">// 新增</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;判断是新增属性&#x27;</span>)<br>            <span class="hljs-title function_">trigger</span>(target, <span class="hljs-title class_">TriggerOpTypes</span>.<span class="hljs-property">ADD</span>, key, value)<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hasChanged</span>(value, oldValue)) &#123; <span class="hljs-comment">// 判断新值和老值是否有变化,如果有变化就触发更新,如果没有变化就不触发更新</span><br>            <span class="hljs-comment">// 修改</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;判断是修改属性且值有变化&#x27;</span>,key,value)<br>            <span class="hljs-title function_">trigger</span>(target, <span class="hljs-title class_">TriggerOpTypes</span>.<span class="hljs-property">SET</span>, key, value, oldValue)<br>        &#125;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfoEnd</span>()<br>        <span class="hljs-keyword">return</span> result<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">trigger</span>(<span class="hljs-params">target, type, key, value?, oldValue?</span>) &#123;<br>    <span class="hljs-keyword">const</span> depsMap = targetMap.<span class="hljs-title function_">get</span>(target);<br>    <span class="hljs-keyword">if</span> (!depsMap) &#123; <span class="hljs-comment">// 比如直接修改值state.xx=1, xx不存在,此时target是&#123;name,list,xx&#125;,肯定不存在</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">let</span> effectSet1 = depsMap.<span class="hljs-title function_">get</span>(key); <span class="hljs-comment">// set[effect,effect]</span><br>    <span class="hljs-keyword">let</span> effectSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(); <span class="hljs-comment">// 重复的effect只执行一次,去重</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">effectsToAdd</span>) =&gt; &#123;<br>        <span class="hljs-keyword">if</span> (effectsToAdd) &#123;<br>            effectsToAdd.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">effect</span> =&gt;</span> &#123;<br>                effectSet.<span class="hljs-title function_">add</span>(effect);<br>            &#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// console.log(effectSet, &#x27;effectSet&#x27;);</span><br>    <span class="hljs-comment">// 数组修改长度需要特殊处理 例如:arr[1] = 3,arr.length = 1,此时arr[1]应该为undefined</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isArray</span>(target) &amp;&amp; key === <span class="hljs-string">&#x27;length&#x27;</span>) &#123;<br>        depsMap.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">dep, key</span>) =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dep, key, <span class="hljs-string">&#x27;dep,key&#x27;</span>)<br>            <span class="hljs-comment">// 如果更改的length小于收集的索引,那么这个索引要重新执行effect</span><br>            <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;length&#x27;</span> || value&lt;=key) &#123;<br>                <span class="hljs-title function_">add</span>(dep);<br>            &#125;<br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 对象</span><br>        <span class="hljs-keyword">if</span> (key !== <span class="hljs-literal">undefined</span>) &#123;<br>            <span class="hljs-title function_">add</span>(depsMap.<span class="hljs-title function_">get</span>(key));<br>        &#125;<br>        <span class="hljs-keyword">switch</span> (type) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-title class_">TriggerOpTypes</span>.<span class="hljs-property">ADD</span>:<br>                <span class="hljs-comment">// 数组新增&gt;长度的索引,也要重新执行effect,使的已经使用list.length的地方更新</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isArray</span>(target) &amp;&amp; <span class="hljs-title function_">isIntegerKey</span>(key)) &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(depsMap.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;length&#x27;</span>), <span class="hljs-string">&quot;depsMap.get(&#x27;length&#x27;)&quot;</span>)<br>                    <span class="hljs-title function_">add</span>(depsMap.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;length&#x27;</span>));<br>                &#125; <span class="hljs-comment">// 添加属性</span><br>                <span class="hljs-keyword">break</span>;<br><br><br>        &#125;<br>    &#125;<br>    effectSet.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">effect: any</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// effect();</span><br>        <span class="hljs-comment">// 如果effect是scheduler,则执行scheduler,scheduler意思是调度,调度是什么意思?调度是指在合适的时机执行某个操作 </span><br>        <span class="hljs-keyword">if</span> (effect.<span class="hljs-property">options</span>.<span class="hljs-property">scheduler</span>) &#123;<br>            effect.<span class="hljs-property">options</span>.<span class="hljs-title function_">scheduler</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_">effect</span>();<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="简单描述"><a href="#简单描述" class="headerlink" title="简单描述"></a>简单描述</h2><ul><li>computed就是创建一个effect,存到this上,执行this.effect相当于执行了核心effect函数就相当于执行了createReactiveEffect函数,里面执行当前活动activeEffect=computed的getter,且用_value存值</li><li>当执行里面<strong>获取属性语句</strong>,就触发track收集该activeEffect.且有个_dirty属性第一次为true,后面为false阻止再次执行,取_value缓存</li><li>修改值就触发set,里面执行<strong>修改属性语句</strong>,触发trigger执行了对应属性收集的effect数组,循环执行数组,判断effect如果有scheduler调度属性,就是computed,执行,把_dirty变为true, 这样下次获取值触发get就直接又可以执行了this.effect</li></ul>]]></content>
      
      
      <categories>
          
          <category> vue3源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>4.ref和toRef</title>
      <link href="/ypf-blog/2024/05/29/vue3%E6%BA%90%E7%A0%81/4.ref%E5%92%8CtoRef/"/>
      <url>/ypf-blog/2024/05/29/vue3%E6%BA%90%E7%A0%81/4.ref%E5%92%8CtoRef/</url>
      
        <content type="html"><![CDATA[<h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><blockquote><p>ref就是将普通的数据转换为响应式数据,返回一个对象,对象中有一个value属性,这个value就是值<br>ref允许我们创建一个任意类型的响应式的ref对象，在使用时需要带上.value ,reactive只能接收对象或数组等复杂类型</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/3.3.4/vue.global.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> &#123; ref, reactive, toRaw, effect &#125; = <span class="hljs-variable language_">window</span>.<span class="hljs-property">Vue</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> name = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;John&quot;</span>); </span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name.<span class="hljs-property">value</span>);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="images/1.jpg" width="80%"/>我们打印可以看到, ref生成的是一个实例对象,通过RefImpl来生成<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="类的基本定义"><a href="#类的基本定义" class="headerlink" title="类的基本定义"></a>类的基本定义</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 新建packages/reactivity/src/ref.ts</span><br><span class="hljs-keyword">import</span> &#123; hasChanged, isArray &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vue/shared&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ref</span>(<span class="hljs-params">target</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createRef</span>(target)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">shallowRef</span>(<span class="hljs-params">target</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createRef</span>(target, <span class="hljs-literal">true</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createRef</span>(<span class="hljs-params">rawValue, shallow = <span class="hljs-literal">false</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RefImpl</span>(rawValue, shallow)<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RefImpl</span> &#123;<br>    public __v_isRef = <span class="hljs-literal">true</span> <span class="hljs-comment">// 用于标识是一个ref对象</span><br>    public _value <span class="hljs-comment">// 存储值</span><br>    public _rawValue <span class="hljs-comment">// 存储原始值</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value, public readonly __v_isShallow</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_rawValue</span> = __v_isShallow ? value : <span class="hljs-title function_">toRaw</span>(value)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_value</span> = __v_isShallow ? value : <span class="hljs-title function_">toReactive</span>(value)<br>    &#125;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">value</span>() &#123;<br>        <span class="hljs-title function_">track</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-title class_">TrackOpTypes</span>.<span class="hljs-property">GET</span>, <span class="hljs-string">&#x27;value&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_value</span><br>    &#125;<br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">value</span>(<span class="hljs-params">newValue</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hasChanged</span>(newValue, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_value</span>)) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_value</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">__v_isShallow</span>?<span class="hljs-attr">newValue</span>:<span class="hljs-title function_">toReactive</span>(newValue)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_rawValue</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">__v_isShallow</span>?<span class="hljs-attr">newValue</span>:<span class="hljs-title function_">toRaw</span>(newValue)<br>            <span class="hljs-title function_">trigger</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-title class_">TriggerOpTypes</span>.<span class="hljs-property">SET</span>, <span class="hljs-string">&#x27;value&#x27;</span>, newValue)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们梳理下上面代码步骤:</p><ol><li>ref是通过createRef来创建的, createRef执行了 <code>new RefImpl</code></li><li>RefImpl类接收2个参数(值,是否是浅代理),对外暴露出<br>_rawValue: 原始值<br>_value: 新值<br>__v_isRef: 标识符,用于标识是一个ref对象<br>__v_isShallow: 是否是浅代理,默认false即深层</li><li>逻辑很简单,就是get时候,返回<code>this._value</code>, set时候,判断如果已经修改值,就是更新<code>this._value = newValue;this._rawValue = newValue</code>,是否浅代理下面讲</li></ol><p>但是上面我们可以测试下,在effect里面使用<code>xx.value</code>, 然后修改值,发现不会响应.</p><h3 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h3><p>还是看上面代码,很明显,我们在get的时候,进行<code>track</code>,在set时候,进行<code>trigger</code>, <strong>传递的对象就是this,指向实例,因为我们用就是实例.value</strong>, 这样就完成了响应式</p><h3 id="ref只能传基本类型"><a href="#ref只能传基本类型" class="headerlink" title="ref只能传基本类型?"></a>ref只能传基本类型?</h3><p>一般我们ref是用来绑定基础类型的,reactivity是用来绑定数组、对象等复杂数据类型的. 但实际上,ref是支持对象、数组等任意类型的.<br>我们看上面代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">constructor</span>(<span class="hljs-params">value, public readonly __v_isShallow</span>) &#123;<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">_rawValue</span> = __v_isShallow ? value : <span class="hljs-title function_">toRaw</span>(value)<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-property">_value</span> = __v_isShallow ? value : <span class="hljs-title function_">toReactive</span>(value)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>对于原始值(即没被代理的对象),如果是浅层的,直接绑定value, 如果是深层的, 执行toRaw进行转换原始值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// toRaw是根据一个 Vue 创建的代理返回其原始对象(可以返回由 reactive()、readonly()、shallowReactive() 或者 shallowReadonly() 创建的代理对应的原始对象)</span><br><span class="hljs-keyword">const</span> foo = &#123;&#125;<br><span class="hljs-keyword">const</span> reactiveFoo = <span class="hljs-title function_">reactive</span>(foo)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">toRaw</span>(reactiveFoo) === foo) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reactiveFoo.<span class="hljs-property">__v_raw</span> === foo) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>对象新值,如果是浅层的,直接绑定value,如果是深层的,执行toReactive进行代理<br>我们前面讲过toReactive方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">toReactive</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">isObject</span>(value) ? <span class="hljs-title function_">reactive</span>(value) : value<br>&#125;<br></code></pre></td></tr></table></figure><p>我们看</p></li></ul><p><strong>demo1</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj=<span class="hljs-title function_">ref</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;John&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj,obj.<span class="hljs-property">value</span>);<br></code></pre></td></tr></table></figure><img src="images/2.jpg" width="80%"/>我们看到,obj.value此时是个proxy<p><strong>demo2</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj=<span class="hljs-title function_">ref</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;John&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;)<br><span class="hljs-title function_">effect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">value</span>) <span class="hljs-comment">// 不收集</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">value</span>.<span class="hljs-property">name</span>) <span class="hljs-comment">// 收集</span><br>&#125;)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    obj.<span class="hljs-property">value</span>.<span class="hljs-property">name</span>=<span class="hljs-string">&#x27;Tom&#x27;</span><br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><p>修改name值后, effect不会响应,因为effect中并没有使用name进行收集</p><p><strong>demo3</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj=<span class="hljs-title function_">ref</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;John&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;)<br><span class="hljs-title function_">effect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">value</span>) <span class="hljs-comment">// 收集</span><br>&#125;)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    obj.<span class="hljs-property">value</span>=&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Tom&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;<br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><p>直接修改value,effect会响应,此时新值就是一个proxy,上面我们set已经进行toReactive处理</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>ref就是通过<code>new RefImpl</code>生成的,暴露value, 会判断是否浅代理, 进行toReactive</li><li>在get进行收集,set进行响应, 绑定的是this实例</li><li>可以接受任意类型</li></ul><h1 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h1><h2 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h2><blockquote><p>toRef是将目标对象的指定属性转换为ref对象,如果目标对象是响应式的,ref对象会保持响应式,反之不是响应式, 一般我们使用都是响应式对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; toRef,reactive,effect &#125; = <span class="hljs-variable language_">window</span>.<span class="hljs-property">Vue</span>;<br><span class="hljs-keyword">let</span> state = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>&#125;;<br><span class="hljs-keyword">let</span> name = <span class="hljs-title function_">toRef</span>(state, <span class="hljs-string">&quot;name&quot;</span>); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name, name.<span class="hljs-property">value</span>); <span class="hljs-comment">// 不是响应式,如果用effect,修改数据不会重新执行</span><br></code></pre></td></tr></table></figure><img src="images/3.jpg" width="80%"/><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; toRef,reactive,effect &#125; = <span class="hljs-variable language_">window</span>.<span class="hljs-property">Vue</span>;<br><span class="hljs-keyword">let</span> state = <span class="hljs-title function_">reactive</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>&#125;);<br><span class="hljs-keyword">let</span> name = <span class="hljs-title function_">toRef</span>(state, <span class="hljs-string">&quot;name&quot;</span>); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name, name.<span class="hljs-property">value</span>); <span class="hljs-comment">// 是响应式,如果用effect,修改数据会重新执行</span><br></code></pre></td></tr></table></figure><img src="images/4.jpg" width="80%"/><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; toRef,reactive,effect &#125; = <span class="hljs-variable language_">window</span>.<span class="hljs-property">Vue</span>;<br><span class="hljs-keyword">let</span> state = <span class="hljs-string">&quot;John;</span><br><span class="hljs-string">let name = toRef(state); </span><br><span class="hljs-string">console.log(name, name.value); //是响应式,因为是ref类创建的,如果用effect,修改数据不会重新执行</span><br></code></pre></td></tr></table></figure><img src="images/5.jpg" width="80%"/><p>上面3个例子我们可以看出</p><ol><li>如果目标已经是ref,就直接返回</li><li>如果目标是对象, 则通过ObjectRefImpl类创建, 如果是响应式的,ref对象会保持响应式(即effect重新执行),反之不是响应式(即不会重新执行effect), 一般我们使用都是响应式对象</li><li>如果目标是基本类型,直接返回<code>ref(目标)</code></li></ol><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">isRef</span>(<span class="hljs-params">r</span>) &#123;<br>    <span class="hljs-keyword">return</span> !!(r &amp;&amp; r.<span class="hljs-property">__v_isRef</span> === <span class="hljs-literal">true</span>)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">toRef</span>(<span class="hljs-params">target, key</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isRef</span>(target)) &#123;<br>        <span class="hljs-keyword">return</span> target<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isObject</span>(target) &amp;&amp; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">isRef</span>(target[key]) ? target[key] : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectRefImpl</span>(target, key)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">ref</span>(target)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectRefImpl</span> &#123;<br>    public __v_isRef = <span class="hljs-literal">true</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">private readonly _object, private readonly _key</span>) &#123;<br>    &#125;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">value</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_object</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">_key</span>]<br>    &#125;<br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">value</span>(<span class="hljs-params">newValue</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_object</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">_key</span>] = newValue<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面逻辑很简单:</p><ol><li>先判断如果是ref就直接返回</li><li>如果是对象,如果值是ref就直接返回,否则通过<code>new ObjectRefImpl</code>创建</li><li>其他情况,直接返回<code>ref(target)</code></li><li><code>ObjectRefImpl类</code>逻辑很简单,get从对象取值,set更新新值</li></ol><h1 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>toRef是将目标对象的所有属性转换为ref对象,如果目标对象是响应式的,ref对象会保持响应式,反之不是响应式, 一般我们使用都是响应式对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; toRefs,reactive,effect &#125; = <span class="hljs-variable language_">window</span>.<span class="hljs-property">Vue</span>;<br><span class="hljs-keyword">let</span> state = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>&#125;;<br><span class="hljs-keyword">let</span> obj = <span class="hljs-title function_">toRefs</span>(state);  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj,obj.<span class="hljs-property">name</span>); <br><span class="hljs-comment">// 或者解构</span><br><span class="hljs-keyword">const</span> &#123;name,age&#125;=<span class="hljs-title function_">toRefs</span>(state);  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name,name.<span class="hljs-property">value</span>); <br></code></pre></td></tr></table></figure><img src="images/6.jpg" width="80%"/><p>上面我们可以看到</p><ul><li>目标对象的每个属性都会转换为ref对象</li><li>传入的不是响应式对象,会⚠️警告让传入响应式对象</li></ul><h2 id="解构无法响应"><a href="#解构无法响应" class="headerlink" title="解构无法响应?"></a>解构无法响应?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; toRefs,reactive,effect &#125; = <span class="hljs-variable language_">window</span>.<span class="hljs-property">Vue</span>;<br> <span class="hljs-keyword">let</span> state = <span class="hljs-title function_">reactive</span>(&#123;<br>   <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>   <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br> &#125;);<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state.<span class="hljs-property">name</span>) <span class="hljs-comment">// 响应式对象proxy</span><br> <span class="hljs-keyword">const</span> &#123;name,age&#125;=state<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name,age) <span class="hljs-comment">// John 18</span><br></code></pre></td></tr></table></figure><p>我们使用reactive时候不想每次都用<code>state.xx</code>这样,所以如果想上面解构,直接就是个值,肯定是不对的.我们修改下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; toRefs,reactive,effect &#125; = <span class="hljs-variable language_">window</span>.<span class="hljs-property">Vue</span>;<br> <span class="hljs-keyword">let</span> state = <span class="hljs-title function_">reactive</span>(&#123;<br>   <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>   <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br> &#125;);<br> <span class="hljs-keyword">const</span> &#123;name,age&#125;=<span class="hljs-title function_">toRefs</span>(state)<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name,age) <span class="hljs-comment">// ref响应式</span><br></code></pre></td></tr></table></figure><p>上面我们通过toRefs转换,就没有问题了</p><h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">toRefs</span>(<span class="hljs-params">object</span>) &#123;<br>    <span class="hljs-keyword">const</span> ret = <span class="hljs-title function_">isArray</span>(object) ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(object.<span class="hljs-property">length</span>) : &#123;&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> object) &#123;<br>        ret[key] = <span class="hljs-title function_">isRef</span>(object[key]) ? object[key] : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectRefImpl</span>(object, key)<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret<br>&#125;<br></code></pre></td></tr></table></figure><p>上面逻辑很简单:</p><ol><li>创建一个空对象, 长度就是目标对象的长度,如果是数组就是数组的length</li><li>遍历对象,判断如果是ref就直接放到空对象中,如果不是,通过<code>new ObjectRefImpl</code>创建后放到空对象中</li><li>最后返回对象</li></ol>]]></content>
      
      
      <categories>
          
          <category> vue3源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3.effect</title>
      <link href="/ypf-blog/2024/05/22/vue3%E6%BA%90%E7%A0%81/3.effect/"/>
      <url>/ypf-blog/2024/05/22/vue3%E6%BA%90%E7%A0%81/3.effect/</url>
      
        <content type="html"><![CDATA[<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>我们先学习下effect的基本使用，我们先看下源码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/3.3.4/vue.global.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> &#123; effect &#125; = <span class="hljs-variable language_">window</span>.<span class="hljs-property">VueReactivity</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> state = <span class="hljs-title function_">reactive</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,</span><br><span class="language-javascript">      list : [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    <span class="hljs-title function_">effect</span>(</span><br><span class="language-javascript">      <span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">        app.<span class="hljs-property">innerHTML</span> = state.<span class="hljs-property">name</span>;</span><br><span class="language-javascript">      &#125;, </span><br><span class="language-javascript">      &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// lazy: true, // 默认为false,自动执行, lazy为true时,只有在effect被调用时才会执行effect</span></span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    )</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运行上面代码, 会发现页面上显示John</p><ul><li>effect用于收集依赖, 当依赖发生变化时, 会执行effect中的回调函数,解释下, 我们执行effect,执行到<code>state.name</code>就会触发get就会收集effect依赖, 当state发生变化时, 会执行effect中的回调函数</li><li>lazy默认为false, 自动执行, lazy为true时, 只有在effect被调用时才会执行effect</li></ul><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="定义effect函数"><a href="#定义effect函数" class="headerlink" title="定义effect函数"></a>定义effect函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 新建packages/reactivity/src/effect.ts</span><br><span class="hljs-keyword">import</span> &#123; isIntegerKey, isArray &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vue/shared&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">TriggerOpTypes</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./constants&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">effect</span>(<span class="hljs-params">fn, options: any = &#123;&#125;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (fn.<span class="hljs-property">effect</span>) &#123;<br>        fn = fn.<span class="hljs-property">effect</span>;<br>    &#125;<br>    <span class="hljs-comment">// 创建响应式effect</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1.定义effect函数&#x27;</span>)<br>    <span class="hljs-keyword">const</span> effect = <span class="hljs-title function_">createReactiveEffect</span>(fn, options);<br>    <span class="hljs-comment">// window.console.groupInfoEnd()</span><br>    <span class="hljs-keyword">if</span> (!options.<span class="hljs-property">lazy</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;不是lazy,直接初始化执行effect()&#x27;</span>)<br>        <span class="hljs-title function_">effect</span>(); <span class="hljs-comment">// 默认执行一次</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> effect;<br>&#125;<br><span class="hljs-keyword">let</span> uid = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">let</span> activeEffect; <span class="hljs-comment">// 当前活动的effect</span><br><span class="hljs-keyword">let</span> effectStack = []; <span class="hljs-comment">// effect栈,用于解决递归调用的问题,</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createReactiveEffect</span>(<span class="hljs-params">fn, options</span>) &#123;<br>    <span class="hljs-keyword">const</span> effect = <span class="hljs-keyword">function</span> <span class="hljs-title function_">reactiveEffect</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1-1.判断是否在effectStack中&#x27;</span>)<br>            <span class="hljs-keyword">if</span> (!effectStack.<span class="hljs-title function_">includes</span>(effect)) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1-2.不存在,定义effect函数入栈effectStack&#x27;</span>)<br>                effectStack.<span class="hljs-title function_">push</span>(effect); <span class="hljs-comment">// 入栈</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1-3.activeEffect保存当前活动的effect&#x27;</span>)<br>                activeEffect = effect; <span class="hljs-comment">// 保存当前活动的effect</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1-4.执行effect传入的fn&#x27;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_">fn</span>(); <span class="hljs-comment">// 执行用户传入的函数</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123; <span class="hljs-comment">// 为什么要try...finally?因为try执行完毕后,无论是否有错误,都要执行finally进行出栈</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1-4.执行完毕,出栈effectStack&#x27;</span>)<br>            effectStack.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">// 出栈</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;1-5.activeEffect重新赋值为effectStack[effectStack.length - 1]&#x27;</span>)<br>            activeEffect = effectStack[effectStack.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]; <span class="hljs-comment">// 当前活动的effect</span><br>        &#125;<br>    &#125;;<br>    effect.<span class="hljs-property">id</span> = uid++; <span class="hljs-comment">// effect的唯一标识</span><br>    effect.<span class="hljs-property">_isEffect</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 标识effect是不是响应式effect</span><br>    effect.<span class="hljs-property">raw</span> = fn; <span class="hljs-comment">// 保存用户传入的函数</span><br>    effect.<span class="hljs-property">options</span> = options; <span class="hljs-comment">// 保存effect的配置</span><br>    <span class="hljs-keyword">return</span> effect;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码流程解析</p><ol><li>定义effect函数外层, 里面调用生成effect的createReactiveEffect函数(将fn,options参数传过去),判断是否懒加载,不是就执行一次</li><li>createReactiveEffect函数主要是定义effect函数, 同时给函数绑定唯一的id,_isEffect标识effect是不是响应式effect,raw保存用户传入的函数,options保存effect的配置, 然后return出去</li><li>effect函数执行时,会执行里面的逻辑, 首先判断是否在effectStack中, 如果不在, 就将effect入栈, 并将activeEffect保存当前活动的effect, 然后执行effect传入的fn, 执行完毕finally后, 出栈effectStack, 并将activeEffect重新赋值为effectStack[effectStack.length - 1]</li></ol><p><strong>为什么要使用effectStack保存effect?</strong><br>我们看下下面代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">effect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  state.<span class="hljs-property">name</span> <span class="hljs-comment">// effect1</span><br>  <span class="hljs-title function_">effect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    state.<span class="hljs-property">name</span> <span class="hljs-comment">// effect2</span><br>  &#125;)<br>  state.<span class="hljs-property">name</span> <span class="hljs-comment">// effect1</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>我们执行上面代码,</p><ul><li>执行state.name, 会给name绑定一个依赖effect1</li><li>执行effect(() =&gt; {})里面的state.name, 会给name绑定一个依赖effect2</li><li>执行state.name, 此时仍是绑定effect1<br>所以需要存起来effectStack, 用于解决递归调用的问题, effectStack[effectStack.length - 1]就是当前活动的effect.</li></ul><h2 id="收集依赖"><a href="#收集依赖" class="headerlink" title="收集依赖"></a>收集依赖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 修改packages/reactivity/src/baseHandlers.ts</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createGetter</span>(<span class="hljs-params">isReadonly = <span class="hljs-literal">false</span>, shallow = <span class="hljs-literal">false</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key, receiver</span>) &#123;<br>        <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, key, receiver)<br>        <span class="hljs-keyword">if</span> (!isReadonly) &#123;<br>            <span class="hljs-comment">// 如果不是只读的，就收集依赖 effect</span><br>            <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">`调用state.<span class="hljs-subst">$&#123;key&#125;</span>触发get收集effect`</span>, target, key)<br>            <span class="hljs-title function_">track</span>(target, <span class="hljs-title class_">TrackOpTypes</span>.<span class="hljs-property">GET</span>, key)<br>            <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfoEnd</span>()<br>        &#125;<br>        <span class="hljs-keyword">if</span> (shallow) &#123;<br>            <span class="hljs-comment">// 如果是浅层的，就返回结果</span><br>            <span class="hljs-keyword">return</span> res<br>        &#125;<br>        ...<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// packages/reactivity/src/effect.ts</span><br><span class="hljs-keyword">let</span> targetMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>(); <span class="hljs-comment">// 依赖存储  WeakMap&#123;target:Map&#123;key:set[effect,effect]&#125;&#125;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">track</span>(<span class="hljs-params">target, type, key</span>) &#123;<br>    <span class="hljs-comment">// 如果当前没有活动的effect，则不需要收集依赖</span><br>    <span class="hljs-keyword">if</span> (activeEffect === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// console.log(activeEffect.id, &#x27;activeEffect.id&#x27;);</span><br>    <span class="hljs-keyword">let</span> depsMap = targetMap.<span class="hljs-title function_">get</span>(target);<br>    <span class="hljs-keyword">if</span> (!depsMap) &#123;<br>        targetMap.<span class="hljs-title function_">set</span>(target, (depsMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()));<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(targetMap, <span class="hljs-string">&#x27;targetMap&#x27;</span>);<br>    <span class="hljs-keyword">let</span> dep = depsMap.<span class="hljs-title function_">get</span>(key); <span class="hljs-comment">//&#123;key:set[]&#125;</span><br>    <span class="hljs-keyword">if</span> (!dep) &#123;<br>        depsMap.<span class="hljs-title function_">set</span>(key, (dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()));<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!dep.<span class="hljs-title function_">has</span>(activeEffect)) &#123;<br>        dep.<span class="hljs-title function_">add</span>(activeEffect); <span class="hljs-comment">// 收集依赖</span><br>        <span class="hljs-comment">// activeEffect.deps.push(dep);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>当我们获取data上的某个key时候,就会往targetMap存储依赖, 格式为 <code>WeakMap&#123;target:Map&#123;key:set[effect,effect]&#125;&#125;</code></li><li>activeEffect就是当前活动的effect</li><li>effect会通过set去重</li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>如<code>state.name</code><br><img src="images/1.jpg" width="80%"/></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>如<code>state.list[0]</code><br><img src="images/2.jpg" width="80%"/></p><h2 id="触发依赖"><a href="#触发依赖" class="headerlink" title="触发依赖"></a>触发依赖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 修改packages/reactivity/src/baseHandlers.ts</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createSetter</span>(<span class="hljs-params">shallow = <span class="hljs-literal">false</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, value, receiver</span>) &#123;<br>        <span class="hljs-comment">// 触发更新</span><br>        <span class="hljs-comment">// 注意:1.是数组还是对象 2.是新增还是修改</span><br>        <span class="hljs-keyword">const</span> oldValue = target[key] <span class="hljs-comment">// 获取老值</span><br>        <span class="hljs-keyword">const</span> hadKey = <span class="hljs-title function_">isArray</span>(target) &amp;&amp; <span class="hljs-title function_">isIntegerKey</span>(key) ? <span class="hljs-title class_">Number</span>(key) &lt; target.<span class="hljs-property">length</span> : <span class="hljs-title function_">hasOwn</span>(target, key) <span class="hljs-comment">// 判断是否有这个属性</span><br>        <span class="hljs-keyword">const</span> result = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, key, value, receiver)<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&#x27;set&#x27;</span>)<br>        <span class="hljs-keyword">if</span> (!hadKey) &#123;<br>            <span class="hljs-comment">// 新增</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;判断是新增属性&#x27;</span>)<br>            <span class="hljs-title function_">trigger</span>(target, <span class="hljs-title class_">TriggerOpTypes</span>.<span class="hljs-property">ADD</span>, key, value)<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hasChanged</span>(value, oldValue)) &#123; <span class="hljs-comment">// 判断新值和老值是否有变化,如果有变化就触发更新,如果没有变化就不触发更新</span><br>            <span class="hljs-comment">// 修改</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;判断是修改属性且值有变化&#x27;</span>,key,value)<br>            <span class="hljs-title function_">trigger</span>(target, <span class="hljs-title class_">TriggerOpTypes</span>.<span class="hljs-property">SET</span>, key, value, oldValue)<br>        &#125;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">console</span>.<span class="hljs-title function_">groupInfoEnd</span>()<br>        <span class="hljs-keyword">return</span> result<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// packages/reactivity/src/effect.ts</span><br><span class="hljs-comment">// 触发更新</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">trigger</span>(<span class="hljs-params">target, type, key, value?, oldValue?</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target, <span class="hljs-string">&#x27;target12221&#x27;</span>)<br>    <span class="hljs-keyword">const</span> depsMap = targetMap.<span class="hljs-title function_">get</span>(target);<br>    <span class="hljs-keyword">if</span> (!depsMap) &#123; <span class="hljs-comment">// 比如直接修改值state.xx=1, xx不存在</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// let effectSet1 = depsMap.get(key); // set[effect,effect]</span><br>    <span class="hljs-keyword">let</span> effectSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(); <span class="hljs-comment">// 重复的effect只执行一次,去重</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">effectsToAdd</span>) =&gt; &#123;<br>        <span class="hljs-keyword">if</span> (effectsToAdd) &#123;<br>            effectsToAdd.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">effect</span> =&gt;</span> &#123;<br>                effectSet.<span class="hljs-title function_">add</span>(effect);<br>            &#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// console.log(effectSet, &#x27;effectSet&#x27;);</span><br>    <span class="hljs-comment">// 数组修改长度需要特殊处理 例如:arr[1] = 3,arr.length = 1,此时用到arr[1]的地方应该更新为undefined</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isArray</span>(target) &amp;&amp; key === <span class="hljs-string">&#x27;length&#x27;</span>) &#123;<br>        depsMap.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">dep, key</span>) =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dep, key, <span class="hljs-string">&#x27;dep,key&#x27;</span>)<br>            <span class="hljs-comment">// 如果更改的length小于收集的索引,那么这个索引要重新执行effect</span><br>            <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;length&#x27;</span> || value&lt;=key) &#123;<br>                <span class="hljs-title function_">add</span>(dep);<br>            &#125;<br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 对象</span><br>        <span class="hljs-keyword">if</span> (key !== <span class="hljs-literal">undefined</span>) &#123;<br>            <span class="hljs-title function_">add</span>(depsMap.<span class="hljs-title function_">get</span>(key));<br>        &#125;<br>        <span class="hljs-keyword">switch</span> (type) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-title class_">TriggerOpTypes</span>.<span class="hljs-property">ADD</span>:<br>                <span class="hljs-comment">// 数组新增&gt;长度的索引,也要重新执行effect,使的已经使用list.length的地方更新</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isArray</span>(target) &amp;&amp; <span class="hljs-title function_">isIntegerKey</span>(key)) &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(depsMap.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;length&#x27;</span>), <span class="hljs-string">&quot;depsMap.get(&#x27;length&#x27;)&quot;</span>)<br>                    <span class="hljs-title function_">add</span>(depsMap.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;length&#x27;</span>));<br>                &#125; <span class="hljs-comment">// 添加属性</span><br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(effectSet, <span class="hljs-string">&#x27;effectSet&#x27;</span>)<br>    <span class="hljs-comment">// console.log(effectSet1, &#x27;effectSet1&#x27;)</span><br>    effectSet.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">effect: any</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">effect</span>();<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="核心主流程"><a href="#核心主流程" class="headerlink" title="核心主流程"></a>核心主流程</h3><p><strong>主要核心是: 根据key,找到缓存中收集的effect,然后循环执行</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> depsMap = targetMap.<span class="hljs-title function_">get</span>(target);<br><span class="hljs-keyword">if</span> (!depsMap) &#123; <span class="hljs-comment">// 比如直接修改值state.xx=1, xx不存在,此时target是&#123;name,list,xx&#125;,缓存中肯定不存在</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">let</span> effectSet = depsMap.<span class="hljs-title function_">get</span>(key); <span class="hljs-comment">// set[effect,effect] </span><br>effectSet.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">effect: any</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">effect</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p>上面代码因为存在修改时,存在相同的effect,所以通过set去重, 因为对象数组有下面特殊情况,所以需要获取effect,通过add函数添加到effectSet中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> effectSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(); <span class="hljs-comment">// 重复的effect只执行一次,去重</span><br>   <span class="hljs-keyword">let</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">effectsToAdd</span>) =&gt; &#123;<br>       <span class="hljs-keyword">if</span> (effectsToAdd) &#123;<br>           effectsToAdd.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">effect</span> =&gt;</span> &#123;<br>               effectSet.<span class="hljs-title function_">add</span>(effect);<br>           &#125;);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h3><p>对象很简单,直接 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (key !== <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-title function_">add</span>(depsMap.<span class="hljs-title function_">get</span>(key));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h3><p>数组存在两种特殊情况需要特殊处理</p><h4 id="修改length-已使用state-list-index-需要响应"><a href="#修改length-已使用state-list-index-需要响应" class="headerlink" title="修改length,已使用state.list[index],需要响应"></a>修改length,已使用state.list[index],需要响应</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> state = <span class="hljs-title function_">reactive</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">list</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>&#125;);<br><span class="hljs-title function_">effect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state.<span class="hljs-property">list</span>[<span class="hljs-number">1</span>]) <span class="hljs-comment">// 第一次是2, 第二次是undefined</span><br>&#125;)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  state.<span class="hljs-property">list</span>.<span class="hljs-property">length</span> = <span class="hljs-number">1</span> <span class="hljs-comment">// 修改length, 此时应该重新执行effect, 并且输出undefined</span><br>&#125;,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p><code>所以通过下面逻辑判断,更新的length&lt;=索引,即长度&lt;=索引&gt;,那么这个索引要重新执行effect</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-title function_">isArray</span>(target) &amp;&amp; key === <span class="hljs-string">&#x27;length&#x27;</span>) &#123;<br>    depsMap.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">dep, key</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dep, key, <span class="hljs-string">&#x27;dep,key&#x27;</span>)<br>        <span class="hljs-comment">// 如果更改的length小于收集的索引,那么这个索引要重新执行effect</span><br>        <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&#x27;length&#x27;</span> || key &gt;= value) &#123;<br>            <span class="hljs-title function_">add</span>(dep);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="数组增加索引-已使用state-list-length-需要响应"><a href="#数组增加索引-已使用state-list-length-需要响应" class="headerlink" title="数组增加索引,已使用state.list.length,需要响应"></a>数组增加索引,已使用state.list.length,需要响应</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">effect</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  app.<span class="hljs-property">innerHTML</span> = state.<span class="hljs-property">list</span>.<span class="hljs-property">length</span> <span class="hljs-comment">// 第一次是3, 第二次是6</span><br>&#125;)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  state.<span class="hljs-property">list</span>[<span class="hljs-number">5</span>]=<span class="hljs-number">5</span> <span class="hljs-comment">// 修改数组, 此时应该重新执行effect,并且输出6, 数组是[1,2,3,empty,empty,5],此时获取list[3]是undefined</span><br>&#125;,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p><code>通过下面的逻辑判断,数组新增index(数组的index&gt;=length),用到length的地方重新执行effect</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">switch</span> (type) &#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-title class_">TriggerOpTypes</span>.<span class="hljs-property">ADD</span>:<br>      <span class="hljs-comment">// 数组新增index&gt;=长度,也要重新执行effect,使的已经使用list.length的地方更新</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isArray</span>(target) &amp;&amp; <span class="hljs-title function_">isIntegerKey</span>(key)) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(depsMap.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;length&#x27;</span>), <span class="hljs-string">&quot;depsMap.get(&#x27;length&#x27;)&quot;</span>)<br>          <span class="hljs-title function_">add</span>(depsMap.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;length&#x27;</span>));<br>      &#125; <span class="hljs-comment">// 添加属性</span><br>      <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue3源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>傻傻分不清楚- ==和===和Object.is</title>
      <link href="/ypf-blog/2024/05/06/javascript/%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%E6%A5%9A-%20==%E5%92%8C===%E5%92%8CObject.is/"/>
      <url>/ypf-blog/2024/05/06/javascript/%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%E6%A5%9A-%20==%E5%92%8C===%E5%92%8CObject.is/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Map,WeakMap,Set,WeakSet</title>
      <link href="/ypf-blog/2024/05/06/javascript/Map,WeakMap,Set,WeakSet/"/>
      <url>/ypf-blog/2024/05/06/javascript/Map,WeakMap,Set,WeakSet/</url>
      
        <content type="html"><![CDATA[<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><blockquote><p>由于js对象的键只能是字符串,如果硬要对象作键, 键会变成<code>&#39;[object Object]&#39;</code>, 这给使用带来了很大的限制,所以es6新增Map, <strong>任意类型都可以当键</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a = &#123;<br>  <span class="hljs-attr">test</span>: <span class="hljs-number">1</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> b = &#123;<br>  <span class="hljs-attr">test</span>: <span class="hljs-number">2</span>,<br>&#125;;<br><span class="hljs-keyword">var</span> obj = &#123;<br>  [a]: <span class="hljs-number">1</span>,<br>  [b]: <span class="hljs-number">2</span>,<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">a</span>); <span class="hljs-comment">// undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj); <span class="hljs-comment">// &#123; &#x27;[object Object]&#x27;: 2 &#125; // 覆盖为2</span><br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> map= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>  [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>],<br>  [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>],<br>  [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">3</span>],<br>]);<br>或者<br><span class="hljs-keyword">const</span> map= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>).<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">2</span>).<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">3</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map)<br></code></pre></td></tr></table></figure><img src="images/1.jpg" width="50%"/><h3 id="不同类型值"><a href="#不同类型值" class="headerlink" title="不同类型值"></a>不同类型值</h3><p>键如果严格相等,则会视为一个键.特殊的除外</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj1 = &#123;&#125;,<br>      obj2 = &#123;&#125;,<br>      obj3 = obj2;<br><span class="hljs-keyword">const</span> arr1 = [],<br>      arr2 = [];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0</span> === -<span class="hljs-number">0</span>, <span class="hljs-string">&quot;0 === -0&quot;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">NaN</span> === <span class="hljs-title class_">NaN</span>, <span class="hljs-string">&quot;NaN === NaN&quot;</span>); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1 === obj2, <span class="hljs-string">&quot;obj1 === obj2&quot;</span>); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj3 === obj2, <span class="hljs-string">&quot;obj3 === obj2&quot;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1 === arr2, <span class="hljs-string">&quot;arr1 === arr2&quot;</span>); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">null</span> === <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;null === null&quot;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">undefined</span> === <span class="hljs-literal">undefined</span>, <span class="hljs-string">&quot;undefined === undefined&quot;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">null</span> === <span class="hljs-literal">undefined</span>, <span class="hljs-string">&quot;null===undefined&quot;</span>); <span class="hljs-comment">// false</span><br><br><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>  [+<span class="hljs-number">0</span>, <span class="hljs-number">1</span>],<br>  [-<span class="hljs-number">0</span>, <span class="hljs-number">2</span>],<br>  [<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-number">3</span>],<br>  [<span class="hljs-title class_">NaN</span>, <span class="hljs-number">1</span>],<br>  [<span class="hljs-title class_">NaN</span>, <span class="hljs-number">2</span>],<br>  [obj1, <span class="hljs-number">1</span>],<br>  [obj2, <span class="hljs-number">2</span>],<br>  [obj3, <span class="hljs-number">3</span>],<br>  [arr1, <span class="hljs-number">1</span>],<br>  [arr2, <span class="hljs-number">2</span>],<br>  [<span class="hljs-literal">null</span>, <span class="hljs-number">1</span>],<br>  [<span class="hljs-literal">null</span>, <span class="hljs-number">2</span>],<br>  [<span class="hljs-literal">undefined</span>, <span class="hljs-number">1</span>],<br>  [<span class="hljs-literal">undefined</span>, <span class="hljs-number">2</span>],<br>]);<br></code></pre></td></tr></table></figure><img src="images/2.jpg" width="50%"/><p>我们可以看出,如果 === 为true,那么就是对应同一个键,会被覆盖,</p><ul><li> 特殊的就 <code>NaN: ===为false,但是当成一个键</code></li><li> 对象、数组不是同一个,只有指向同一个指针的时候,才是同一个.</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>我们打印下原型上的方法<code>console.log(Map.prototype)</code>, 可以看到里面无非就是 <code>增删改查、size、遍历</code>方法<br><img src="images/3.jpg" width="70%"/><br>我们测试下各个方法的返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map.<span class="hljs-title function_">get</span>(<span class="hljs-title class_">NaN</span>)); <span class="hljs-comment">// 2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map.<span class="hljs-title function_">get</span>(<span class="hljs-number">0</span>),map.<span class="hljs-title function_">get</span>(- <span class="hljs-number">0</span>)); <span class="hljs-comment">// 2 2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map.<span class="hljs-title function_">has</span>(<span class="hljs-title class_">NaN</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map.<span class="hljs-title function_">has</span>(<span class="hljs-number">0</span>),map.<span class="hljs-title function_">has</span>(-<span class="hljs-number">0</span>)); <span class="hljs-comment">// true true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map.<span class="hljs-property">size</span>); <span class="hljs-comment">// 9</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map.<span class="hljs-title function_">delete</span>(<span class="hljs-title class_">NaN</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map.<span class="hljs-title function_">clear</span>()); <span class="hljs-comment">// undefined,无返回值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map.<span class="hljs-property">size</span>); <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>  [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>],<br>  [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">2</span>],<br>  [<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">3</span>],<br>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;----for of----&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> map) &#123;<br>  <span class="hljs-comment">// 等同于map1.entries()</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;----map.keys()----&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">keys</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;----map.values()----&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">values</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;----map.entries()----&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">entries</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>上面我们可以看出<code>for of 和 map.entries</code>是一样的效果</li></ul><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组-&gt;map</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">arrayToMap</span>(<span class="hljs-params">array</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(array); <span class="hljs-comment">// Map(3) &#123; &#x27;a&#x27; =&gt; 1, &#x27;b&#x27; =&gt; 2, &#x27;c&#x27; =&gt; 3 &#125;</span><br>&#125;<br><span class="hljs-comment">// map-&gt;数组</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mapToArray</span>(<span class="hljs-params">map</span>) &#123;<br>  <span class="hljs-keyword">return</span> [...map]; <span class="hljs-comment">// [[&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2], [&#x27;c&#x27;, 3]]</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h2><ul><li>主要特点是,键只能是对象如对象、数组、函数(null除外)和symbol,不能是基本类型,打印结果和map格式一样</li><li>键是弱引用,不计入垃圾回收机制, 但值仍是强引用,计入垃圾回收</li><li>只有增删改查,没有遍历、size, 因为是弱引用,不知道浏览器什么时候回收,所以也就不可能存在遍历,size</li></ul><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> weakMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>([<br>  [&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;, <span class="hljs-number">1</span>],<br>  [[], <span class="hljs-number">2</span>],<br>  [<span class="hljs-function">() =&gt;</span> &#123;&#125;, <span class="hljs-number">2</span>],<br>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(weakMap);<br>weakMap.<span class="hljs-title function_">set</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// TypeError: Invalid value used as weak map key</span><br></code></pre></td></tr></table></figure><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><p>我们打印下原型上的方法<code>console.log(WeakMap.prototype)</code>,可以看到没有遍历,只有和map一样常用的<code>get、set、delete、has</code><br><img src="images/5.jpg" width="70%"/></p><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>我们对比看下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> map= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;;<br>map.<span class="hljs-title function_">set</span>(obj,<span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map.<span class="hljs-title function_">has</span>(obj)); <span class="hljs-comment">// true</span><br>obj=<span class="hljs-literal">null</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map.<span class="hljs-title function_">has</span>(obj)); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map); <span class="hljs-comment">// Map(1) &#123; &#123; a: 1 &#125; =&gt; 1 &#125;</span><br></code></pre></td></tr></table></figure><p>上面属于强引用, 虽然把<code>obj=null</code>, 但是map仍存在引用关系.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> weakMap= <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>();<br><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;;<br>weakMap.<span class="hljs-title function_">set</span>(obj,<span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(weakMap.<span class="hljs-title function_">has</span>(obj)); <span class="hljs-comment">// true</span><br>obj=<span class="hljs-literal">null</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(weakMap.<span class="hljs-title function_">has</span>(obj)); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(weakMap); <span class="hljs-comment">// WeakMap(1) &#123; &#123; a: 1 &#125; =&gt; 1 &#125;,打断点去控制台垃圾回收旧没有了</span><br></code></pre></td></tr></table></figure><p>上面我们看着结果貌似一样,实际上, 我们打断点,在控制台<code>Memory</code>手动清除垃圾,此时就没有了<br><img src="images/5.jpg" width="80%"/></p><ul><li>弱引用指的是,我们并不能控制什么时候回收,由浏览器自行决定,专用场合就是，它的键所对应的对象，可能会在将来消失。WeakMap结构有助于防止内存泄漏。</li></ul><p>注意,<code>键是弱引用,值是强引用</code>,我们修改下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>();<br><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;;<br><span class="hljs-keyword">let</span> value = &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">1</span> &#125;;<br>map.<span class="hljs-title function_">set</span>(obj, value);<br>value = <span class="hljs-literal">null</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map); <span class="hljs-comment">//  WeakMap &#123; &#123;a:1&#125; =&gt; &#123; b: 1 &#125; &#125;</span><br></code></pre></td></tr></table></figure><p>此时就算我们去手动清除垃圾,打印还是会有</p><h3 id="转换-1"><a href="#转换-1" class="headerlink" title="转换"></a>转换</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组-&gt;map</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">arrayToMap</span>(<span class="hljs-params">array</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(array); <br>&#125;<br><span class="hljs-comment">// map-&gt;数组 不存在,因为是弱引用,都不存在遍历,所以自然不能通过...进行转换</span><br><br></code></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><blockquote><p>类似于数组，只不过成员的值都是唯一的，自带去重功能</p></blockquote><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<br>  <span class="hljs-number">0</span>,<br>  -<span class="hljs-number">0</span>,<br>  <span class="hljs-string">&#x27;0&#x27;</span>,<br>  <span class="hljs-title class_">NaN</span>,<br>  <span class="hljs-title class_">NaN</span>,<br>  &#123;&#125;,<br>  &#123;&#125;,<br>  [],<br>  [],<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-string">&#x27;1&#x27;</span>,<br>  <span class="hljs-number">1</span><br>]);<br>set.<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(set);<br></code></pre></td></tr></table></figure><p>打印结果如下:<br><img src="images/7.jpg" width="70%"/></p><ul><li>和map一样, NaN会认为相同,去重</li></ul><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><p>我们打印下原型上的方法<code>console.log(Set.prototype)</code>, 可以看到里面无非就是 <code>增删改查、size、遍历</code>方法<br><img src="images/8.jpg" width="70%"/></p><h3 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<br>  <span class="hljs-number">1</span>,<br>  <span class="hljs-number">2</span><br>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(set);<br><span class="hljs-comment">// 在set中, key和value是一样的,是不存在key的,所以set.keys()和set.values()是一样的</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;----for of----&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set) &#123;<br>  <span class="hljs-comment">// 相当于set.values()</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;----set.keys()----&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">keys</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;----set.values()----&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">values</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;----set.entries()----&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">entries</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br></code></pre></td></tr></table></figure><img src="images/9.jpg" width="30%"/><ul><li>上面我们可以看出<code>for of 和 set.values</code>是一样的效果</li></ul><h3 id="转换-2"><a href="#转换-2" class="headerlink" title="转换"></a>转换</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 数组-&gt;map</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">arrayToSet</span>(<span class="hljs-params">array</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(array); <span class="hljs-comment">// Set(2) &#123; 1, 2 &#125;</span><br>&#125;<br><span class="hljs-comment">// set-&gt;数组</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setToArray</span>(<span class="hljs-params">map</span>) &#123;<br>  <span class="hljs-keyword">return</span> [...set]; <span class="hljs-comment">// [1, 2]</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h2><ul><li>和set一样,也会自动去重、只能添加对象如对象、数组、函数(null除外)和symbol,不能是基本类型,打印结果和set格式一样</li><li>是弱引用,不计入垃圾回收机制</li><li>只有增删改查,没有遍历、size, 因为是弱引用,不知道浏览器什么时候回收,所以也就不可能存在遍历,size</li></ul><h3 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> weakSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakSet</span>([&#123;&#125;,<span class="hljs-function">()=&gt;</span>&#123;&#125;,[]]);<br>weakSet.<span class="hljs-title function_">add</span>(&#123;&#125;);<br>weakSet.<span class="hljs-title function_">add</span>(&#123;&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(weakSet);<br>weakSet.<span class="hljs-title function_">set</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// TypeError:  Invalid value used in weak set</span><br></code></pre></td></tr></table></figure><h3 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h3><p>我们打印下原型上的方法<code>console.log(WeakSet.prototype)</code>,可以看到没有遍历,只有和map一样常用的<code>add、delete、has</code><br><img src="images/10.jpg" width="70%"/></p><h3 id="弱引用-1"><a href="#弱引用-1" class="headerlink" title="弱引用"></a>弱引用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> weakSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakSet</span>();<br><span class="hljs-keyword">let</span> obj=&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;<br>weakSet.<span class="hljs-title function_">add</span>(obj);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(weakSet.<span class="hljs-title function_">has</span>(obj)); <span class="hljs-comment">// true</span><br>obj=<span class="hljs-literal">null</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(weakSet.<span class="hljs-title function_">has</span>(obj)); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(weakSet);<br></code></pre></td></tr></table></figure><p>和上面的weakMap一样, 也是清除垃圾才能看到.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>map是添加([key,value]) 对标对象, set是添加([value,value])对标数组,原型上方法是增删改查、size、遍历</li><li>weakMap和weakSet和上面格式一样, 但是是弱引用, 注意weakMap键名是弱引用,值是强引用, 原型上方法没有遍历、size</li><li>set和weakSet会自带去重</li><li>这四个类型对于NaN,都认为是一个键</li><li>map的新增是set,set的新增是add</li><li>这四个类型不是js新增的基本数据类型,它们都是 ES6 引入的新的<strong>数据结构</strong>，被称为“集合类型”（Collection types）或“内置对象”，属于复杂数据类型或引用类型。</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
          <category> 傻傻分不清楚 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2.reactive和readonly</title>
      <link href="/ypf-blog/2024/04/29/vue3%E6%BA%90%E7%A0%81/2.reactive%E5%92%8Creadonly/"/>
      <url>/ypf-blog/2024/04/29/vue3%E6%BA%90%E7%A0%81/2.reactive%E5%92%8Creadonly/</url>
      
        <content type="html"><![CDATA[<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>我们先学习下<code>reactive,shallowReactive,readonly,shallowReadonly</code>的基本使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/3.3.4/vue.global.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- &lt;script src=&quot;../packages/reactivity/dist/@vue/reactivity.global.js&quot;&gt;&lt;/script&gt; --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> &#123; reactive,readonly,shallowReactive, shallowReadonly &#125; = <span class="hljs-variable language_">window</span>.<span class="hljs-property">VueReactivity</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">// 返回一个对象:默认深度响应式代理</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">group</span>(<span class="hljs-string">&#x27;reactive&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> state = <span class="hljs-title function_">reactive</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,</span><br><span class="language-javascript">      list : [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state.<span class="hljs-property">list</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupEnd</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 返回一个对象:浅层响应式代理</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">group</span>(<span class="hljs-string">&#x27;shallowReactive&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> state1 = <span class="hljs-title function_">shallowReactive</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,</span><br><span class="language-javascript">      list : [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state1.<span class="hljs-property">list</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state1);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupEnd</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 返回一个对象:只读代理</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">group</span>(<span class="hljs-string">&#x27;readonly&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> state2 = <span class="hljs-title function_">readonly</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,</span><br><span class="language-javascript">      list : [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    state2.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Doe&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state2.<span class="hljs-property">name</span>);</span><br><span class="language-javascript">    state2.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state2.<span class="hljs-property">list</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupEnd</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 返回一个对象:浅层只读代理</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">group</span>(<span class="hljs-string">&#x27;shallowReadonly&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> state3 = <span class="hljs-title function_">shallowReadonly</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,</span><br><span class="language-javascript">      list : [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    state3.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Doe&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state3.<span class="hljs-property">name</span>);</span><br><span class="language-javascript">    state3.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state3.<span class="hljs-property">list</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupEnd</span>();</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>直接看结果<br><img src="images/1.jpg" width="80%"/><br>很容易理解:</p><ul><li>reactive是用来创建代理对象的,默认是深层的</li><li>shallowReactive是浅层的,即第一层</li><li>readonly是创建深层只读代理对象的,任意层都不可以修改</li><li>shallowReadonly是创建浅层只读代理对象的, 第一层不可修改值,但深层可以修改</li></ul><p>接下来我们就开始通过来实现了</p><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 新建 packages/reactivity/src/index.ts</span><br><span class="hljs-comment">// 1. 导出入口文件</span><br><span class="hljs-keyword">export</span> &#123;<br>    reactive,<br>    shallowReactive,<br>    readonly,<br>    shallowReadonly,<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reactive&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 新建 packages/reactivity/src/reactive.ts</span><br><span class="hljs-keyword">import</span> &#123; isObject &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vue/shared&#x27;</span><br><span class="hljs-keyword">import</span> &#123; reactiveHandlers, readonlyHandlers, shallowReactiveHandlers, shallowReadonlyHandlers &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./baseHandlers&#x27;</span><br><span class="hljs-comment">// 2. 导出4个代理方法, 都调用了createReactiveObject函数生成,参数都有各自的handler处理器</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">reactive</span>(<span class="hljs-params">target</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createReactiveObject</span>(target, <span class="hljs-literal">false</span>, reactiveHandlers) <span class="hljs-comment">// target是对象, false是不是只读的, reactiveHandlers是代理对象</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">shallowReactive</span>(<span class="hljs-params">target</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createReactiveObject</span>(target, <span class="hljs-literal">false</span>, shallowReactiveHandlers) <span class="hljs-comment">// target是对象, false是不是只读的, shallowReactiveHandlers是代理对象</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">readonly</span>(<span class="hljs-params">target</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createReactiveObject</span>(target, <span class="hljs-literal">true</span>, readonlyHandlers) <span class="hljs-comment">// target是对象, true是只读的, readonlyHandlers是代理对象</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">shallowReadonly</span>(<span class="hljs-params">target</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createReactiveObject</span>(target, <span class="hljs-literal">true</span>, shallowReadonlyHandlers) <span class="hljs-comment">// target是对象, true是只读的, shallowReadonlyHandlers是代理对象</span><br>&#125;<br><span class="hljs-comment">// 3.创建createReactiveObject函数(实现代理的核心)</span><br><span class="hljs-comment">// 用于存储代理,代理过就不会二次代理</span><br><span class="hljs-comment">// WeakMap 是弱引用的Map，不会造成内存泄漏, key必须是对象, value可以是任意类型, 自动的垃圾回收机制</span><br><span class="hljs-keyword">const</span> reactiveMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>() <br><span class="hljs-keyword">const</span> readonlyMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>()<br><span class="hljs-comment">// target是对象, isReadonly是只读的, baseHandlers是代理对象</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createReactiveObject</span>(<span class="hljs-params">target, isReadonly, baseHandlers</span>) &#123;<br>    <span class="hljs-comment">// 如果目标不是对象，直接返回</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isObject</span>(target)) &#123;<br>        <span class="hljs-keyword">return</span> target<br>    &#125;<br>    <span class="hljs-comment">// 如果已经代理过了，直接返回(优化)</span><br>    <span class="hljs-keyword">const</span> proxyMap = isReadonly ? readonlyMap : reactiveMap<br>    <span class="hljs-keyword">const</span> existingProxy = proxyMap.<span class="hljs-title function_">get</span>(target)<br>    <span class="hljs-keyword">if</span> (existingProxy) &#123;<br>        <span class="hljs-keyword">return</span> existingProxy<br>    &#125;<br>    <span class="hljs-comment">// 创建代理对象</span><br>    <span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, baseHandlers)<br>    proxyMap.<span class="hljs-title function_">set</span>(target, proxy)<br>    <span class="hljs-keyword">return</span> proxy<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 4.新建 packages/reactivity/src/baseHandlers.ts</span><br><span class="hljs-keyword">import</span> &#123; isObject &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vue/shared&#x27;</span><br><span class="hljs-keyword">import</span> &#123; reactive, readonly &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reactive&#x27;</span><br><span class="hljs-comment">// 5.创建get生成器</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createGetter</span>(<span class="hljs-params">isReadonly = <span class="hljs-literal">false</span>, shallow = <span class="hljs-literal">false</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key, receiver</span>) &#123;<br>        <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, key, receiver)<br>        <span class="hljs-keyword">if</span> (shallow) &#123;<br>            <span class="hljs-comment">// 如果是浅层的，就返回结果</span><br>            <span class="hljs-keyword">return</span> res<br>        &#125;<br>        <span class="hljs-comment">// 是对象，递归代理</span><br>        <span class="hljs-comment">// 懒代理递归，即当取值的时候才会递归代理,性能优化</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isObject</span>(res)) &#123;<br>            <span class="hljs-keyword">return</span> isReadonly ? <span class="hljs-title function_">readonly</span>(res) : <span class="hljs-title function_">reactive</span>(res)<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 6.创建set生成器</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createSetter</span>(<span class="hljs-params">shallow = <span class="hljs-literal">false</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, value, receiver</span>) &#123;<br>        <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, key, value, receiver) <span class="hljs-comment">// 获取最新的值</span><br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> get = <span class="hljs-title function_">createGetter</span>() <span class="hljs-comment">// 不是只读的,是深层的</span><br><span class="hljs-keyword">const</span> shallowGet = <span class="hljs-title function_">createGetter</span>(<span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>) <span class="hljs-comment">// 不是只读的,是浅层的</span><br><span class="hljs-keyword">const</span> readonlyGet = <span class="hljs-title function_">createGetter</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// 是只读的,是深层的</span><br><span class="hljs-keyword">const</span> shallowReadonlyGet = <span class="hljs-title function_">createGetter</span>(<span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>) <span class="hljs-comment">// 是只读的,是浅层的</span><br><span class="hljs-keyword">const</span> set = <span class="hljs-title function_">createSetter</span>() <span class="hljs-comment">// 不是只读的,是深层的</span><br><span class="hljs-keyword">const</span> shallowSet = <span class="hljs-title function_">createSetter</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">// 不是只读的,是浅层的</span><br><br><span class="hljs-comment">// 7.导出4个handler</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> reactiveHandlers = &#123;<br>    get,<br>    set,<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> readonlyHandlers = &#123;<br>    <span class="hljs-attr">get</span>: readonlyGet,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">`Set operation on key &quot;<span class="hljs-subst">$&#123;<span class="hljs-built_in">String</span>(key)&#125;</span>&quot; failed: target is readonly.`</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> shallowReactiveHandlers = &#123;<br>    <span class="hljs-attr">get</span>: shallowGet,<br>    <span class="hljs-attr">set</span>: shallowSet,<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> shallowReadonlyHandlers = &#123;<br>    <span class="hljs-attr">get</span>: shallowReadonlyGet,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">`Set operation on key &quot;<span class="hljs-subst">$&#123;<span class="hljs-built_in">String</span>(key)&#125;</span>&quot; failed: target is readonly.`</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// packages/shared/src/index.ts</span><br><span class="hljs-comment">// 判断是否是对象 </span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">isObject</span>(<span class="hljs-params">val</span>) &#123;<br>    <span class="hljs-keyword">return</span> val !== <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-keyword">typeof</span> val === <span class="hljs-string">&#x27;object&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面实际流程很简单,比vue2递归遍历简单多了,我们接下来分步讲解下.</p><ol><li>入口index.ts导出4个方法<code>reactive,shallowReactive,readonly,shallowReadonly</code></li><li>这4个方法是统一调用了<code>createReactiveObject(target, readonly, handlers)</code>, handlers也同样对应了4个handlers<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">reactive</span>(<span class="hljs-params">target</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createReactiveObject</span>(target, <span class="hljs-literal">false</span>, reactiveHandlers) <span class="hljs-comment">// target是对象, false是不是只读的, reactiveHandlers是代理对象</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">shallowReactive</span>(<span class="hljs-params">target</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createReactiveObject</span>(target, <span class="hljs-literal">false</span>, shallowReactiveHandlers) <span class="hljs-comment">// target是对象, false是不是只读的, shallowReactiveHandlers是代理对象</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">readonly</span>(<span class="hljs-params">target</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createReactiveObject</span>(target, <span class="hljs-literal">true</span>, readonlyHandlers) <span class="hljs-comment">// target是对象, true是只读的, readonlyHandlers是代理对象</span><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">shallowReadonly</span>(<span class="hljs-params">target</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createReactiveObject</span>(target, <span class="hljs-literal">true</span>, shallowReadonlyHandlers) <span class="hljs-comment">// target是对象, true是只读的, shallowReadonlyHandlers是代理对象</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>createReactiveObject方法里面主要是进行 先判断不是对象(对象、数组)就return, 再从缓存<code>readonlyMap/reactiveMap(weakMap)</code>取,有的话就不代理,没有再进行<strong>第一层代理</strong>proxy<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createReactiveObject</span>(<span class="hljs-params">target, isReadonly, baseHandlers</span>) &#123;<br>    <span class="hljs-comment">// 如果目标不是对象，直接返回</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isObject</span>(target)) &#123;<br>        <span class="hljs-keyword">return</span> target<br>    &#125;<br>    <span class="hljs-comment">// 如果已经代理过了，直接返回(优化)</span><br>    <span class="hljs-keyword">const</span> proxyMap = isReadonly ? readonlyMap : reactiveMap<br>    <span class="hljs-keyword">const</span> existingProxy = proxyMap.<span class="hljs-title function_">get</span>(target)<br>    <span class="hljs-keyword">if</span> (existingProxy) &#123;<br>        <span class="hljs-keyword">return</span> existingProxy<br>    &#125;<br>    <span class="hljs-comment">// 创建代理对象</span><br>    <span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, baseHandlers)<br>    proxyMap.<span class="hljs-title function_">set</span>(target, proxy)<br>    <span class="hljs-keyword">return</span> proxy<br>&#125;<br></code></pre></td></tr></table></figure></li><li>4个handlers,里面就是get、set, readonly的set很简单,直接抛出警告⚠️即可<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> reactiveHandlers = &#123;<br>    get,<br>    set,<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> readonlyHandlers = &#123;<br>    <span class="hljs-attr">get</span>: readonlyGet,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">`Set operation on key &quot;<span class="hljs-subst">$&#123;<span class="hljs-built_in">String</span>(key)&#125;</span>&quot; failed: target is readonly.`</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> shallowReactiveHandlers = &#123;<br>    <span class="hljs-attr">get</span>: shallowGet,<br>    <span class="hljs-attr">set</span>: shallowSet,<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> shallowReadonlyHandlers = &#123;<br>    <span class="hljs-attr">get</span>: shallowReadonlyGet,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">`Set operation on key &quot;<span class="hljs-subst">$&#123;<span class="hljs-built_in">String</span>(key)&#125;</span>&quot; failed: target is readonly.`</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>4个handlers各自对应get、set都是通过createGetter、createSetter来创建,我们先来看下createGetter, <ul><li>里面主要使用了Reflect.get进行取值</li><li>如果是shallow浅层,直接return返回取的值</li><li>在判断如果是对象, 根据是否只读, <code>递归调用readonly(res)或者reactive(res)</code>,注意,<strong>这里和vue2对比的好处是,vue2是初始化全部递归代理, 这个是默认只代理第一层,只有取值的时候才会递归代理</strong><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createGetter</span>(<span class="hljs-params">isReadonly = <span class="hljs-literal">false</span>, shallow = <span class="hljs-literal">false</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key, receiver</span>) &#123;<br>        <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, key, receiver)<br>        <span class="hljs-keyword">if</span> (shallow) &#123;<br>            <span class="hljs-comment">// 如果是浅层的，就返回结果</span><br>            <span class="hljs-keyword">return</span> res<br>        &#125;<br>        <span class="hljs-comment">// 是对象，递归代理</span><br>        <span class="hljs-comment">// 懒代理递归，即当取值的时候才会递归代理,性能优化</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isObject</span>(res)) &#123;<br>            <span class="hljs-keyword">return</span> isReadonly ? <span class="hljs-title function_">readonly</span>(res) : <span class="hljs-title function_">reactive</span>(res)<br>        &#125;<br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li>我们再来看下createSetter, 很简单,直接就是修改值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createSetter</span>(<span class="hljs-params">shallow = <span class="hljs-literal">false</span></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, value, receiver</span>) &#123;<br>        <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, key, value, receiver) <span class="hljs-comment">// 获取最新的值</span><br>        <span class="hljs-comment">// 触发更新</span><br>        <span class="hljs-keyword">return</span> res<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><h3 id="为什么需要Reflect-get"><a href="#为什么需要Reflect-get" class="headerlink" title="为什么需要Reflect.get?"></a>为什么需要Reflect.get?</h3>我们会好奇,get函数里面直接 用对象取值就行了, 为什么还需要<code>Reflect.get</code>?举个例子就明白了<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> origin = &#123;<br>   <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>   <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>   <span class="hljs-keyword">get</span> <span class="hljs-title function_">c</span>() &#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>;<br>   &#125;,<br> &#125;;<br> <span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(origin, &#123;<br>   <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key, receiver</span>) &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;get&quot;</span>, key);<br>     <span class="hljs-comment">// return origin[key];</span><br>     <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, key, receiver);<br>   &#125;,<br> &#125;);<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">c</span>);<br></code></pre></td></tr></table></figure>如果使用<code>orign[key]</code>,我们看下打印截图<img src="images/2.jpg" width="80%"/>如果使用`Reflect`,我们看下打印截图<img src="images/3.jpg" width="80%"/></li></ol><p>我们发现,如果使用Reflect,可以将this指向为receiver,这样一个key里面依赖其他key,我们就会在get中捕获到.</p>]]></content>
      
      
      <categories>
          
          <category> vue3源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1.Proxy和Reflect</title>
      <link href="/ypf-blog/2024/04/09/vue3%E6%BA%90%E7%A0%81/1.Proxy%E5%92%8CReflect/"/>
      <url>/ypf-blog/2024/04/09/vue3%E6%BA%90%E7%A0%81/1.Proxy%E5%92%8CReflect/</url>
      
        <content type="html"><![CDATA[<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p><code>Proxy</code> 对象用于创建一个对象的代理,通过代理从而实现基本操作的拦截和自定义如属性查找、赋值、枚举、函数调用等）。是ES6(ES2015)新增.<strong>在代理对象上所作的任何操作都会如实的反应到源对象身上，在这里你可以认为代理对象几乎等同于源对象,使用没什么区别,如origin.a和proxy.a都可以拿到值</strong></p></blockquote><p>换个方式理解: vue中的 <code>虚拟dom就是对真实dom的一层抽象</code>,因为直接操作真实DOM所带来的负面影响较大，所以考虑在真实DOM上增加一层抽象来得以解决这个问题，而这层抽象就是虚拟DOM.毫不客气的说，虚拟DOM承担了我们对真实DOM所做的一切操作，而Diff算法则会依赖这层抽象来决定是否更新真实DOM.</p><p>如果把源对象看做“真实DOM”，代理对象看做“虚拟DOM”，捕获器则看做“Diff”算法，这样一来 Proxy 便与它有了异曲同工之妙。我们对代理对象(虚拟DOM)所做的一切操作，均由捕获器(Diff)决定此次操作是否反映至源对象(真实DOM)中，并由捕获器对此次操作给出一系列反馈</p><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>如果你决定了在项目中大幅使用Proxy时，那么你应当注意一个问题——兼容性。 Proxy 是在ES6中新增的标准，目前主流浏览器中均已支持，但总有漏网之鱼(其它浏览器)是不支持该特性的，即便是 babel 也无能为力.<br>我们知道 箭头函数 也是ES6的产物，而babel在转换箭头函数时会将箭头函数转为普通函数，但对于Proxy却不会做出任何转换.如下图<br>转换前:<br><img src="images/1.webp" width="80%"/><br>转换后<br><img src="images/2.webp" width="80%"/><br>从上图中我们可以看出Proxy依旧是Proxy，如果我们在低于ES6的环境中去运行上述代码是会报错的，因为它不认识Proxy<br><img src="images/3.jpg" width="80%"/></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="参数都必填"><a href="#参数都必填" class="headerlink" title="参数都必填"></a>参数都必填</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> origin = &#123;&#125; <span class="hljs-comment">// 源对象</span><br><span class="hljs-keyword">const</span> handler = &#123;&#125; <span class="hljs-comment">// 捕获器 (get、set、target、has、...)</span><br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(origin, handler) <span class="hljs-comment">// 正确</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>() <span class="hljs-comment">// 错误</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(origin) <span class="hljs-comment">// 错误</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(origin,&#123;&#125;) <span class="hljs-comment">// 正确</span><br></code></pre></td></tr></table></figure><ul><li>proxy缺少任何一个参数则抛出 <code>Uncaught TypeError: Cannot create proxy with a non-object as target or handler</code> 错误</li><li>与vue2的区别是:Object.defineProperty是深度遍历属性且新增的属性只能通过$set来代理, 否则无法监听. 而proxy直接就<strong>监听整个对象</strong>,所以不存在遍历,新增无法监听</li></ul><h4 id="代理层级"><a href="#代理层级" class="headerlink" title="代理层级"></a>代理层级</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> origin = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: &#123;<br>    <span class="hljs-attr">c</span>: <span class="hljs-number">2</span>,<br>  &#125;,<br>  <span class="hljs-attr">list</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>&#125;;<br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(origin, &#123;&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">b</span>); <span class="hljs-comment">// &#123;c: 2&#125;是不会被代理的</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">list</span>); <span class="hljs-comment">// [1, 2, 3]是不会被代理的</span><br><span class="hljs-comment">// 代理list</span><br><span class="hljs-keyword">const</span> proxy1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(origin.<span class="hljs-property">list</span>, &#123;&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy1);<br></code></pre></td></tr></table></figure><ul><li>所以proxy只会代理第一层,如果需要遍历深层,需要递归遍历,如果上面在handler里面写get,同样深层也不会触发</li></ul><h4 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> origin = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">age</span> = <span class="hljs-number">18</span>;<br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(origin, &#123;&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Proxy</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>); <span class="hljs-comment">// undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">__proto__</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span>, <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> === <span class="hljs-literal">null</span>); <span class="hljs-comment">// null true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(origin.<span class="hljs-property">name</span>,origin.<span class="hljs-property">c</span>,origin.<span class="hljs-property">age</span>,proxy.<span class="hljs-property">name</span>,proxy.<span class="hljs-property">c</span>,proxy.<span class="hljs-property">age</span>); <span class="hljs-comment">// John undefined 18 John undefined 18</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(origin===proxy); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(origin==proxy); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(origin <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>运行结果如下<br><img src="images/4.jpg" width="80%"/></p><ul><li><code>Proxy.prototype</code> 为 undefined, 那么疑问来了,实例的__proto__等于构造函数的原型, 是不是proxy.__proto__也为undefined. 实际测试比较特殊<code>proxy.__proto__ === Object.prototype</code></li><li>我们说过所有对代理对象的操作handler最终都会如实地映射至源对象身上，那 proxy.<strong>proto</strong> 这个操作就相当于 origin.<strong>proto</strong> ，而 origin.<strong>proto</strong> 会指向 Object.prototype ，所以也就不难解释为什么 proxy.<strong>proto</strong> 会指向 Object.prototype 了</li><li><strong>在代理对象上所作的任何操作都会如实的反应到源对象身上，在这里你可以认为代理对象几乎等同于源对象</strong></li></ul><h3 id="控制台中的Proxy实例对象"><a href="#控制台中的Proxy实例对象" class="headerlink" title="控制台中的Proxy实例对象"></a>控制台中的Proxy实例对象</h3><p>我们看下控制台proxy的结构<br><img src="images/5.jpg" width="80%"/><br>[[Handler]] 为处理对象， [[Target]] 为源对象， [[IsRevoked]] 代表当前代理对象是否已经被撤销。如果当前代理对象被撤销了，那么 [[IsRevoked]] 的值是 true ，而 [[Target]] 与 [[Handler]] 一律为 null, <code>Revoke英文翻译是废除、撤销的意思</code><br><img src="images/6.jpg" width="80%"/></p><h3 id="IsRevoked内部属性"><a href="#IsRevoked内部属性" class="headerlink" title="IsRevoked内部属性"></a>IsRevoked内部属性</h3><h4 id="符号"><a href="#符号" class="headerlink" title="[[]]符号"></a>[[]]符号</h4><p>[[]]这个符号在JS里代表内部属性。在JS里，[[Target]]这种两个括号包裹的属性，属于内部特性，这种些特性开发者无法直接访问。之所以你在F12里打印proxy对象能够看到这些内部特性，是为了让开发者明确知道这个对象是被代理过的，否则就无法区分普通对象和代理对象了。<br>F12里打印的对象，都会有意的显示一些内部特性，比如[[prototype]]。但这些内部特性和对象上直接可以获取的属性是并不是同一个东西.实际上js提供了__proto__来访问.<br>所以对于proxy，并不是通过<code>proxy.IsRevoked</code>这样去获取是否撤销代理.</p><img src="images/7.jpg" width="80%"/><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><ul><li>有时候你可能需要撤销代理对象与源对象之前的关联，此时就<code>不用Proxy</code>了,直接用 <code>Proxy.revocable</code> 代替，该方法会返回一个对象，返回的这个对象中<code>包含代理对象 proxy 与撤销函数 revoke</code> ，默认IsRevoked是false, 表示没有取消代理,即代理状态. </li><li>需要注意的是， revoke 无论调用多少次，其结果总是相同，但如果在调用之后还试图访问代理对象中的属性，则会抛出 TypeError 。撤销代理之后不会对源对象造成任何负面影响</li><li>[[IsRevoked]]是内部属性,不能获取, js没有提供获取是否代理的方法.我们可以<code>自己定义Proxy.revocable函数</code></li><li>如果当前代理对象被撤销了，那么 [[IsRevoked]] 的值是 true ，而 [[Target]] 与 [[Handler]] 一律为 null, Revoke英文翻译是废除、撤销的意思<img src="images/8.jpg" width="80%"/></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> proxy1= <span class="hljs-title class_">Proxy</span>.<span class="hljs-title function_">revocable</span>(origin, &#123;&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy1.<span class="hljs-property">proxy</span>.<span class="hljs-property">name</span>); <span class="hljs-comment">// John</span><br>proxy1.<span class="hljs-title function_">revoke</span>(); <span class="hljs-comment">// 取消代理</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(origin.<span class="hljs-property">name</span>); <span class="hljs-comment">// John</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy1.<span class="hljs-property">proxy</span>.<span class="hljs-property">name</span>); <span class="hljs-comment">// Cannot perform &#x27;get&#x27; on a proxy that has been revoked</span><br></code></pre></td></tr></table></figure><img src="images/9.jpg" width="80%"/><h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h3><ul><li>origin中的函数,如果<code>proxy.key</code>this指向proxy, <code>origin.key</code>this指向origin</li><li>捕获器handler中函数,this指向handler函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> origin = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>  <span class="hljs-attr">getName</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-string">&#x27;getName&#x27;</span>); <span class="hljs-comment">// proxy</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>;<br>  &#125;,<br>&#125;;<br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(origin, &#123;<br>  <span class="hljs-title function_">get</span> (target, key, receiver) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key,<span class="hljs-string">&#x27;key&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-string">&#x27;handler&#x27;</span>); <span class="hljs-comment">// handler对象</span><br>    <span class="hljs-keyword">return</span> target[key];<br>  &#125;,<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-title function_">getName</span>()) <span class="hljs-comment">// John</span><br></code></pre></td></tr></table></figure><img src="images/10.jpg" width="80%"/><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><ul><li>handler中的get函数,会返回3个参数<code>target-origin对象</code>,<code>key-获取的key</code>,<code>receiver-proxy对象</code></li><li>默认我们不返回,获取值的时候也是undefined, 一般我们会进行判断抛出错误</li><li>我们在get中应该使用<code>origin[key]</code>进行返回,不能使用<code>proxy[key]</code>进行返回,因为会重复触发get导致死循环</li><li>只有访问代理proxy上的属性,才会触发get, 通过orign访问属性,不会触发</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> origin = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>&#125;;<br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(origin, &#123;<br>  <span class="hljs-title function_">get</span> (target, key, receiver) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>      target, <span class="hljs-comment">// origin对象</span><br>      key, <span class="hljs-comment">// 获取值的key</span><br>      receiver <span class="hljs-comment">// proxy</span><br>    );<br>    <span class="hljs-keyword">if</span>(key <span class="hljs-keyword">in</span> target) &#123;<br>      <span class="hljs-keyword">return</span> target[key];<br>      <span class="hljs-comment">// return proxy[key] 注意⚠️:不能这样写,相当于重复触发get导致死循环</span><br>    &#125;<br>    <span class="hljs-comment">// 如果不写else进行return, 此时proxy.c也是undefined, 我们也可以像下面代码一样进行抛出错误</span><br>    <span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Property &quot;&#x27;</span> + key + <span class="hljs-string">&#x27;&quot; does not exist.&#x27;</span>);<br>    &#125;<br><br>  &#125;,<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">name</span>); <span class="hljs-comment">// John 会触发get</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(origin.<span class="hljs-property">name</span>); <span class="hljs-comment">// John 不会触发get</span><br><br></code></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><ul><li>handler中的set函数,会返回4个参数<code>target-origin对象</code>,<code>key-被设置值的key</code>,<code>value-要设置的value</code>,<code>receiver-proxy对象</code></li><li>一般设置完值后需要<code>return true</code>表示设置成功,也可不写, 下面代码没有判断条件啥的,总是成功的,所以<code>return false</code>也没影响,但从代码阅读逻辑上最好<code>return true</code>表示设置成功</li><li>我们在set中应该使用<code>target[key] = value;</code>,不能使用<code>proxy[key] = value;</code>进行返回,因为会重复触发set导致死循环</li><li>set一个origin对象不存在的key,相当于新增一个key,就算原型存在这个key,也不会覆盖</li><li>通过origin或者proxy添加新属性, origin/proxy都会添加, 当使用proxy获取新属性,会触发get<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> origin = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">age</span> = <span class="hljs-number">18</span>;<br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(origin, &#123;<br>  <span class="hljs-title function_">set</span> (target, key, value, receiver) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>      target, <span class="hljs-comment">// origin对象</span><br>      key, <span class="hljs-comment">// 被设置值的key</span><br>      value, <span class="hljs-comment">// 要设置的value</span><br>      receiver <span class="hljs-comment">// proxy</span><br>    );<br>    target[key] = value;<br>    <span class="hljs-comment">// proxy[key] = value; 注意⚠️:不能这样写,相当于重复触发set导致死循环</span><br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 返回true表示设置成功 ,可以不写</span><br>  &#125;,<br>&#125;);<br>proxy.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;Tom&quot;</span>; <br>proxy.<span class="hljs-property">age</span> = <span class="hljs-number">20</span>;  <span class="hljs-comment">// 注意,此处set不是修改原型链上的属性,而是添加了一个age属性</span><br>origin.<span class="hljs-property">test</span>=<span class="hljs-number">1</span>; <span class="hljs-comment">// 通过原对象添加属性,代理对象也会添加,获取代理对象的属性,也会触发get</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">name</span>); <span class="hljs-comment">// Tom</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(origin.<span class="hljs-property">name</span>);<span class="hljs-comment">// Tom</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">age</span>); <span class="hljs-comment">// 20</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(origin.<span class="hljs-property">age</span>); <span class="hljs-comment">// 20</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy.<span class="hljs-property">test</span>); <span class="hljs-comment">// 1 会触发get</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(origin) <span class="hljs-comment">// &#123;name:&quot;Tome&quot;,age:20&#125; </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy) <br></code></pre></td></tr></table></figure><img src="images/11.jpg" width="80%"/></li></ul><h3 id="广义上的对象"><a href="#广义上的对象" class="headerlink" title="广义上的对象"></a>广义上的对象</h3><blockquote><p><code>Proxy</code>不仅仅可以代理对象(object)，还可以代理其它对象(广义上的对象，因为JS中 万物皆对象 )</p></blockquote><h4 id="代理数组"><a href="#代理数组" class="headerlink" title="代理数组"></a>代理数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> origin = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>];<br>  <span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(origin, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key, receiver</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>        target, <span class="hljs-comment">// origin对象</span><br>        key, <span class="hljs-comment">// 获取值的key, 这里就是 index下标,注意是字符串,如&#x27;0&#x27;</span><br>        receiver <span class="hljs-comment">// proxy</span><br>      );<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, value, receiver</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>        target, <span class="hljs-comment">// origin对象</span><br>        key, <span class="hljs-comment">// 被设置值的key, 这里就是 index下标,注意是字符串,如&#x27;0&#x27;</span><br>        value, <span class="hljs-comment">// 要设置的value</span><br>        receiver <span class="hljs-comment">// proxy</span><br>      );<br>      <span class="hljs-keyword">return</span> target[key] = value; <span class="hljs-comment">// 返回表示设置成功 ,可以不写</span><br>    &#125;, <br>  &#125;);<br>  proxy[<span class="hljs-number">0</span>]<br>  proxy[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;<br>  proxy.<span class="hljs-property">length</span>=<span class="hljs-number">5</span> <span class="hljs-comment">// 设置数组长度,也会触发set, 里面打印的target仍是[1,2,3,4,5,6,7,8,9,10],key为&#x27;length&#x27;,value就是5</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(proxy) <span class="hljs-comment">// &#123;0: 1, 1: 2, 2: 3, 3: 4, 4: 5&#125; 会截取前5个元素</span><br>  proxy[<span class="hljs-number">5</span>] <span class="hljs-comment">// undefined, 此时会触发get,里面打印的target是[1,2,3,4,5]</span><br>  proxy[<span class="hljs-number">0</span>]=<span class="hljs-number">2</span> <span class="hljs-comment">// 修改数组元素,也会触发set,里面打印的target现在是[1,2,3,4,5]</span><br></code></pre></td></tr></table></figure><p><strong>说明修改数据长度, proxy会自动按长度截取数组</strong></p><h2 id="js对象的get和set"><a href="#js对象的get和set" class="headerlink" title="js对象的get和set"></a>js对象的get和set</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123;<br>  <span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;hello&quot;</span>,<br>  <span class="hljs-attr">lastName</span>: <span class="hljs-string">&quot;world&quot;</span>,<br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">fullName</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.firstName&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.lastName&#125;</span>`</span>;<br>  &#125;,<br>  <span class="hljs-keyword">set</span> <span class="hljs-title function_">fullName</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">const</span> parts = value.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = parts[<span class="hljs-number">0</span>];<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = parts[<span class="hljs-number">1</span>];<br>  &#125;,<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">fullName</span>);<br>person.<span class="hljs-property">fullName</span> = <span class="hljs-string">&quot;John Smith&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">fullName</span>);<br></code></pre></td></tr></table></figure><img src="images/12.jpg" width="80%"/>- 上面对象中的get、set实际es5很早就支持了,并不是es6新增的,它就是getter和setter,上面我们是通过对象字面量定义getter、setter,在es5我们还可以通过Object.defineProperty,es6是通过Class类- 在函数前面加上get, 此时就不是函数了,直接就是一个值(相当于函数调用), 一般用于隐藏内部逻辑,计算值.我们看上面截图,fullName就是一个计算好的值.- set只支持一个参数,不支持多个参数,会报错. 我们给key赋值的value就是set的参数<h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><blockquote><p>用于函数式调用Object内部方法</p></blockquote><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul><li>将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上。现阶段，某些方法同时在Object和Reflect对象上部署，未来的新方法将只部署在Reflect对象上。也就是说，从Reflect对象上可以拿到语言内部的方法。</li><li>修改某些Object方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 老写法</span><br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(target, property, attributes);<br>  <span class="hljs-comment">// success</span><br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>  <span class="hljs-comment">// failure</span><br>&#125;<br><br><span class="hljs-comment">// 新写法</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineProperty</span>(target, property, attributes)) &#123;<br>  <span class="hljs-comment">// success</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">// failure</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>让Object操作都变成函数行为。某些Object操作是命令式，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 老写法</span><br><span class="hljs-string">&#x27;assign&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-title class_">Object</span> <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 新写法</span><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">has</span>(<span class="hljs-title class_">Object</span>, <span class="hljs-string">&#x27;assign&#x27;</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li>Reflect对象的方法与Proxy对象的方法一一对应，<code>只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法,并且参数都一模一样</code>.如Proxy的get,和Reflect.get,方法一样,参数也一样.这就让Proxy对象可以方便地调用对应的Reflect方法，完成默认行为，作为修改行为的基础。</li><li>有了Reflect对象以后，很多操作会更易读。</li><li>Reflectt不是一个函数对象，因此它是不可构造的.与大多数全局对象不同，Reflect没有构造函数，所以不能将其与new一起使用，Reflect所有属性和方法都是静态的。我们打印看看<code>console.log(Reflect)</code><img src="images/13.jpg" width="80%"/></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 老写法</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">apply</span>.<span class="hljs-title function_">call</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-property">floor</span>, <span class="hljs-literal">undefined</span>, [<span class="hljs-number">1.75</span>]) <span class="hljs-comment">// 1</span><br><br><span class="hljs-comment">// 新写法</span><br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-property">floor</span>, <span class="hljs-literal">undefined</span>, [<span class="hljs-number">1.75</span>]) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>Reflect对象一共有 13 个静态方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">apply</span>(target, thisArg, args)<br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">construct</span>(target, args)<br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, name, receiver)<br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, name, value, receiver)<br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">defineProperty</span>(target, name, desc)<br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteProperty</span>(target, name)<br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">has</span>(target, name)<br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(target)<br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">isExtensible</span>(target)<br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">preventExtensions</span>(target)<br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(target, name)<br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">getPrototypeOf</span>(target)<br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">setPrototypeOf</span>(target, prototype)<br></code></pre></td></tr></table></figure><h4 id="get-1"><a href="#get-1" class="headerlink" title="get"></a>get</h4><p>我们知道<code>只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法,并且参数都一模一样</code>,所以get方法有3个参数 <code>target、key、receiver</code>,我们测试下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123;<br>  <span class="hljs-attr">firstName</span>: <span class="hljs-string">&quot;hello&quot;</span>,<br>  <span class="hljs-attr">lastName</span>: <span class="hljs-string">&quot;world&quot;</span>,<br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">fullName</span>() &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-string">&#x27;this&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.firstName&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.lastName&#125;</span>`</span>;<br>  &#125;,<br>  <span class="hljs-keyword">set</span> <span class="hljs-title function_">fullName</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">const</span> parts = value.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot; &quot;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = parts[<span class="hljs-number">0</span>];<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = parts[<span class="hljs-number">1</span>];<br>  &#125;,<br>  <span class="hljs-title function_">testFn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-string">&#x27;this&#x27;</span>);<br>  &#125;<br>&#125;;<br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(person, <span class="hljs-string">&quot;testFn&quot;</span>,&#123;<br>  <span class="hljs-attr">firstName</span>:<span class="hljs-number">1</span>,<br>  <span class="hljs-attr">lastName</span>:<span class="hljs-number">2</span><br>&#125;)() <span class="hljs-comment">// 此时this指向window, 需要加()执行,因为不加相当于读testFn属性,返回的是个函数体字符串</span><br>person.<span class="hljs-title function_">testFn</span>() <span class="hljs-comment">// 此时this指向person</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(person, <span class="hljs-string">&quot;fullName&quot;</span>)); <span class="hljs-comment">// hello world</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>  <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(person, <span class="hljs-string">&quot;fullName&quot;</span>, &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">lastName</span>: <span class="hljs-number">2</span>,<br>  &#125;) <span class="hljs-comment">// 此时this指向该对象</span><br>); <span class="hljs-comment">// 1 2</span><br></code></pre></td></tr></table></figure><ul><li>如果属性key是个getter,则getter函数中的this指向receiver,如果省略receiver,默认指向target</li></ul><h4 id="set-1"><a href="#set-1" class="headerlink" title="set"></a>set</h4><p>同理,set方法4个参数 <code>target、key、value、receiver</code>, 并且如果key是个setter, 则this指向receiver,如果省略receiver,默认指向target</p>]]></content>
      
      
      <categories>
          
          <category> vue3源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2.vue-router的hook</title>
      <link href="/ypf-blog/2024/03/28/vue-router/2.vue-router%E7%9A%84hook/"/>
      <url>/ypf-blog/2024/03/28/vue-router/2.vue-router%E7%9A%84hook/</url>
      
        <content type="html"><![CDATA[<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [],<br>&#125;);<br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-title function_">next</span>();<br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125;);<br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-title function_">next</span>();<br>  &#125;, <span class="hljs-number">3000</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>我们看上面代码, 知道router是可以写多个beforeEach,  但是只有最后一个next执行时,才会渲染页面. 所以</p><ul><li><code>router的hook实际上是一个队列,next是执行下一项</code></li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="定义beforeEach"><a href="#定义beforeEach" class="headerlink" title="定义beforeEach"></a>定义beforeEach</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/vue-router/index.<span class="hljs-property">js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VueRouter</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options = &#123;&#125;</span>) &#123;<br>    ...<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">beforeHooks</span> = []; <span class="hljs-comment">// 全局前置守卫</span><br>    ...<br>  &#125;<br>  ...<br>   <span class="hljs-comment">// 定义全局前置守卫</span><br>  <span class="hljs-title function_">beforeEach</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">beforeHooks</span>.<span class="hljs-title function_">push</span>(fn);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以上面我们调用beforeEach,都会push到数组里.</p><h3 id="执行队列"><a href="#执行队列" class="headerlink" title="执行队列"></a>执行队列</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/vue-router/history/base.<span class="hljs-property">js</span><br><span class="hljs-comment">// 列队执行 queue:列队 iterator:执行列队的函数 cb:回调函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">runQueue</span>(<span class="hljs-params">queue, iterator, cb</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">step</span>(<span class="hljs-params">index</span>) &#123;<br>    <span class="hljs-keyword">if</span> (index &gt;= queue.<span class="hljs-property">length</span>) &#123;<br>      <span class="hljs-title function_">cb</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (queue[index]) &#123;<br>        <span class="hljs-title function_">iterator</span>(queue[index], <span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-title function_">step</span>(index + <span class="hljs-number">1</span>);<br>        &#125;);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">step</span>(index + <span class="hljs-number">1</span>);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">step</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">History</span> &#123;<br>    <span class="hljs-comment">// 路由跳转</span><br>  <span class="hljs-title function_">transitionTo</span>(<span class="hljs-params">location, cb</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfo</span>(<br>      <span class="hljs-string">&quot;通过this.router.matcher.match将当前路径转换为matched数组形式的路由信息(上面扁平路由进行二次转换)&quot;</span><br>    );<br>    <span class="hljs-keyword">const</span> route = <span class="hljs-variable language_">this</span>.<span class="hljs-property">router</span>.<span class="hljs-property">matcher</span>.<span class="hljs-title function_">match</span>(location); <span class="hljs-comment">// 获取当前路径对应的路由信息</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(route, <span class="hljs-number">1232131</span>);<br>    <span class="hljs-comment">// console.log(&#x27;如 &#123;/bar/child:&#123;path,component,parent&#125;&#125;转化为&#123;path:/bar/child,matched:[&#123;path:/bar,component,parent&#125;,&#123;path:child,component,parent&#125;]&#125;&#x27;);</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;转化前&quot;</span>, <span class="hljs-string">&quot;&#123;/bar/child:&#123;path,component,parent&#125;&#125;&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<br>      <span class="hljs-string">&quot;转化后&quot;</span>,<br>      <span class="hljs-string">&quot;&#123;path:/bar/child,matched:[&#123;path:/bar,component,parent&#125;,&#123;path:child,component,parent&#125;]&#125;&quot;</span><br>    );<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfoEnd</span>();<br><br>    <span class="hljs-comment">// 获取全局前置守卫列队</span><br>    <span class="hljs-keyword">const</span> queue = [].<span class="hljs-title function_">concat</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">router</span>.<span class="hljs-property">beforeHooks</span>);<br>    <span class="hljs-comment">// 执行列队</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">iterator</span> = (<span class="hljs-params">hook, next</span>) =&gt; &#123;<br>      <span class="hljs-title function_">hook</span>(route, <span class="hljs-variable language_">this</span>.<span class="hljs-property">current</span>, next);<br>    &#125;;<br>    <span class="hljs-title function_">runQueue</span>(queue, iterator , <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;this.current更新为当前路径对应的路由信息&quot;</span>);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">current</span> = route;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;更新视图&quot;</span>);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">cb</span>(route); <span class="hljs-comment">// 监听路由变化,更新视图</span><br>      cb &amp;&amp; <span class="hljs-title function_">cb</span>(route);<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们知道router初始化会执行 init函数,里面调用了 <code>transitionTo跳转当前url更新路由信息,最后渲染页面</code>,所以我们只需要渲染前递归队列就可以了.</p><ul><li>runQueue是一个列队执行函数, 通过next执行下一项, 全部结束后执行回调.</li><li>iterator是当前执行函数, 参数是to(最新的路由信息)、from(this.current-上一次路由信息)、next(执行下一项)</li><li>当队列结束后,执行cb,即<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">current</span> = route; <span class="hljs-comment">// 更新最新的路由信息</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">cb</span>(route); <span class="hljs-comment">// 监听路由变化,更新视图,即初始化通过history.listen传入的`app._route = route`</span><br>cb &amp;&amp; <span class="hljs-title function_">cb</span>(route); <span class="hljs-comment">// 执行调用trasntionTo方法时候,传入的回调(如push方法后修改url-window.location.hash = location、或者初始化的监听 history.setupListeners)</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>所以next是执行列队的下一项, 而不是渲染页面,只有执行完才会渲染页面</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>beforeEach就是一个列队,每调用一次就会添加到数组中,然后再transitionTo方法中依次next执行,直到结束执行渲染页面(<code>this.cb &amp;&amp; this.cb(route)</code>)</li><li>参数是to(最新的路由信息-<code>const route = this.router.matcher.match(location)</code>)、from(<code>this.current</code>-上一次路由信息)、next(执行下一项)</li><li>渲染页面的原理就是,router-view依赖$route(当前页面路由信息)-&gt;_route-&gt;current, 第一次init的时候,往this.cb中存储了<code>app._route = route</code>,所以执行this.cb就会触发$route变化,页面依赖了$route,最后导致渲染页面. dep和watcher可以回一下.</li></ul>]]></content>
      
      
      <categories>
          
          <category> vue2源码 </category>
          
          <category> vue-router </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1.vue-router原理</title>
      <link href="/ypf-blog/2024/03/26/vue-router/1.vue-router%E5%8E%9F%E7%90%86/"/>
      <url>/ypf-blog/2024/03/26/vue-router/1.vue-router%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.7.14/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/3.6.5/vue-router.min.js&quot;&gt;&lt;/script&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./dist/vue-router.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/foo&quot;</span>&gt;</span>Go to Foo<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/bar&quot;</span>&gt;</span> Go to Bar <span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/bar/child&quot;</span>&gt;</span>Go to BarChild<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;aa&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bb&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>);</span><br><span class="language-javascript">  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-attr">router</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">routes</span>: [</span><br><span class="language-javascript">        &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/foo&quot;</span>, <span class="hljs-attr">component</span>: &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;div&gt;foo&lt;/div&gt;&quot;</span> &#125; &#125;,</span><br><span class="language-javascript">        &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/bar&quot;</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">component</span>: &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;div&gt;bar&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&quot;</span> &#125;,</span><br><span class="language-javascript">          <span class="hljs-attr">children</span>: [</span><br><span class="language-javascript">            &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;child&quot;</span>, <span class="hljs-comment">// 子路由</span></span><br><span class="language-javascript">              <span class="hljs-attr">component</span>: &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;div&gt;barchild&lt;/div&gt;&quot;</span> &#125;,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/child&quot;</span>, <span class="hljs-comment">// 不是子路由</span></span><br><span class="language-javascript">              <span class="hljs-attr">component</span>: &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;div&gt;barchild&lt;/div&gt;&quot;</span> &#125;,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">          ],</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      ],</span><br><span class="language-javascript">    &#125;),</span><br><span class="language-javascript">    <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>, <span class="hljs-string">&quot;router&quot;</span>);</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>, <span class="hljs-string">&quot;route&quot;</span>);</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意⚠️: 上面child和/child不一样, vue认为首个字符为/的path不是子路由,所以child最终为/bar/child,而child最终为/child</strong></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="创建VueRouter类"><a href="#创建VueRouter类" class="headerlink" title="创建VueRouter类"></a>创建VueRouter类</h3><p>和Vuex一样,我们也要使用<code>Vue.use(VueRouter)</code>和传入<code>router: new VueRouter(&#123;&#125;)</code>,所以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">src/vue-router/index.<span class="hljs-property">js</span><br><span class="hljs-keyword">let</span> <span class="hljs-title class_">Vue</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VueRouter</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options = &#123;&#125;</span>) &#123;&#125;<br>&#125;<br><span class="hljs-title class_">VueRouter</span>.<span class="hljs-property">install</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">_Vue</span>) &#123;<br>  <span class="hljs-title class_">Vue</span> = _Vue;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们看下大概流程图<br><img src="images/step.jpg" width="80%"/></p><h4 id="install"><a href="#install" class="headerlink" title="install"></a>install</h4><p>接下来我们来完善install的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">VueRouter</span>.<span class="hljs-property">install</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">_Vue</span>) &#123;<br>  <span class="hljs-title class_">Vue</span> = _Vue;<br>  <span class="hljs-comment">// 1. 注册全局组件</span><br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&quot;RouterLink&quot;</span>, <span class="hljs-title class_">Link</span>);<br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&quot;RouterView&quot;</span>, <span class="hljs-title class_">View</span>);<br>  <span class="hljs-comment">// 2. 注册全局混入</span><br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">mixin</span>(&#123;<br>    <span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span>.<span class="hljs-property">router</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_routerRoot</span> = <span class="hljs-variable language_">this</span>; <span class="hljs-comment">// 将根实例挂载到_routerRoot上暴露给子组件</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_router</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span>.<span class="hljs-property">router</span>;<br>        <span class="hljs-comment">// 初始化</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&quot;初始化路由(渲染页面)...&quot;</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_router</span>.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">this</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfoEnd</span>()<br>        <span class="hljs-comment">// 通过defineReactive将_route变成响应式的</span><br>        <span class="hljs-title class_">Vue</span>.<span class="hljs-property">util</span>.<span class="hljs-title function_">defineReactive</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;_route&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_router</span>.<span class="hljs-property">history</span>.<span class="hljs-property">current</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_routerRoot</span> = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">$parent</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">$parent</span>.<span class="hljs-property">_routerRoot</span>) || <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-comment">// this._router = this.$parent &amp;&amp; this.$parent._router;</span><br>      &#125;<br>    &#125;,<br>  &#125;);<br>  <span class="hljs-comment">// 3. 注册实例方法</span><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&quot;$router&quot;</span>, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// return this._router;</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_routerRoot</span>.<span class="hljs-property">_router</span>;<br>    &#125;,<br>  &#125;);<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&quot;$route&quot;</span>, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// return this._route;</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_routerRoot</span>.<span class="hljs-property">_route</span>;<br>    &#125;,<br>  &#125;);<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>上面我们</p><ul><li>创建了全局组件 <code>RouterLink</code>和<code>RouterView</code></li><li>全局混入beforeCreate方法中, 通过<code>this._routerRoot</code>存储根实例vm,找不到找parent. 同时<code>this._router = this.$options.router</code>为每个组件写入_router, 最后创建响应式变量<code>Vue.util.defineReactive(this, &quot;_route&quot;, this._router.history.current);</code></li><li>调用<code>this._router.init(this)</code>进行初始化</li><li>在<code>Vue.prototype</code>挂载<code>$router--&gt;this._routerRoot._router</code>, <code>$route--&gt;this._routerRoot._route</code>便于访问<br>上面流程很好理解, 我们知道<code>this.$router--&gt;this.$options.router</code>, <code>this.$route--&gt;this._router.history.current</code>.接下来我们来讲解这两个都是什么意思.</li></ul><h4 id="VueRouter类"><a href="#VueRouter类" class="headerlink" title="VueRouter类"></a>VueRouter类</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Link</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/link&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">View</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/view&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; createMatcher &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./create-matcher&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HashHistory</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./history/hash&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">HTML5History</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./history/html5&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VueRouter</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options = &#123;&#125;</span>) &#123;<br>    <span class="hljs-comment">// 一.  创建路由匹配器</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&quot;创建路由匹配器&quot;</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">matcher</span> = <span class="hljs-title function_">createMatcher</span>(options.<span class="hljs-property">routes</span> || []); <span class="hljs-comment">// this.matcher=&#123;addRoutes, match&#125; </span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">matcher</span>, <span class="hljs-string">&quot;this.matcher&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfoEnd</span>()<br>    <span class="hljs-comment">// 二.浏览器的路由管理</span><br>    <span class="hljs-comment">// 1.获取模式,默认是hash模式</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&quot;初始化路由模式(创建this.history实例)&quot;</span>)<br>    <span class="hljs-keyword">let</span> mode = options.<span class="hljs-property">mode</span> || <span class="hljs-string">&quot;hash&quot;</span>;<br>    <span class="hljs-keyword">switch</span> (mode) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hash&quot;</span>: <span class="hljs-comment">// hash模式</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">history</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashHistory</span>(<span class="hljs-variable language_">this</span>, options.<span class="hljs-property">base</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;history&quot;</span>: <span class="hljs-comment">// HTML5模式</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">history</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HTML5History</span>(<span class="hljs-variable language_">this</span>, options.<span class="hljs-property">base</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;abstract&quot;</span>: <span class="hljs-comment">// 服务端渲染</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">history</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbstractHistory</span>(<span class="hljs-variable language_">this</span>, options.<span class="hljs-property">base</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-attr">default</span>:<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`不支持<span class="hljs-subst">$&#123;mode&#125;</span>模式`</span>);<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfoEnd</span>()<br>  &#125;<br>  <span class="hljs-comment">// 三.初始化(根据当前路径,渲染对应的组件)、监听路由变化、跳转路由</span><br>  <span class="hljs-title function_">init</span>(<span class="hljs-params">app</span>) &#123;<br>    <span class="hljs-comment">// 1.获取当前路径,渲染对应的组件</span><br>    <span class="hljs-keyword">const</span> history = <span class="hljs-variable language_">this</span>.<span class="hljs-property">history</span>;<br>    <span class="hljs-comment">// 2.跳转</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;1.window.location.hash获取当前url的hash值:&quot;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(history.<span class="hljs-title function_">getCurrentLocation</span>());<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&quot;2.history.transitionTo跳转到该hash,回调监听路由变化&quot;</span>)<br>    history.<span class="hljs-title function_">transitionTo</span>(<br>      history.<span class="hljs-title function_">getCurrentLocation</span>(), <span class="hljs-comment">// 获取当前路径</span><br>      history.<span class="hljs-property">setupListeners</span> <span class="hljs-comment">// 监听路由变化</span><br>    );<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfoEnd</span>()<br>    <span class="hljs-comment">// 3.更新_route</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;3.往history中添加更新_route的回调函数,用于后续切换页面更新视图,第一次不需要&quot;</span>)<br>    history.<span class="hljs-title function_">listen</span>(<span class="hljs-function">(<span class="hljs-params">route</span>) =&gt;</span> &#123;<br>      app.<span class="hljs-property">_route</span> = route;<br>    &#125;);<br>  &#125;<br>  <span class="hljs-comment">// 路由跳转</span><br>  <span class="hljs-title function_">push</span>(<span class="hljs-params">location</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">push</span>(location);<br>  &#125;<br>  <span class="hljs-comment">// 路由跳转</span><br>  <span class="hljs-title function_">replace</span>(<span class="hljs-params">location</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">transitionTo</span>(location, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">replace</span>(<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/#(.*)$/</span>, <span class="hljs-string">&quot;&quot;</span>) + <span class="hljs-string">&quot;#&quot;</span> + location<br>      );<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="创建路由匹配器"><a href="#创建路由匹配器" class="headerlink" title="创建路由匹配器"></a>创建路由匹配器</h5><p>主要包括如下内容:</p><ul><li>通过<code>createRouteMap</code>进行递归将用户传入的嵌套数组路由–&gt;扁平路由pathMap,即<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js">[<br>    &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/foo&quot;</span>, <span class="hljs-attr">component</span>: &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;div&gt;foo&lt;/div&gt;&quot;</span> &#125; &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/bar&quot;</span>,<br>      <span class="hljs-attr">component</span>: &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;div&gt;bar&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&quot;</span> &#125;,<br>      <span class="hljs-attr">children</span>: [<br>        &#123;<br>          <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;child&quot;</span>,<br>          <span class="hljs-attr">component</span>: &#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;div&gt;barchild&lt;/div&gt;&quot;</span> &#125;,<br>        &#125;,<br>      ],<br>    &#125;,<br>  ]<br>  <span class="hljs-comment">// 转化为</span><br>  &#123;<br>      <span class="hljs-string">&quot;/foo&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;/foo&quot;</span>,<br>          <span class="hljs-string">&quot;component&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;template&quot;</span>: <span class="hljs-string">&quot;&lt;div&gt;foo&lt;/div&gt;&quot;</span>,<br>          &#125;<br>      &#125;,<br>      <span class="hljs-string">&quot;/bar&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;/bar&quot;</span>,<br>          <span class="hljs-string">&quot;component&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;template&quot;</span>: <span class="hljs-string">&quot;&lt;div&gt;bar&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&quot;</span><br>          &#125;<br>      &#125;,<br>      <span class="hljs-string">&quot;/bar/child&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;child&quot;</span>,<br>          <span class="hljs-string">&quot;component&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;template&quot;</span>: <span class="hljs-string">&quot;&lt;div&gt;barchild&lt;/div&gt;&quot;</span><br>          &#125;,<br>          <span class="hljs-string">&quot;parent&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;/bar&quot;</span>,<br>              <span class="hljs-string">&quot;component&quot;</span>: &#123;<br>                  <span class="hljs-string">&quot;template&quot;</span>: <span class="hljs-string">&quot;&lt;div&gt;bar&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&quot;</span><br>              &#125;<br>          &#125;<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></li><li>创建match方法,入参接受当前url,返回当前路径的数组组(里面遍历了上面的pathMap进行二次格式化)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;/bar/child&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;child&quot;</span>,<br>    <span class="hljs-string">&quot;component&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;template&quot;</span>: <span class="hljs-string">&quot;&lt;div&gt;barchild&lt;/div&gt;&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;parent&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;/bar&quot;</span>,<br>        <span class="hljs-string">&quot;component&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;template&quot;</span>: <span class="hljs-string">&quot;&lt;div&gt;bar&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 转化为 matched数组用于后面router-view渲染</span><br>&#123;<br>    <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;/bar/child&quot;</span>,<br>    <span class="hljs-string">&quot;matched&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;/bar&quot;</span>,<br>            <span class="hljs-string">&quot;component&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;template&quot;</span>: <span class="hljs-string">&quot;&lt;div&gt;bar&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&quot;</span>,<br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;child&quot;</span>,<br>            <span class="hljs-string">&quot;component&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;template&quot;</span>: <span class="hljs-string">&quot;&lt;div&gt;barchild&lt;/div&gt;&quot;</span>,<br>            &#125;,<br>            <span class="hljs-string">&quot;parent&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;/bar&quot;</span>,<br>                <span class="hljs-string">&quot;component&quot;</span>: &#123;<br>                    <span class="hljs-string">&quot;template&quot;</span>: <span class="hljs-string">&quot;&lt;div&gt;bar&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&quot;</span>,<br>                &#125;<br>            &#125;<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li>导出addRoutes方法,用于动态添加路由(原理就是和生成pathMap一样, 调用createRouteMap,用户传入路由和已有的pathMap进行遍历合并)</li></ul><p>我们来看下create-matcher文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js">src/vue-router/create-matcher.<span class="hljs-property">js</span><br><span class="hljs-keyword">import</span> &#123; createRouteMap, createRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./create-route-map&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createMatcher</span>(<span class="hljs-params">routes, router</span>) &#123;<br>  <span class="hljs-comment">// 创建路由映射表,数组转对象,如将[&#123; path: &#x27;/foo&#x27;, component: Foo &#125;]转换为&#123; pathMap: &#123; &#x27;/foo&#x27;: &#123;component,parent&#125; ,&#x27;/bar&#x27;:&#123;component,parent&#125;,&#x27;/bar/child&#x27;:&#123;component,parent&#125;&#125;,即嵌套路由转换为扁平路由</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&quot;嵌套路由--&gt;扁平路由&quot;</span>)<br>  <span class="hljs-keyword">const</span> &#123; pathMap &#125; = <span class="hljs-title function_">createRouteMap</span>(routes);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pathMap,<span class="hljs-string">&#x27;pathMap&#x27;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfoEnd</span>()<br>  <span class="hljs-comment">// 用户自己定义的路由,动态添加-合并路由配置,将上一步的pathMap和新的routes传过去进行合并</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">addRoutes</span>(<span class="hljs-params">routes</span>) &#123;<br>    <span class="hljs-title function_">createRouteMap</span>(routes, pathMap);<br>  &#125;<br>  <span class="hljs-comment">// addRoutes([&#123;</span><br>  <span class="hljs-comment">//   path: &#x27;/a&#x27;,</span><br>  <span class="hljs-comment">//   component: &#123;</span><br>  <span class="hljs-comment">//     render(h) &#123;</span><br>  <span class="hljs-comment">//       return h(&#x27;div&#x27;, &#x27;a&#x27;);</span><br>  <span class="hljs-comment">//     &#125;</span><br>  <span class="hljs-comment">//   &#125;</span><br>  <span class="hljs-comment">// &#125;])</span><br>  <span class="hljs-comment">// console.log(pathMap,2);</span><br>  <span class="hljs-comment">// addRoutes([</span><br>  <span class="hljs-comment">//   &#123;</span><br>  <span class="hljs-comment">//     path: &quot;/bar&quot;,</span><br>  <span class="hljs-comment">//     component: &#123; template: &quot;&lt;div&gt;bar111&lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&quot; &#125;,</span><br>  <span class="hljs-comment">//     children: [</span><br>  <span class="hljs-comment">//       &#123;</span><br>  <span class="hljs-comment">//         path: &quot;child1&quot;,</span><br>  <span class="hljs-comment">//         component: &#123; template: &quot;&lt;div&gt;barchild1&lt;/div&gt;&quot; &#125;,</span><br>  <span class="hljs-comment">//       &#125;,</span><br>  <span class="hljs-comment">//     ],</span><br>  <span class="hljs-comment">//   &#125;,</span><br>  <span class="hljs-comment">// ]);</span><br>  <span class="hljs-comment">// console.log(pathMap,3);</span><br>  <span class="hljs-comment">// 将pathMap中的子路由增加match属性进行拆分为数组</span><br>  <span class="hljs-comment">// 如/about/a/b=&gt;&#123; path: &#x27;/about/a/b&#x27;, matched: [&#123; path: &#x27;/about&#x27;, component: About &#125;, &#123; path: &#x27;a&#x27;, component: A &#125;, &#123; path: &#x27;b&#x27;, component: B &#125;] &#125;</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">match</span>(<span class="hljs-params">location</span>) &#123;<br>    <span class="hljs-keyword">let</span> record = pathMap[location];<br>    <span class="hljs-keyword">if</span> (record) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">createRoute</span>(record, &#123;<br>        <span class="hljs-attr">path</span>: location,<br>      &#125;);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createRoute</span>(<span class="hljs-literal">null</span>, &#123;<br>      <span class="hljs-attr">path</span>: location,<br>    &#125;);<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;<br>    match,<br>    addRoutes,<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs js">src/vue-router/create-route-map.<span class="hljs-property">js</span><br><span class="hljs-comment">// 目的：将路由配置转换为路由映射表, 用于匹配路由, 生成路由链接等</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createRouteMap</span>(<span class="hljs-params">routes, oldPathMap = <span class="hljs-built_in">Object</span>.create(<span class="hljs-literal">null</span>)</span>) &#123;<br>  <span class="hljs-keyword">let</span> pathMap = oldPathMap; <span class="hljs-comment">// 创建一个空对象,用于存放路由映射表</span><br>  routes.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">route</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">addRouteRecord</span>(route, pathMap);<br>  &#125;);<br>  <span class="hljs-keyword">return</span> &#123;<br>    pathMap,<br>  &#125;;<br>&#125;<br><span class="hljs-comment">// 将路由配置转换为路由映射表, 用于匹配路由, 生成路由链接等.route:如&#123; path: &#x27;/foo&#x27;, component: Foo &#125;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">addRouteRecord</span>(<span class="hljs-params">route, pathMap, parent</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; name, component &#125; = route;<br>  <span class="hljs-keyword">const</span> record = &#123;<br>    name,<br>    <span class="hljs-attr">path</span>: route.<span class="hljs-property">path</span>,<br>    component,<br>    parent,<br>  &#125;;<br>  <span class="hljs-keyword">let</span> path;<br>  <span class="hljs-keyword">if</span>(route.<span class="hljs-property">path</span>[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br>    path = route.<span class="hljs-property">path</span>;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span>(parent)&#123;<br>      path = <span class="hljs-string">`<span class="hljs-subst">$&#123;parent.path&#125;</span>/<span class="hljs-subst">$&#123;route.path&#125;</span>`</span>; <span class="hljs-comment">// 如果有parent,说明是children子路由,则path需要拼接</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      path = <span class="hljs-string">`/<span class="hljs-subst">$&#123;route.path&#125;</span>`</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (!pathMap[path]) &#123;<br>    pathMap[path] = record;<br>  &#125;<br>  <span class="hljs-comment">// 递归处理子路由,递归</span><br>  <span class="hljs-keyword">if</span> (route.<span class="hljs-property">children</span>) &#123;<br>    route.<span class="hljs-property">children</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">child</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 注意,传record是为了知道儿子的父亲是谁</span><br>      <span class="hljs-title function_">addRouteRecord</span>(child, pathMap, record);<br>    &#125;);<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 创建路由,返回一个对象,</span><br><span class="hljs-comment">// 如/about/a=&gt;&#123; path: &#x27;/about/a&#x27;, matched: [&#123; path: &#x27;/about&#x27;, component: About &#125;, &#123; path: &#x27;a&#x27;, component: A &#125;] &#125;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createRoute</span>(<span class="hljs-params">record, location</span>) &#123;<br>  <span class="hljs-keyword">let</span> &#123; path &#125; = location;<br>  <span class="hljs-keyword">let</span> matched = [];<br>  <span class="hljs-keyword">if</span> (record) &#123;<br>    <span class="hljs-keyword">while</span> (record) &#123;<br>      matched.<span class="hljs-title function_">unshift</span>(record); <span class="hljs-comment">// 因为先渲染/a,再渲染/about,所以需要unshift将/about放在前面</span><br>      record = record.<span class="hljs-property">parent</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;<br>    path,<br>    matched,<br>  &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="初始化路由模式"><a href="#初始化路由模式" class="headerlink" title="初始化路由模式"></a>初始化路由模式</h4><ul><li>创建history类, 包括base.js公共类,和不同模式的类继承base.如hash.js、html5.js、abstract.js</li><li>以hash举例子,初始化类就执行<code>ensureSlash</code>方法,将当前url变成hash模式.如果没有hash值,则window.location.hash值为/,此时浏览器会自动跳转到/#/,这个是浏览器自动跳转的.</li><li>base公共类定义了transitionTo(更新当前this.current路由信息、赋值给_route进行页面更新)、listen(用于存入更新视图的回调函数)</li><li>hash类定义了getCurrentLocation(获取当前hash路径)、push(调用transitionTo,回调函数为修改url的hash)、setupListeners(监听路由变化,window.addEventListener(“hashchange”,cb),调用transitionTo)</li><li>如果是html5类,则是调用window.addEventListener(“popstate”,cb) 用来监听用户在浏览器中点击了回退或前进按钮的事件,该事件支持移动设备上的回退键<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js">src/vue-router/history/base.<span class="hljs-property">js</span><br><span class="hljs-keyword">import</span> &#123; createRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../create-route-map&quot;</span>; <br><span class="hljs-comment">// 公共方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">History</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">router, base</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">router</span> = router;<br>    <span class="hljs-comment">// 保存当前路径对应当前路由信息</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&quot;this.current保存当前路径对应当前路由信息&quot;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">current</span> = <span class="hljs-title function_">createRoute</span>(<span class="hljs-literal">null</span>, &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    &#125;);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">current</span>, <span class="hljs-string">&quot;this.current&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfoEnd</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span> = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 用于监听路由变化的回调函数</span><br>  &#125;<br><br>  <span class="hljs-comment">// 路由跳转</span><br>  <span class="hljs-title function_">transitionTo</span>(<span class="hljs-params">location, cb</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&#x27;通过this.router.matcher.match将当前路径转换为matched数组形式的路由信息(上面扁平路由进行二次转换)&#x27;</span>)<br>    <span class="hljs-keyword">const</span> route = <span class="hljs-variable language_">this</span>.<span class="hljs-property">router</span>.<span class="hljs-property">matcher</span>.<span class="hljs-title function_">match</span>(location);<span class="hljs-comment">// 获取当前路径对应的路由信息</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(route,<span class="hljs-number">1232131</span>);<br>    <span class="hljs-comment">// console.log(&#x27;如 &#123;/bar/child:&#123;path,component,parent&#125;&#125;转化为&#123;path:/bar/child,matched:[&#123;path:/bar,component,parent&#125;,&#123;path:child,component,parent&#125;]&#125;&#x27;);</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;转化前&#x27;</span>,<span class="hljs-string">&#x27;&#123;/bar/child:&#123;path,component,parent&#125;&#125;&#x27;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;转化后&#x27;</span>,<span class="hljs-string">&#x27;&#123;path:/bar/child,matched:[&#123;path:/bar,component,parent&#125;,&#123;path:child,component,parent&#125;]&#125;&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfoEnd</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;this.current更新为当前路径对应的路由信息&quot;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">current</span>=route<br>    <span class="hljs-comment">// createRoute(route, &#123;</span><br>    <span class="hljs-comment">//   path: location,</span><br>    <span class="hljs-comment">// &#125;);</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span>,<span class="hljs-number">1111</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;更新视图&#x27;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">cb</span>(route); <span class="hljs-comment">// 监听路由变化,更新视图</span><br>    cb &amp;&amp; <span class="hljs-title function_">cb</span>(route);<br>  &#125;<br>  <span class="hljs-comment">// 监听路由变化</span><br>  <span class="hljs-title function_">listen</span>(<span class="hljs-params">cb</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span> = cb;<br>  &#125; <br>&#125;<br><span class="hljs-keyword">export</span> &#123; <span class="hljs-title class_">History</span> &#125;;<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js">src/vue-router/history/hash.<span class="hljs-property">js</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">History</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./base&quot;</span>;<br><span class="hljs-comment">// 获取浏览器地址栏的hash值(#/a),并去掉#号</span><br><span class="hljs-comment">// slice(a,b)截取字符串,从第a个字符开始截取到第b个字符,不包括第b个字符,如果b不写,则截取到最后一个字符</span><br><span class="hljs-comment">// 原字符串不变,返回截取后的字符串</span><br><span class="hljs-comment">// slice(1)截取字符串,从第二个字符开始截取到最后一个字符,不包括最后一个字符</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getHash</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hash</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HashHistory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">History</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">router, base</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(router, base); <span class="hljs-comment">// 调用父类的构造函数,super()是调用父类的构造函数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">router</span> = router; <span class="hljs-comment">// 路由实例</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&quot;确保地址栏的url是以#开头&quot;</span>);<br>    <span class="hljs-comment">// slash是斜杠的意思,确保当前是hash模式,没有hash值,则设置hash值为/,此时浏览器会自动将url变成/#/,注意hash改变并不会触发页面刷新,只是改变了url,hash相当于页面内的锚点、片段标识符</span><br>    <span class="hljs-title function_">ensureSlash</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfoEnd</span>();<br>  &#125;<br>  <span class="hljs-comment">// 获取当前路径</span><br>  <span class="hljs-title function_">getCurrentLocation</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">getHash</span>();<br>  &#125;<br>  <span class="hljs-comment">// 监听路由变化</span><br>  <span class="hljs-title function_">setupListeners</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;回调监听: window.addEventListener-hashchange&quot;</span>);    <br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;hashchange&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">ensureSlash</span>()) &#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;跳转&#x27;</span>)<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">transitionTo</span>(<span class="hljs-title function_">getHash</span>()); <span class="hljs-comment">// 路由跳转</span><br>    &#125;);<br>  &#125;<br>  <span class="hljs-comment">// 路由跳转</span><br>  <span class="hljs-title function_">push</span>(<span class="hljs-params">location</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">transitionTo</span>(location, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hash</span> = location;<br>    &#125;);<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 确保当前是hash模式,即浏览器地址栏的url是以#开头的</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ensureSlash</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hash</span>) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">hash</span> = <span class="hljs-string">&quot;/&quot;</span>; <span class="hljs-comment">// 如果没有hash值,则设置hash值为/,此时浏览器会自动跳转到/#/</span><br>&#125;<br><span class="hljs-keyword">export</span> &#123; <span class="hljs-title class_">HashHistory</span> &#125;;<br></code></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><ul><li>在install中的beforeCreate调用<code>this._router.init(this)</code>进行初始化</li><li>调用<code>history.transitionTo(history.getCurrentLocation(), history.setupListeners);</code>进行更新当前路由</li><li><code>history.listen((route) =&gt; &#123;app._route = route&#125;);</code>往history中添加更新_route的回调函数,用于后续切换页面更新视图,第一次不需要</li></ul><h4 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h4><ul><li>router-link代码很简单,就是个组件接收tag标签、to,自定义了click,调用了<code>this.$router.push(to)</code></li><li>router-view是个函数式组件,里面主要通过while循环向上parent,获取组件的深度depth,然后通过parent.$route即this._router.history.current,获取current.matched[depth]找到组件,渲染对应次数, 如/bar/child,先渲染/bar,再渲染/child, 共2次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">src/vue-router/view.<span class="hljs-property">js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;router-view&quot;</span>,<br>  <span class="hljs-attr">functional</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">// render共有两个参数,第一个是createElement,第二个是context,context表示当前组件的上下文</span><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params">h, &#123; parent, data, children, props&#125;</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&#x27;router-view渲染&#x27;</span>);<br>    <span class="hljs-comment">// 1. 获取当前路由</span><br>    <span class="hljs-keyword">const</span> route = parent.<span class="hljs-property">$route</span>; <span class="hljs-comment">// 需要从父组件中获取当前路由,因为当前组件是一个函数式组件,没有this,不会有$route属性</span><br>    <span class="hljs-comment">// 2. 对于嵌套路由,需要递归查找是否routerView为true,并且计算深度,深度就表示当前路由的层级,由里到外,一直到根路由,有几次parent就表示有几层路由</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;while循环查找routerView为true的深度&#x27;</span>)<br>    data.<span class="hljs-property">routerView</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">let</span> depth = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (parent) &#123;<br>      <span class="hljs-keyword">if</span> (parent.<span class="hljs-property">$vnode</span> &amp;&amp; parent.<span class="hljs-property">$vnode</span>.<span class="hljs-property">data</span>.<span class="hljs-property">routerView</span>) &#123;<br>        depth++;<br>      &#125;<br>      parent = parent.<span class="hljs-property">$parent</span>;<br>    &#125;<br>    <span class="hljs-keyword">let</span> record = route.<span class="hljs-property">matched</span>[depth]<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(depth , <span class="hljs-string">&#x27;depth&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(record, <span class="hljs-string">&#x27;当前路由信息&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (!record) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>();<br>    &#125;<br>    <span class="hljs-comment">// h-渲染函数,用于创建虚拟dom,参数有三个,第一个是标签名,第二个是属性,第三个是子元素,如h(&#x27;div&#x27;, &#123; class: &#x27;container&#x27; &#125;, &#x27;hello&#x27;)</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(record.<span class="hljs-property">component</span>,data);<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">src/vue-router/link.<span class="hljs-property">js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;RouterLink&quot;</span>,<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-attr">to</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,<br>    &#125;,<br>    <span class="hljs-attr">tag</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-string">&quot;a&quot;</span>,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params">h</span>) &#123;<br>    <span class="hljs-keyword">const</span> tag = <span class="hljs-variable language_">this</span>.<span class="hljs-property">tag</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">handler</span> = (<span class="hljs-params">e</span>) =&gt; &#123;<br>      e.<span class="hljs-title function_">preventDefault</span>();<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">to</span>);<br>    &#125;;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(<br>      tag,<br>      &#123; <span class="hljs-attr">on</span>: &#123; <span class="hljs-attr">click</span>: handler &#125;, <span class="hljs-attr">attrs</span>: &#123; <span class="hljs-attr">href</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">to</span> &#125; &#125;,<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$slots</span>.<span class="hljs-property">default</span><br>    );<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>VueRouter是个类,install方法,通过Object.defineProperty(Vue.prototype,绑定了$router(VueRouter的实例)、$route(当前路由的组件信息).并且通过mixin在beforeCreate绑定<code>this._router = this.$options.router</code>实例,然后<code>this._router.init(this)</code>进行初始化.且通过<code>Vue.util.defineReactive(this, &quot;_route&quot;, this._router.history.current)</code>进行响应式.</li><li> init方法就是调用transitionTo方法跳转指定path,更新current当前路由信息</li><li>history类, 包括base.js公共类,和不同模式.如hash.js、html5.js、abstract.js, 都继承base</li><li>以hash举例子,初始化类就执行<code>ensureSlash</code>方法,将当前url变成hash模式.如果没有hash值,则window.location.hash值为/,此时浏览器会自动跳转到/#/,这个是浏览器自动跳转的.</li><li>base公共类定义了transitionTo(更新当前this.current路由信息、赋值给_route进行页面更新)、listen(用于存入更新视图的回调函数)</li><li>hash类定义了getCurrentLocation(获取当前hash路径)、push(调用transitionTo,回调函数为修改url的hash)、setupListeners(监听路由变化,window.addEventListener(“hashchange”,cb),调用transitionTo)</li><li>如果是html5类,则是调用window.addEventListener(“popstate”,cb) 用来监听用户在浏览器中点击了回退或前进按钮的事件,该事件支持移动设备上的回退键</li><li>router-link代码很简单,就是个组件接收tag标签、to,自定义了click,调用了<code>this.$router.push(to)</code></li><li>router-view是个函数式组件,里面主要通过while循环向上parent,获取组件的深度depth,然后通过parent.$route即this._router.history.current,获取current.matched[depth]找到组件,渲染对应次数, 如/bar/child,先渲染/bar,再渲染/child, 共2次</li><li>路由配置经过了2次格式化, 一次对象扁平化、第二次当前路由信息(match数组), 最后用于router-view渲染</li></ul>]]></content>
      
      
      <categories>
          
          <category> vue2源码 </category>
          
          <category> vue-router </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3.vuex-helpers</title>
      <link href="/ypf-blog/2024/02/06/vuex/3.vuex-helpers/"/>
      <url>/ypf-blog/2024/02/06/vuex/3.vuex-helpers/</url>
      
        <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>helpers是什么?顾名思义,指的是辅助函数.包括<code>mapState、mapGetters、mapMutations、mapActions</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>:&#123;<br>  ...<span class="hljs-title class_">Vuex</span>.<span class="hljs-title function_">mapState</span>([<span class="hljs-string">&quot;age&quot;</span>]),<br>  ...<span class="hljs-title class_">Vuex</span>.<span class="hljs-title function_">mapState</span>(&#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-function">(<span class="hljs-params">state, getters</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">age</span> + <span class="hljs-number">199990</span>;<br>    &#125;,<br>  &#125;),<br>  ...<span class="hljs-title class_">Vuex</span>.<span class="hljs-title function_">mapState</span>(<span class="hljs-string">&quot;ModuleA&quot;</span>, &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-function">(<span class="hljs-params">state, getters</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">age</span> + <span class="hljs-number">199990</span>;<br>    &#125;<br>  &#125;),<br>  ...<span class="hljs-title class_">Vuex</span>.<span class="hljs-title function_">mapGetters</span>([<span class="hljs-string">&quot;myAge&quot;</span>]),<br>  ...<span class="hljs-title class_">Vuex</span>.<span class="hljs-title function_">mapGetters</span>(<span class="hljs-string">&quot;ModuleA&quot;</span>, [<span class="hljs-string">&quot;myAge&quot;</span>]),<br>  <span class="hljs-comment">// 注意,下面这种传入对象不支持</span><br>  ...<span class="hljs-title class_">Vuex</span>.<span class="hljs-title function_">mapGetters</span>(<span class="hljs-string">&quot;ModuleA&quot;</span>,&#123;<br>    <span class="hljs-attr">myAge</span>: <span class="hljs-function">(<span class="hljs-params">state, getters</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">age</span> + <span class="hljs-number">1000</span>;<br>    &#125;,<br>  &#125;),<br>&#125;<br><span class="hljs-attr">methods</span>:&#123;<br>    ...<span class="hljs-title class_">Vuex</span>.<span class="hljs-title function_">mapMutations</span>([<span class="hljs-string">&#x27;changeAge&#x27;</span>]),<br>    ...<span class="hljs-title class_">Vuex</span>.<span class="hljs-title function_">mapMutations</span>(<span class="hljs-string">&quot;ModuleA&quot;</span>,[<span class="hljs-string">&#x27;changeAge&#x27;</span>]),<br>    ...<span class="hljs-title class_">Vuex</span>.<span class="hljs-title function_">mapActions</span>([<span class="hljs-string">&#x27;changeAge&#x27;</span>]),<br>    ...<span class="hljs-title class_">Vuex</span>.<span class="hljs-title function_">mapActions</span>(<span class="hljs-string">&quot;ModuleA&quot;</span>,[<span class="hljs-string">&#x27;changeAge&#x27;</span>]),<br>    ...<span class="hljs-title class_">Vuex</span>.<span class="hljs-title function_">mapMutations</span>(&#123;<br>    <span class="hljs-attr">changeAge</span>: <span class="hljs-function">(<span class="hljs-params">commit,...rest</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(commit,rest);<br>      &#125;,<br>    &#125;),<br>    ...<span class="hljs-title class_">Vuex</span>.<span class="hljs-title function_">mapActions</span>(&#123;<br>      <span class="hljs-attr">changeAge</span>: <span class="hljs-function">(<span class="hljs-params">dispatch,...rest</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dispatch,rest);<br>      &#125;,<br>    &#125;),<br>&#125;<br>语法: <br><span class="hljs-title function_">mapState</span>(namespace, <span class="hljs-title class_">Array</span>|<span class="hljs-title class_">Obj</span>) <br><span class="hljs-title function_">mapGetters</span>(namespace, <span class="hljs-title class_">Array</span>) <br><span class="hljs-title function_">mapMutations</span>(namespace, <span class="hljs-title class_">Array</span>|<span class="hljs-title class_">Obj</span>)<br><span class="hljs-title function_">mapActions</span>(namespace, <span class="hljs-title class_">Array</span>|<span class="hljs-title class_">Obj</span>)<br></code></pre></td></tr></table></figure><p><strong>注意:namespace可省略、mapGetters只能传入数组,对象不支持</strong></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>以mapState为例,我们目的就是在模版中直接使用age,而不用<code>$store.state.age</code>,所以相当于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">computed</span>:&#123;<br>  <span class="hljs-title function_">age</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">age</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那我们mapState的方法原理很简单: <strong>实现一个数组返回多个computed函数(返回store上的state或module上的state)</strong>,这样我们通过…解构出来即可.<br>mapActions/mapMutations一样, <strong>实现一个数组返回多个fn即可</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/vuex/index.js</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Store</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; install &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./mixin&quot;</span>;<br><span class="hljs-comment">// 1.新增</span><br><span class="hljs-keyword">import</span> &#123; mapState, mapGetters, mapMutations, mapActions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./helpers&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Vuex</span> = &#123;<br>  <span class="hljs-title class_">Store</span>,<br>  install,<br>  mapState,<br>  mapGetters,<br>  mapMutations,<br>  mapActions,<br>&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Vuex</span>;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mapState = <span class="hljs-title function_">normalizeNamespace</span>(<span class="hljs-function">(<span class="hljs-params">namespace, states</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> res = &#123;&#125;;<br>  <span class="hljs-title function_">normalizeMap</span>(states).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">&#123; key, val &#125;</span>) =&gt;</span> &#123;<br>    res[key] = <span class="hljs-keyword">function</span> <span class="hljs-title function_">mappedState</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">let</span> state = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>;<br>      <span class="hljs-keyword">let</span> getters = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>;<br>      <span class="hljs-keyword">if</span> (namespace) &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title function_">getModuleByNamespace</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>, <span class="hljs-string">&quot;mapState&quot;</span>, namespace);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">module</span>) &#123;<br>          <span class="hljs-keyword">return</span>;<br>        &#125;<br>        state = <span class="hljs-variable language_">module</span>.<span class="hljs-property">context</span>.<span class="hljs-property">state</span>;<br>        getters = <span class="hljs-variable language_">module</span>.<span class="hljs-property">context</span>.<span class="hljs-property">getters</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> val === <span class="hljs-string">&quot;function&quot;</span><br>        ? val.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, state, getters)<br>        : state[val];<br>    &#125;;<br>    res[key].<span class="hljs-property">vuex</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// mark vuex getter for devtools 标记vuex getter用于devtools</span><br>  &#125;);<br>  <span class="hljs-keyword">return</span> res;<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mapGetters = <span class="hljs-title function_">normalizeNamespace</span>(<span class="hljs-function">(<span class="hljs-params">namespace, getters</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> res = &#123;&#125;;<br>    <span class="hljs-title function_">normalizeMap</span>(getters).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">&#123; key, val &#125;</span>) =&gt;</span> &#123;<br>        val=namespace+val<br>        res[key] = <span class="hljs-keyword">function</span> <span class="hljs-title function_">mappedGetter</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">if</span> (namespace &amp;&amp; !<span class="hljs-title function_">getModuleByNamespace</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>, <span class="hljs-string">&quot;mapGetters&quot;</span>, namespace)) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!(val <span class="hljs-keyword">in</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>))&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`[vuex] unknown getter: <span class="hljs-subst">$&#123;val&#125;</span>`</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>[val];<br>        &#125;;<br>        res[key].<span class="hljs-property">vuex</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// mark vuex getter for devtools</span><br>    &#125;);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mapMutations = <span class="hljs-title function_">normalizeNamespace</span>(<span class="hljs-function">(<span class="hljs-params">namespace, mutations</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> res = &#123;&#125;;<br>    <span class="hljs-title function_">normalizeMap</span>(mutations).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">&#123; key, val &#125;</span>) =&gt;</span> &#123;<br>        res[key] = <span class="hljs-keyword">function</span> <span class="hljs-title function_">mappedMutation</span>(<span class="hljs-params">...args</span>) &#123;<br>            <span class="hljs-keyword">let</span> commit = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">commit</span>;<br>            <span class="hljs-keyword">if</span> (namespace) &#123;<br>                <span class="hljs-keyword">const</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title function_">getModuleByNamespace</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>, <span class="hljs-string">&quot;mapMutations&quot;</span>, namespace);<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">module</span>) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                commit = <span class="hljs-variable language_">module</span>.<span class="hljs-property">context</span>.<span class="hljs-property">commit</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> val === <span class="hljs-string">&quot;function&quot;</span><br>                ? val.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, [commit].<span class="hljs-title function_">concat</span>(args)) <span class="hljs-comment">// val是函数,则调用val,并且进行数组合并 [ commit, ...args ]</span><br>                : commit.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>, [val].<span class="hljs-title function_">concat</span>(args));<br>        &#125;;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mapActions = <span class="hljs-title function_">normalizeNamespace</span>(<span class="hljs-function">(<span class="hljs-params">namespace, actions</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> res = &#123;&#125;;<br>    <span class="hljs-title function_">normalizeMap</span>(actions).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">&#123; key, val &#125;</span>) =&gt;</span> &#123;<br>        res[key] = <span class="hljs-keyword">function</span> <span class="hljs-title function_">mappedAction</span>(<span class="hljs-params">...args</span>) &#123;<br>            <span class="hljs-keyword">let</span> dispatch = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">dispatch</span>;<br>            <span class="hljs-keyword">if</span> (namespace) &#123;<br>                <span class="hljs-keyword">const</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title function_">getModuleByNamespace</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>, <span class="hljs-string">&quot;mapActions&quot;</span>, namespace);<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">module</span>) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                dispatch = <span class="hljs-variable language_">module</span>.<span class="hljs-property">context</span>.<span class="hljs-property">dispatch</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> val === <span class="hljs-string">&quot;function&quot;</span><br>                ? val.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, [dispatch].<span class="hljs-title function_">concat</span>(args))<br>                : dispatch.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>, [val].<span class="hljs-title function_">concat</span>(args));<br>        &#125;;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object</span><br><span class="hljs-comment"> * 中文: 重新绑定命名空间参数,并且返回一个简单的对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">String</span>&#125; <span class="hljs-variable">namespace</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">Object</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createNamespacedHelpers</span>(<span class="hljs-params">namespace</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">mapState</span>: mapState.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">null</span>, namespace),<br>    <span class="hljs-attr">mapGetters</span>: mapGetters.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">null</span>, namespace),<br>    <span class="hljs-attr">mapMutations</span>: mapMutations.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">null</span>, namespace),<br>    <span class="hljs-attr">mapActions</span>: mapActions.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">null</span>, namespace),<br>  &#125;;<br>&#125;<br><span class="hljs-comment">/* Normalize the map, 规范化映射为 key-val 形式</span><br><span class="hljs-comment"> * normalizeMap([1, 2, 3]) =&gt; [ &#123; key: 1, val: 1 &#125;, &#123; key: 2, val: 2 &#125;, &#123; key: 3, val: 3 &#125; ]</span><br><span class="hljs-comment"> * normalizeMap(&#123;a: 1, b: 2, c: 3&#125;) =&gt; [ &#123; key: &#x27;a&#x27;, val: 1 &#125;, &#123; key: &#x27;b&#x27;, val: 2 &#125;, &#123; key: &#x27;c&#x27;, val: 3 &#125; ]</span><br><span class="hljs-comment"> * @param &#123;Array|Object&#125; map</span><br><span class="hljs-comment"> * @return &#123;Array&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">normalizeMap</span>(<span class="hljs-params">map</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(map)<br>    ? map.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> (&#123; key, <span class="hljs-attr">val</span>: key &#125;))<br>    : <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(map).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> (&#123; key, <span class="hljs-attr">val</span>: map[key] &#125;));<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">normalizeNamespace</span>(<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">namespace, map</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> namespace !== <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>      map = namespace;<br>      namespace = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">// 如果namespace不为空,并且不是以/结尾,则加上/,chartAt()返回指定索引位置的字符,从0开始.chartAt()不传返回第一个字符,如果超出范围,则返回空字符串</span><br>    <span class="hljs-comment">// chartAt()和str[0]是一样的,都是返回第一个字符,但是str.charAt(-1)返回&#x27;&#x27;,str[-1]返回undefined</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (namespace.<span class="hljs-title function_">charAt</span>(namespace.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) !== <span class="hljs-string">&quot;/&quot;</span>) &#123;<br>      namespace += <span class="hljs-string">&quot;/&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">fn</span>(namespace, map);<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getModuleByNamespace</span>(<span class="hljs-params">store, helper, namespace</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!namespace) &#123;<br>    <span class="hljs-keyword">return</span> store.<span class="hljs-property">_modules</span>.<span class="hljs-property">root</span>;<br>  &#125;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable language_">module</span> = store.<span class="hljs-property">_modulesNamespaceMap</span>[namespace];<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">module</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<br>      <span class="hljs-string">`[vuex] module namespace not found in <span class="hljs-subst">$&#123;helper&#125;</span>(): <span class="hljs-subst">$&#123;namespace&#125;</span>`</span><br>    );<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">module</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码比较长,我们来分布解析下.</p><h3 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h3><p>我们知道,入参支持<code>namespace和数组/对象的</code>,namespace可以省略,所以我们需要先对mapState的参数处理.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">normalizeNamespace</span>(<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">namespace, map</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> namespace !== <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>      map = namespace;<br>      namespace = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">// 如果namespace不为空,并且不是以/结尾,则加上/,chartAt()返回指定索引位置的字符,从0开始.chartAt()不传返回第一个字符,如果超出范围,则返回空字符串</span><br>    <span class="hljs-comment">// chartAt()和str[0]是一样的,都是返回第一个字符,但是str.charAt(-1)返回&#x27;&#x27;,str[-1]返回undefined</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (namespace.<span class="hljs-title function_">charAt</span>(namespace.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) !== <span class="hljs-string">&quot;/&quot;</span>) &#123;<br>      namespace += <span class="hljs-string">&quot;/&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">fn</span>(namespace, map);<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>fn就是咱们的mapState函数, 先判断namespace如果不是字符串,说明是直接传入的数组/对象, 所以<code>map=namespace;namespace = &quot;&quot;</code></li><li>判断namespace不是以/结尾,拼接上/</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mapState = <span class="hljs-title function_">normalizeNamespace</span>(<span class="hljs-function">(<span class="hljs-params">namespace, states</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> res = &#123;&#125;;<br>  <span class="hljs-title function_">normalizeMap</span>(states).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">&#123; key, val &#125;</span>) =&gt;</span> &#123;<br>    res[key] = <span class="hljs-keyword">function</span> <span class="hljs-title function_">mappedState</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">let</span> state = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>;<br>      <span class="hljs-keyword">let</span> getters = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>;<br>      <span class="hljs-keyword">if</span> (namespace) &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title function_">getModuleByNamespace</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>, <span class="hljs-string">&quot;mapState&quot;</span>, namespace);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">module</span>) &#123;<br>          <span class="hljs-keyword">return</span>;<br>        &#125;<br>        state = <span class="hljs-variable language_">module</span>.<span class="hljs-property">context</span>.<span class="hljs-property">state</span>;<br>        getters = <span class="hljs-variable language_">module</span>.<span class="hljs-property">context</span>.<span class="hljs-property">getters</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> val === <span class="hljs-string">&quot;function&quot;</span><br>        ? val.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, state, getters)<br>        : state[val];<br>    &#125;;<br>    res[key].<span class="hljs-property">vuex</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// mark vuex getter for devtools 标记vuex getter用于devtools</span><br>  &#125;);<br>  <span class="hljs-keyword">return</span> res;<br>&#125;);<br><span class="hljs-comment">/* Normalize the map, 规范化映射为 key-val 形式</span><br><span class="hljs-comment"> * normalizeMap([1, 2, 3]) =&gt; [ &#123; key: 1, val: 1 &#125;, &#123; key: 2, val: 2 &#125;, &#123; key: 3, val: 3 &#125; ]</span><br><span class="hljs-comment"> * normalizeMap(&#123;a: 1, b: 2, c: 3&#125;) =&gt; [ &#123; key: &#x27;a&#x27;, val: 1 &#125;, &#123; key: &#x27;b&#x27;, val: 2 &#125;, &#123; key: &#x27;c&#x27;, val: 3 &#125; ]</span><br><span class="hljs-comment"> * @param &#123;Array|Object&#125; map</span><br><span class="hljs-comment"> * @return &#123;Array&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">normalizeMap</span>(<span class="hljs-params">map</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(map)<br>    ? map.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> (&#123; key, <span class="hljs-attr">val</span>: key &#125;))<br>    : <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(map).<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> (&#123; key, <span class="hljs-attr">val</span>: map[key] &#125;));<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getModuleByNamespace</span>(<span class="hljs-params">store, helper, namespace</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!namespace) &#123;<br>    <span class="hljs-keyword">return</span> store.<span class="hljs-property">_modules</span>.<span class="hljs-property">root</span>;<br>  &#125;<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable language_">module</span> = store.<span class="hljs-property">_modulesNamespaceMap</span>[namespace];<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">module</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<br>      <span class="hljs-string">`[vuex] module namespace not found in <span class="hljs-subst">$&#123;helper&#125;</span>(): <span class="hljs-subst">$&#123;namespace&#125;</span>`</span><br>    );<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">module</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>我们知道,可以传数组/对象,所以我们通过<code>normalizeMap</code>将参数转化为数组对象<code>[&#123;key,val&#125;]</code>,只不过原来是数组转化后的key、val一样</li><li>默认取出根节点的<code>state、getters</code>,如果有namespace,则根据namespace获取相应的module,module不存在则报错不存在, 存在则<code>state = module.context.state;getters = module.context.getters</code>,最后<code>typeof val === &quot;function&quot;? val.call(this, state, getters): state[val]</code>,判断是函数执行并以state、getters作为参数, 不是函数直接取值.</li></ul><h3 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters"></a>mapGetters</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mapGetters = <span class="hljs-title function_">normalizeNamespace</span>(<span class="hljs-function">(<span class="hljs-params">namespace, getters</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> res = &#123;&#125;;<br>    <span class="hljs-title function_">normalizeMap</span>(getters).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">&#123; key, val &#125;</span>) =&gt;</span> &#123;<br>        val=namespace+val<br>        res[key] = <span class="hljs-keyword">function</span> <span class="hljs-title function_">mappedGetter</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">if</span> (namespace &amp;&amp; !<span class="hljs-title function_">getModuleByNamespace</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>, <span class="hljs-string">&quot;mapGetters&quot;</span>, namespace)) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!(val <span class="hljs-keyword">in</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>))&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`[vuex] unknown getter: <span class="hljs-subst">$&#123;val&#125;</span>`</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>[val];<br>        &#125;;<br>        res[key].<span class="hljs-property">vuex</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// mark vuex getter for devtools</span><br>    &#125;);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>有一点要注意,我们使用的时候<code>...mapGetters(moudleA,[&#39;myAge&#39;])</code>,实际取的是<code>ModuleA/myAge</code>.我们看下存的数据结构就知道了.</li><li>所以我们将<code>val=namespace+val</code>,前面已经namespace拼接过<code>/</code>,根据namespace判断不存在就报错, 存在直接返回<code>this.$store.getters[val]</code>. 注意为什么不能传对象就是这里,因为判断<code>val in this.$store.getters</code>,当为对象,val是函数,所以namespace+函数成了一个字符串肯定不存在,所以直接报错不存在.<img src="images/1.jpg" width="80%"/></li></ul><h3 id="mapMutations"><a href="#mapMutations" class="headerlink" title="mapMutations"></a>mapMutations</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mapMutations = <span class="hljs-title function_">normalizeNamespace</span>(<span class="hljs-function">(<span class="hljs-params">namespace, mutations</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> res = &#123;&#125;;<br>    <span class="hljs-title function_">normalizeMap</span>(mutations).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">&#123; key, val &#125;</span>) =&gt;</span> &#123;<br>        res[key] = <span class="hljs-keyword">function</span> <span class="hljs-title function_">mappedMutation</span>(<span class="hljs-params">...args</span>) &#123;<br>            <span class="hljs-keyword">let</span> commit = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">commit</span>;<br>            <span class="hljs-keyword">if</span> (namespace) &#123;<br>                <span class="hljs-keyword">const</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title function_">getModuleByNamespace</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>, <span class="hljs-string">&quot;mapMutations&quot;</span>, namespace);<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">module</span>) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                commit = <span class="hljs-variable language_">module</span>.<span class="hljs-property">context</span>.<span class="hljs-property">commit</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> val === <span class="hljs-string">&quot;function&quot;</span><br>                ? val.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, [commit].<span class="hljs-title function_">concat</span>(args)) <span class="hljs-comment">// val是函数,则调用val,并且进行数组合并 [ commit, ...args ]</span><br>                : commit.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>, [val].<span class="hljs-title function_">concat</span>(args));<br>        &#125;;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>默认commit是根的commit, 如果有namespace,根据namespace取出context.commit</li><li>和上面一样, 只不过判断是函数,将commit当一个参数传过来,如果不是此时val就是type,直接调用commit(Store里面的commit = (type, payload)),将type当第一个参数传过去</li></ul><h3 id="mapActions"><a href="#mapActions" class="headerlink" title="mapActions"></a>mapActions</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> mapActions = <span class="hljs-title function_">normalizeNamespace</span>(<span class="hljs-function">(<span class="hljs-params">namespace, actions</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> res = &#123;&#125;;<br>    <span class="hljs-title function_">normalizeMap</span>(actions).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">&#123; key, val &#125;</span>) =&gt;</span> &#123;<br>        res[key] = <span class="hljs-keyword">function</span> <span class="hljs-title function_">mappedAction</span>(<span class="hljs-params">...args</span>) &#123;<br>            <span class="hljs-keyword">let</span> dispatch = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">dispatch</span>;<br>            <span class="hljs-keyword">if</span> (namespace) &#123;<br>                <span class="hljs-keyword">const</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title function_">getModuleByNamespace</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>, <span class="hljs-string">&quot;mapActions&quot;</span>, namespace);<br>                <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">module</span>) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                dispatch = <span class="hljs-variable language_">module</span>.<span class="hljs-property">context</span>.<span class="hljs-property">dispatch</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> val === <span class="hljs-string">&quot;function&quot;</span><br>                ? val.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, [dispatch].<span class="hljs-title function_">concat</span>(args))<br>                : dispatch.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>, [val].<span class="hljs-title function_">concat</span>(args));<br>        &#125;;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>和上面mapMutations一样,就不讲了.</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>要想直接模版中使用,而不是<code>$store.state.xx/$store.commit(type,payload)</code>,相当于定义一个数组返回多个computed函数/methods函数.</li><li>因为入参有<code>(namespace,map)</code>,namespace有时候不传,所以在外面包裹一个<code>normalizeNamespace</code>函数判断namepsace不是字符串,直接map=namespace</li><li>由于map可以传Array/Object,所以格式化参数统一为<code>[&#123;key:val&#125;]</code></li><li>对于mapState: 根据namespace从<code>store._modulesNamespaceMap[namespace]</code>取出module.context,然后判断入参是函数执行并以state、getters作为参数, 不是函数直接取值.</li><li>对于mapGetters:因为store.getters.xx是以namespace+xx存储的,所以直接返回<code>store.getters.xx</code></li><li>对于mapMutations: 根据namespace取出context.commit,入参判断是函数,将commit当一个参数传出去,不是直接调用commit</li><li>对于mapActions:和mapMutations一样</li><li>注意,都会有根据namespace取module,不存在就报错, 取context只有mapGetters不用,直接从<code>store.getters.xx</code>取.因为前者是<code>MoudleA/age、ModuleA/ModuleA-A/age</code>这种形式,而conext是自己module的,如下图<img src="images/2.jpg" width="80%"/></li></ul><p>store.getters</p><img src="images/1.jpg" width="80%"/>  ]]></content>
      
      
      <categories>
          
          <category> vue2源码 </category>
          
          <category> vuex </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2.vuex-plugins</title>
      <link href="/ypf-blog/2024/02/06/vuex/2.plugins/"/>
      <url>/ypf-blog/2024/02/06/vuex/2.plugins/</url>
      
        <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">plugins</span>: [<br>  <span class="hljs-function">(<span class="hljs-params">store</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(store); <span class="hljs-comment">// store是当前的store实例</span><br>    <span class="hljs-comment">// 监听mutation,每次mutation之后都会触发</span><br>    <span class="hljs-keyword">const</span> plugin = store.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">(<span class="hljs-params">mutation, state</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// mutation是当前的mutation,结构为&#123;type:&#x27;mutation的类型&#x27;,payload:&#x27;mutation的参数&#x27;&#125;,state是当前最新的state</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mutation, state); <br>    &#125;);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">plugin</span>(); <span class="hljs-comment">// 1s后取消监听,不会再触发</span><br>    &#125;, <span class="hljs-number">1000</span>);<br><br>    <span class="hljs-comment">// // 监听action,每次action之后都会触发</span><br>    <span class="hljs-comment">// store.subscribeAction((action,state)=&gt;&#123;</span><br>    <span class="hljs-comment">//   console.log(action,state);</span><br>    <span class="hljs-comment">// &#125;)</span><br>  &#125;,<br>],<br></code></pre></td></tr></table></figure><ul><li>vuex插件原理很简单,插件就是一个函数,函数的参数只有一个Store</li><li>我们可以通过<code>Store.subscribe</code>来监听每次mutation触发后的钩子函数,该函数返回一个函数,执行就会取消监听</li><li>我们可以通过<code>store.subscribeAction</code>来监听action触发后的钩子函数该函数返回一个函数,执行就会取消监听</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js">src/vuex/store.<span class="hljs-property">js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Store</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; plugins = [] &#125; = options;<br>    ...<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_actionSubscribers</span>=[] <span class="hljs-comment">// 1. 存放所有action的订阅者</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_subscribes</span> = []; <span class="hljs-comment">// 1.存放所有mutation的订阅者</span><br>    ...<br>    <span class="hljs-comment">// 2.插件注册</span><br>    plugins.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">plugin</span>) =&gt;</span> <span class="hljs-title function_">plugin</span>(<span class="hljs-variable language_">this</span>));<br>  &#125;<br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">state</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_vm</span>.<span class="hljs-property">_data</span>.<span class="hljs-property">$$state</span>;<br>  &#125;<br>  commit = <span class="hljs-function">(<span class="hljs-params">type, payload</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> entry = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_mutations</span>[type];<br>    <span class="hljs-keyword">if</span> (!entry) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;没有这个mutation&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    entry.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> <span class="hljs-title function_">fn</span>(payload));<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_subscribes</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> <span class="hljs-title function_">fn</span>(&#123; type, payload &#125;, <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>)); <span class="hljs-comment">// 4.插件执行mutation钩子函数</span><br>  &#125;;<br>  <span class="hljs-comment">// 3.注册mutation钩子函数</span><br>  <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">fn,options</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">genericSubscribe</span>(fn, <span class="hljs-variable language_">this</span>.<span class="hljs-property">_subscribes</span>, options);<br>  &#125;<br>  <span class="hljs-title function_">replaceState</span>(<span class="hljs-params">state</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_vm</span>.<span class="hljs-property">_data</span>.<span class="hljs-property">$$state</span> = state;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 插件注册</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">genericSubscribe</span>(<span class="hljs-params">fn, subs, options</span>) &#123;<br>  <span class="hljs-keyword">if</span> (subs.<span class="hljs-title function_">indexOf</span>(fn) &lt; <span class="hljs-number">0</span>) &#123;<br>    options &amp;&amp; options.<span class="hljs-property">prepend</span> ? subs.<span class="hljs-title function_">unshift</span>(fn) : subs.<span class="hljs-title function_">push</span>(fn); <span class="hljs-comment">// 如果是prepend,则插入到数组的最前面,否则插入到数组的最后面,用于控制订阅的顺序</span><br>  &#125;<br>  <span class="hljs-comment">// 返回一个取消订阅的函数,用于取消订阅,执行完后,从subs中删除</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> i = subs.<span class="hljs-title function_">indexOf</span>(fn);<br>    <span class="hljs-keyword">if</span> (i &gt; -<span class="hljs-number">1</span>) &#123;<br>      subs.<span class="hljs-title function_">splice</span>(i, <span class="hljs-number">1</span>); <span class="hljs-comment">// 取消订阅, splice(开始索引,删除个数),返回删除的元素, 原数组发生改变</span><br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码很简单:</p><ul><li>使用<code>this._subscribes = []</code>和<code>this._actionSubscribers=[]</code>来分别存放mutation的订阅者和action的订阅者</li><li>初始化 <code>new Vuex.store()</code>就会执行<code>plugins.forEach((plugin) =&gt; plugin(this));</code>返回Store作为参数</li><li>当我们使用<code>Store.subscribe</code>就会触发genericSubscribe往this._subscribes加入钩子,根据prepend来控制执行顺序,返回一个取消订阅的函数</li><li><code>Store.subscribeAction</code>类似</li><li>当commit时候,就遍历<code>this._subscribes.forEach((fn) =&gt; fn(&#123; type, payload &#125;, this.state))</code>即可触发回调函数,返回类似下面结构, action类似<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">mutation</span>:&#123;<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;changeAge&#x27;</span>,<span class="hljs-attr">payload</span>:<span class="hljs-number">1</span>&#125;<br>  <span class="hljs-attr">state</span>:&#123;<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">2</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="vuex-persistedstate简易实现原理"><a href="#vuex-persistedstate简易实现原理" class="headerlink" title="vuex-persistedstate简易实现原理"></a>vuex-persistedstate简易实现原理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> persistedState=<span class="hljs-keyword">function</span>(<span class="hljs-params">Store</span>)&#123;<br>  <span class="hljs-keyword">const</span>  state=<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;state&#x27;</span>));<br>  <span class="hljs-keyword">if</span>(state)&#123;<br>    <span class="hljs-title class_">Store</span>.<span class="hljs-title function_">replaceState</span>(state);<br>  &#125;<br>  <span class="hljs-title class_">Store</span>.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">(<span class="hljs-params">mutation,state</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;state&#x27;</span>,<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(state));<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码很简单,主要用到了<code>replaceState</code>用来直接替换state.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">replaceState</span>(<span class="hljs-params">state</span>) &#123;<br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">_vm</span>.<span class="hljs-property">_data</span>.<span class="hljs-property">$$state</span> = state;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue2源码 </category>
          
          <category> vuex </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1.vuex原理</title>
      <link href="/ypf-blog/2024/02/02/vuex/1.vuex%E5%8E%9F%E7%90%86/"/>
      <url>/ypf-blog/2024/02/02/vuex/1.vuex%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.7.14/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;script src=&quot;./dist/vue.js&quot;&gt;&lt;/script&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./dist/vuex.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      &#123;&#123; $store.state.age &#125;&#125; &#123;&#123; $store.getters.myAge &#125;&#125;<br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$store.commit(&#x27;changeAge&#x27;, 1)&quot;</span>&gt;</span>commit同步<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$store.dispatch(&#x27;changeAge&#x27;, 1)&quot;</span>&gt;</span>dispatch异步<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>moduleA<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      state:&#123;&#123; $store.state.ModuleA.age &#125;&#125; <br>      getters:&#123;&#123;$store.getters[&#x27;ModuleA/myAge&#x27;] &#125;&#125;<br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$store.commit(&#x27;ModuleA/changeAge&#x27;, 1)&quot;</span>&gt;</span>commit同步<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$store.dispatch(&#x27;ModuleA/changeAge&#x27;, 1)&quot;</span>&gt;</span><br>        dispatch异步<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">store</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 存放数据,响应式,数据改变视图也会改变</span></span><br><span class="language-javascript">        <span class="hljs-attr">state</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">age</span>: <span class="hljs-number">10</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 计算属性,和computed原理一样,有缓存,依赖的数据变化才会重新计算</span></span><br><span class="language-javascript">        <span class="hljs-attr">getters</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">myAge</span>(<span class="hljs-params">state</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> state.<span class="hljs-property">age</span> + <span class="hljs-number">20</span>;</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 修改state的唯一方式,同步的</span></span><br><span class="language-javascript">        <span class="hljs-attr">mutations</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">changeAge</span>(<span class="hljs-params">state, payload</span>) &#123;</span><br><span class="language-javascript">            state.<span class="hljs-property">age</span> += payload;</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 异步操作,提交mutation,然后再去修改state</span></span><br><span class="language-javascript">        <span class="hljs-attr">actions</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">changeAge</span>(<span class="hljs-params">&#123; commit &#125;, payload</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">              <span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;changeAge&quot;</span>, payload);</span><br><span class="language-javascript">            &#125;, <span class="hljs-number">100</span>);</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">modules</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-title class_">ModuleA</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">state</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">age</span>: <span class="hljs-number">100</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">getters</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-title function_">myAge</span>(<span class="hljs-params">state</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> state.<span class="hljs-property">age</span> + <span class="hljs-number">20</span>;</span><br><span class="language-javascript">              &#125;,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">mutations</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-title function_">changeAge</span>(<span class="hljs-params">state, payload</span>) &#123;</span><br><span class="language-javascript">                state.<span class="hljs-property">age</span> += payload;</span><br><span class="language-javascript">              &#125;,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">actions</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-title function_">changeAge</span>(<span class="hljs-params">&#123; commit &#125;, payload</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                  <span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;changeAge&quot;</span>, payload);</span><br><span class="language-javascript">                &#125;, <span class="hljs-number">100</span>);</span><br><span class="language-javascript">              &#125;,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">modules</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-string">&quot;ModuleA-A&quot;</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">state</span>: &#123;</span><br><span class="language-javascript">                  <span class="hljs-attr">age</span>: <span class="hljs-number">100</span>,</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">getters</span>: &#123;</span><br><span class="language-javascript">                  <span class="hljs-title function_">myAge</span>(<span class="hljs-params">state</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> state.<span class="hljs-property">age</span> + <span class="hljs-number">20</span>;</span><br><span class="language-javascript">                  &#125;,</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">mutations</span>: &#123;</span><br><span class="language-javascript">                  <span class="hljs-title function_">changeAge</span>(<span class="hljs-params">state, payload</span>) &#123;</span><br><span class="language-javascript">                    state.<span class="hljs-property">age</span> += payload;</span><br><span class="language-javascript">                  &#125;,</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">actions</span>: &#123;</span><br><span class="language-javascript">                  <span class="hljs-title function_">changeAge</span>(<span class="hljs-params">&#123; commit &#125;, payload</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                      <span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;changeAge&quot;</span>, payload);</span><br><span class="language-javascript">                    &#125;, <span class="hljs-number">100</span>);</span><br><span class="language-javascript">                  &#125;,</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">              &#125;,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">          <span class="hljs-title class_">ModuleB</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">namespaced</span>: <span class="hljs-literal">true</span>, </span><br><span class="language-javascript">            <span class="hljs-attr">state</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">age</span>: <span class="hljs-number">100</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">getters</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-title function_">myAge</span>(<span class="hljs-params">state</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> state.<span class="hljs-property">age</span> + <span class="hljs-number">20</span>;</span><br><span class="language-javascript">              &#125;,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">mutations</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-title function_">changeAge</span>(<span class="hljs-params">state, payload</span>) &#123;</span><br><span class="language-javascript">                state.<span class="hljs-property">age</span> += payload;</span><br><span class="language-javascript">              &#125;,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">actions</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-title function_">changeAge</span>(<span class="hljs-params">&#123; commit &#125;, payload</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                  <span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;changeAge&quot;</span>, payload);</span><br><span class="language-javascript">                &#125;, <span class="hljs-number">100</span>);</span><br><span class="language-javascript">              &#125;,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      &#125;),</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="images/1.jpg" width="80%"/><p>上面我们展示了vuex的基本用法,接下来我们讲解下实现原理.</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="新建index-js"><a href="#新建index-js" class="headerlink" title="新建index.js"></a>新建index.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/vuex/index.js</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Store</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; install &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./mixin&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Vuex</span> = &#123;<br>  <span class="hljs-title class_">Store</span>,<br>  install,<br>&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Vuex</span>;<br></code></pre></td></tr></table></figure><p>导出Vuex,其包含 <code>Store构造函数</code>和<code>install方法</code></p><ul><li>我们通过<code>Vue.use()</code>使用install方法</li><li>给new Vue({})传入<code>new Vuex.Store(&#123;&#125;)</code>初始化store</li></ul><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/vuex/mixin.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> <span class="hljs-title class_">Vue</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> install = <span class="hljs-keyword">function</span> (<span class="hljs-params">_Vue</span>) &#123;<br>  <span class="hljs-comment">// 保存Vue的构造函数,在install中使用</span><br>  <span class="hljs-title class_">Vue</span> = _Vue;<br>  <span class="hljs-comment">// 将store注入到每个组件实例上</span><br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">mixin</span>(&#123;<br>    <span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 判断是否是根组件</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span>.<span class="hljs-property">store</span>) &#123;<br>        <span class="hljs-comment">// 根组件</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$options</span>.<span class="hljs-property">store</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 子组件</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$parent</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">$parent</span>.<span class="hljs-property">$store</span>;<br>      &#125;<br>    &#125;<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>我们在vue中模版中,经常直接使用<code>$store.state.xx</code>,所以我们需要给<code>vue绑定$store</code>.</p><ul><li>使用Vuex.mixin混入beforeCreate方法,我们知道该方法的this指向vm.</li><li>需要判断是否options上传入了store<ul><li>传入的话直接<code>this.$store=this.$options.store;</code>, 一般vue都会只有一个new Vue,所以此时<App/>初始化绑定了$store,而子组件都不会再单独传一个$store,如果传了就会用子组件的</li><li>没有传入的话,直接绑定父级的$store<code>this.$store = this.$parent &amp;&amp; this.$parent.$store;</code></li></ul></li></ul><p><strong>这样在vue无论模版还是script中,都可以获取$store</strong></p><h3 id="Store类"><a href="#Store类" class="headerlink" title="Store类"></a>Store类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Store</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; plugins = [] &#125; = options;<br>    <span class="hljs-comment">//  1. 初始化</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_actions</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// 存放所有的action,格式为&#123;namespace+type:[fn,fn]&#125;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_mutations</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// 存放所有的mutation,格式为&#123;namespace+type:[fn,fn]&#125;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_wrappedGetters</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// 存放所有的getter,格式为&#123;namespace+type:[fn,fn]&#125;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_committing</span> = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 是否正在提交mutation</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_subscribes</span> = []; <span class="hljs-comment">// 存放所有的订阅者</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">group</span>(<span class="hljs-string">&quot;将store格式化为树结构&quot;</span>);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_modules</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModuleCollection</span>(options); <span class="hljs-comment">// 1.递归注册模块,格式化为树结构</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_modules</span>, <span class="hljs-string">&quot;格式化后的结果&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupEnd</span>();<br>    <span class="hljs-comment">// 2.递归注册模块,将mutation,action,getter push到对应的数组中_mutations,_actions,_wrappedGetters</span><br>    <span class="hljs-comment">// 并且将state变成响应式,并且将getters和state关联起来</span><br>    <span class="hljs-comment">// 并且将每个模块的state拼接上path,然后设置到父模块的state中</span><br>    <span class="hljs-comment">// 并且计算出当前模块的命名空间,在订阅的时候每个模块都有一个命名空间,用于区分不同的模块,如: a/changeAge</span><br>    <span class="hljs-comment">// 并且生成当前模块的上下文</span><br>    <span class="hljs-comment">// 并且递归注册子模块</span><br>    <span class="hljs-comment">// 参数:store,路径path,当前模块,根state</span><br>    <span class="hljs-title function_">installModule</span>(<span class="hljs-variable language_">this</span>, [], <span class="hljs-variable language_">this</span>.<span class="hljs-property">_modules</span>.<span class="hljs-property">root</span>, options.<span class="hljs-property">state</span>);<br>    <span class="hljs-comment">// 3.处理计算属性,将_wrappedGetters中的属性定义到getters中;</span><br>    <span class="hljs-comment">// 同时处理state,将state变成响应式,并且将getters和state关联起来</span><br>    <span class="hljs-title function_">resetStoreVM</span>(<span class="hljs-variable language_">this</span>, options);<br>    <span class="hljs-comment">// 4.安装插件</span><br>    plugins.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">plugin</span>) =&gt;</span> <span class="hljs-title function_">plugin</span>(<span class="hljs-variable language_">this</span>));<br>  &#125;<br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">state</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_vm</span>.<span class="hljs-property">_data</span>.<span class="hljs-property">$$state</span>;<br>  &#125;<br>  commit = <span class="hljs-function">(<span class="hljs-params">type, payload</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> entry = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_mutations</span>[type];<br>    <span class="hljs-keyword">if</span> (!entry) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;没有这个mutation&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    entry.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> <span class="hljs-title function_">fn</span>(payload));<br>  &#125;;<br>  dispatch = <span class="hljs-function">(<span class="hljs-params">type, payload</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> entry = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_actions</span>[type];<br>    <span class="hljs-keyword">if</span> (!entry) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;没有这个action&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">const</span> result =<br>      entry.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span><br>        ? <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(entry.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> <span class="hljs-title function_">fn</span>(payload)))<br>        : entry[<span class="hljs-number">0</span>](payload);<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>定义<code>this._actions</code>、<code>this._mutations</code>、<code>this._wrappedGetters</code>用来将子module的方法都放到一起.</li><li>通过<code>this._modules = new ModuleCollection(options)</code>将store递归转化为树结构<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> root = &#123;<br>  <span class="hljs-attr">_raw</span>: rootModule, <span class="hljs-comment">// 当前模块的原始数据</span><br>  <span class="hljs-attr">_children</span>: &#123;&#125;, <span class="hljs-comment">// 子module</span><br>  <span class="hljs-attr">state</span>: &#123;&#125;, <span class="hljs-comment">// 当前模块的数据</span><br>&#125;;<br></code></pre></td></tr></table></figure></li></ol><h4 id="ModuleCollection类"><a href="#ModuleCollection类" class="headerlink" title="ModuleCollection类"></a>ModuleCollection类</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; forEachValue &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../utils&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Module</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./module&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ModuleCollection</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span> = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 格式化后的结果</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">register</span>([], options); <span class="hljs-comment">// 注册模块</span><br>  &#125;<br>  <span class="hljs-title function_">getNameSpace</span>(<span class="hljs-params">path</span>) &#123;<br>    <span class="hljs-keyword">let</span> root = <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>;<br>    <span class="hljs-comment">// 累加,如果有命名空间,则加上/,没有则不加,最后返回</span><br>    <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">namespace, key</span>) =&gt;</span> &#123;<br>      root = root.<span class="hljs-property">_children</span>[key];<br>      <span class="hljs-keyword">return</span> namespace + (root.<span class="hljs-property">_raw</span>.<span class="hljs-property">namespaced</span> ? key + <span class="hljs-string">&quot;/&quot;</span> : <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;, <span class="hljs-string">&quot;&quot;</span>);<br>  &#125;<br>  <span class="hljs-title function_">register</span>(<span class="hljs-params">path, rootModule</span>) &#123;<br>    <span class="hljs-keyword">const</span> newModule = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Module</span>(rootModule);<br>    <span class="hljs-comment">// let newModule = &#123;</span><br>    <span class="hljs-comment">//   _raw: rootModule, // 当前模块</span><br>    <span class="hljs-comment">//   _children: &#123;&#125;, // 子模块</span><br>    <span class="hljs-comment">//   state: rootModule.state, // 当前模块的state</span><br>    <span class="hljs-comment">// &#125;;</span><br>    <span class="hljs-keyword">if</span> (path.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span> = newModule;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// slice(a,b) 截取数组,从索引a开始,到索引b结束,不包含索引b, [0,-1]表示从索引0开始,到索引-1结束,不包含索引-1,即不包含最后一个元素</span><br>      <span class="hljs-comment">// 找到当前模块的父模块</span><br>      <span class="hljs-keyword">let</span> parent = path.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, cur</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> prev.<span class="hljs-property">_children</span>[cur];<br>      &#125;, <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>);<br>      <span class="hljs-comment">// 将当前模块添加到父模块的_children中</span><br>      parent.<span class="hljs-property">_children</span>[path[path.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]] = newModule;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (rootModule.<span class="hljs-property">modules</span>) &#123;<br>      <span class="hljs-title function_">forEachValue</span>(rootModule.<span class="hljs-property">modules</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-variable language_">module</span>, moduleName</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">group</span>(<span class="hljs-string">`格式化<span class="hljs-subst">$&#123;moduleName&#125;</span>`</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">register</span>(path.<span class="hljs-title function_">concat</span>(moduleName), <span class="hljs-variable language_">module</span>); <span class="hljs-comment">// 递归注册模块</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupEnd</span>()<br>      &#125;);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>将store转换树结构: 通过<code>this.register([], options); </code>实现,第一个参数是<code>path数组,初始化是[]</code>,第二个是store的入参.<code>this.root=null</code>用于存储转换后的树结果</li><li>定义树基本结构: <code>const newModule = new Module(rootModule)</code>类</li><li>递归: <ul><li>第一次path是[],所以<code>this.root = newModule</code>将第一层转换为树结构</li><li>然后判断有modules, 递归注册,此时第一个参数为<code>path.concat(moduleName)</code>,第二个参数为<code>module</code></li><li>通过reduce循环获取当前层级(初始值是this.root),然后通过<code>parent._children[path[path.length - 1]] = newModule</code>就完成了所有层级转换为树结构</li></ul></li></ul><h4 id="Module类"><a href="#Module类" class="headerlink" title="Module类"></a>Module类</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; forEachValue &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../utils&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Module</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_raw</span> = options; <span class="hljs-comment">// 当前模块的原始数据</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_children</span> = &#123;&#125;; <span class="hljs-comment">// 子模块</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = options.<span class="hljs-property">state</span>; <span class="hljs-comment">// 当前模块的state</span><br>  &#125;<br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">namespaced</span>() &#123;<br>    <span class="hljs-keyword">return</span> !!<span class="hljs-variable language_">this</span>.<span class="hljs-property">_raw</span>.<span class="hljs-property">namespaced</span>;<br>  &#125;<br>  <span class="hljs-title function_">getChild</span>(<span class="hljs-params">key</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_children</span>[key];<br>  &#125;<br>  <span class="hljs-title function_">addChild</span>(<span class="hljs-params">key, <span class="hljs-variable language_">module</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_children</span>[key] = <span class="hljs-variable language_">module</span>;<br>  &#125;<br>  <span class="hljs-title function_">forEachMutation</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_raw</span>.<span class="hljs-property">mutations</span>) &#123;<br>      <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_raw</span>.<span class="hljs-property">mutations</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">fn</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_raw</span>.<span class="hljs-property">mutations</span>[key], key);<br>      &#125;);<br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">forEachAction</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_raw</span>.<span class="hljs-property">actions</span>) &#123;<br>      <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_raw</span>.<span class="hljs-property">actions</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">fn</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_raw</span>.<span class="hljs-property">actions</span>[key], key);<br>      &#125;);<br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">forEachGetter</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_raw</span>.<span class="hljs-property">getters</span>) &#123;<br>      <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_raw</span>.<span class="hljs-property">getters</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">fn</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_raw</span>.<span class="hljs-property">getters</span>[key], key);<br>      &#125;);<br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">forEachChild</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_children</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">fn</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_children</span>[key], key);<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>定义了树的基本结构</li></ul><h4 id="reduce方法"><a href="#reduce方法" class="headerlink" title="reduce方法"></a>reduce方法</h4><p>reduce()方法可以搞定的东西特别多，就是循环遍历能做的，reduce都可以做.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, cur, index, arr</span>)=&gt;</span> &#123;<br>&#125;, initialValue)<br></code></pre></td></tr></table></figure><ul><li>prev 上一次调用回调返回的值，或者是提供的初始值（initialValue））</li><li>cur (当前数组循环到的元素)</li><li>index (当前数组循环到的元素的索引)</li><li>调用reduce的数组</li><li>initialValue (初始值)<ul><li>没有初始值: 从第一项开始循环,即index=1,prev=第0项,cur=第1项</li><li>有初始值: 从第0项开始循环,即index=0,prev=初始值,cur=第0项</li></ul></li><li>每次return的值就是下次循环的prev<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-keyword">const</span> result=arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev,cur,index,arr</span>)=&gt;</span>&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(prev,cur,index,arr);<br>   <span class="hljs-keyword">return</span> prev+cur<br> &#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// 10</span><br> <span class="hljs-comment">// 1 2 1 (4) [1, 2, 3, 4]</span><br> <span class="hljs-comment">// 3 3 2 (4) [1, 2, 3, 4]</span><br> <span class="hljs-comment">// 6 4 3 (4) [1, 2, 3, 4]</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-keyword">const</span> result=arr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev,cur,index,arr</span>)=&gt;</span>&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(prev,cur,index,arr);<br>   <span class="hljs-keyword">return</span> prev+cur<br>&#125;,<span class="hljs-number">6</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">//16</span><br> <span class="hljs-comment">// 6 1 0 (4) [1, 2, 3, 4]</span><br> <span class="hljs-comment">// 7 2 1 (4) [1, 2, 3, 4]</span><br> <span class="hljs-comment">// 9 3 2 (4) [1, 2, 3, 4]</span><br> <span class="hljs-comment">// 12 4 3 (4) [1, 2, 3, 4]</span><br></code></pre></td></tr></table></figure>转换后的结果<img src="images/2.jpg" width="80%"/></li></ul><h4 id="执行installModule方法是主要功能"><a href="#执行installModule方法是主要功能" class="headerlink" title="执行installModule方法是主要功能"></a>执行installModule方法是主要功能</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">installModule</span> = (<span class="hljs-params">store, path, <span class="hljs-variable language_">module</span>, rootState</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 判断是否是根模块</span><br>  <span class="hljs-keyword">if</span> (path.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 不是根模块,找到当前模块的父模块</span><br>    <span class="hljs-keyword">let</span> parent = path.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">root, current</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> root[current];<br>    &#125;, rootState);<br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">set</span>(parent, path[path.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>], <span class="hljs-variable language_">module</span>.<span class="hljs-property">state</span>);<br>  &#125;<br>  <span class="hljs-comment">// 计算出当前模块的命名空间,在订阅的时候每个模块都有一个命名空间,用于区分不同的模块,如: a/changeAge</span><br>  <span class="hljs-comment">// 思路:从根模块开始,一层一层的找到当前模块的父模块,然后拼接上当前模块的名称</span><br>  <span class="hljs-keyword">let</span> namespace = store.<span class="hljs-property">_modules</span>.<span class="hljs-title function_">getNameSpace</span>(path);<br>  <span class="hljs-keyword">const</span> local = (<span class="hljs-variable language_">module</span>.<span class="hljs-property">context</span> = <span class="hljs-title function_">makeLocalContext</span>(<br>    <span class="hljs-comment">// 生成当前模块的上下文</span><br>    store,<br>    namespace,<br>    path<br>  ));<br>  <span class="hljs-comment">// 注册mutation</span><br>  <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">forEachMutation</span>(<span class="hljs-function">(<span class="hljs-params">mutation, key</span>) =&gt;</span> &#123;<br>    store.<span class="hljs-property">_mutations</span>[namespace + key] = store.<span class="hljs-property">_mutations</span>[namespace + key] || [];<br>    store.<span class="hljs-property">_mutations</span>[namespace + key].<span class="hljs-title function_">push</span>(<span class="hljs-function">(<span class="hljs-params">payload</span>) =&gt;</span> &#123;<br>      mutation.<span class="hljs-title function_">call</span>(store, local.<span class="hljs-property">state</span>, payload);<br>    &#125;);<br>  &#125;);<br>  <span class="hljs-comment">// 注册action</span><br>  <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">forEachAction</span>(<span class="hljs-function">(<span class="hljs-params">action, key</span>) =&gt;</span> &#123;<br>    store.<span class="hljs-property">_actions</span>[namespace + key] = store.<span class="hljs-property">_actions</span>[namespace + key] || [];<br>    store.<span class="hljs-property">_actions</span>[namespace + key].<span class="hljs-title function_">push</span>(<span class="hljs-function">(<span class="hljs-params">payload</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">let</span> res = action.<span class="hljs-title function_">call</span>(store, local, payload);<br>      <span class="hljs-keyword">const</span> isPromise = res &amp;&amp; <span class="hljs-keyword">typeof</span> res.<span class="hljs-property">then</span> === <span class="hljs-string">&quot;function&quot;</span>;<br>      <span class="hljs-keyword">if</span> (!isPromise) &#123;<br>        res = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(res);<br>      &#125;<br>      <span class="hljs-keyword">return</span> res;<br>    &#125;);<br>  &#125;);<br>  <span class="hljs-comment">// 注册getter</span><br>  <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">forEachGetter</span>(<span class="hljs-function">(<span class="hljs-params">getter, key</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (store.<span class="hljs-property">_wrappedGetters</span>[namespace + key]) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// wrappedGetter的作用是包裹原始的getter,并且传入当前模块的state,当前模块的getters,根state,根getters</span><br>    store.<span class="hljs-property">_wrappedGetters</span>[namespace + key] = <span class="hljs-keyword">function</span> <span class="hljs-title function_">wrappedGetter</span>(<span class="hljs-params">store</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">getter</span>(local.<span class="hljs-property">state</span>, local.<span class="hljs-property">getters</span>, store.<span class="hljs-property">state</span>, store.<span class="hljs-property">getters</span>); <span class="hljs-comment">// 传入当前模块的state,当前模块的getters,根state,根getters</span><br>    &#125;;<br>  &#125;);<br>  <span class="hljs-comment">// 递归注册子模块</span><br>  <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">forEachChild</span>(<span class="hljs-function">(<span class="hljs-params">child, key</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">installModule</span>(store, path.<span class="hljs-title function_">concat</span>(key), child, rootState);<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">makeLocalContext</span>(<span class="hljs-params">store, namespace, path</span>) &#123;<br>  <span class="hljs-keyword">let</span> noNamespace = namespace === <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">let</span> local = &#123;<br>    <span class="hljs-attr">dispatch</span>: noNamespace<br>      ? store.<span class="hljs-property">dispatch</span><br>      : <span class="hljs-function">(<span class="hljs-params">type, payload</span>) =&gt;</span> &#123;<br>          type = namespace + type;<br>          <span class="hljs-keyword">return</span> store.<span class="hljs-title function_">dispatch</span>(type, payload);<br>        &#125;,<br>    <span class="hljs-attr">commit</span>: noNamespace<br>      ? store.<span class="hljs-property">commit</span><br>      : <span class="hljs-function">(<span class="hljs-params">type, payload</span>) =&gt;</span> &#123;<br>          type = namespace + type;<br>          <span class="hljs-keyword">return</span> store.<span class="hljs-title function_">commit</span>(type, payload);<br>        &#125;,<br>  &#125;;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(local, &#123;<br>    <span class="hljs-attr">state</span>: &#123;<br>      <span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> state = store.<span class="hljs-property">state</span>;<br>        <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">root, current</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">return</span> root[current];<br>        &#125;, state);<br>      &#125;,<br>    &#125;,<br>  &#125;);<br>  <span class="hljs-keyword">return</span> local;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">resetStoreVM</span>(<span class="hljs-params">store, options</span>) &#123;<br>  <span class="hljs-keyword">const</span> computed = &#123;&#125;;<br>  store.<span class="hljs-property">getters</span> = &#123;&#125;;<br>  <span class="hljs-title function_">forEachValue</span>(store.<span class="hljs-property">_wrappedGetters</span>, <span class="hljs-function">(<span class="hljs-params">fn, key</span>) =&gt;</span> &#123;<br>    computed[key] = <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">fn</span>(store.<span class="hljs-property">state</span>);<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(store.<span class="hljs-property">getters</span>, key, &#123;<br>      <span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> store.<span class="hljs-property">_vm</span>[key],<br>    &#125;);<br>  &#125;);<br>  store.<span class="hljs-property">_vm</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-attr">$$state</span>: options.<span class="hljs-property">state</span>,<br>    &#125;,<br>    computed,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="将module的state拼接上path"><a href="#将module的state拼接上path" class="headerlink" title="将module的state拼接上path"></a>将module的state拼接上path</h5><p>将每个模块的state拼接上path,然后设置到父模块的state中,结果如下图<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-comment">// 判断是否是根模块</span><br><span class="hljs-keyword">if</span> (path.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>  <span class="hljs-comment">// 不是根模块,找到当前模块的父模块</span><br>  <span class="hljs-keyword">let</span> parent = path.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>).<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">root, current</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> root[current];<br>  &#125;, rootState);<br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">set</span>(parent, path[path.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>], <span class="hljs-variable language_">module</span>.<span class="hljs-property">state</span>);<br>&#125;<br></code></pre></td></tr></table></figure><br>  <img src="images/3.jpg" width="80%"/></p><h5 id="计算出每个module的命名空间"><a href="#计算出每个module的命名空间" class="headerlink" title="计算出每个module的命名空间"></a>计算出每个module的命名空间</h5>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> namespace = store.<span class="hljs-property">_modules</span>.<span class="hljs-title function_">getNameSpace</span>(path);<br></code></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// src/vuex/moudle/index.js</span><br><span class="hljs-title function_">getNameSpace</span>(<span class="hljs-params">path</span>) &#123;<br>  <span class="hljs-keyword">let</span> root = <span class="hljs-variable language_">this</span>.<span class="hljs-property">root</span>;<br>  <span class="hljs-comment">// 累加,如果有命名空间,则加上/,没有则不加,最后返回</span><br>  <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">namespace, key</span>) =&gt;</span> &#123;<br>    root = root.<span class="hljs-property">_children</span>[key];<br>    <span class="hljs-keyword">return</span> namespace + (root.<span class="hljs-property">_raw</span>.<span class="hljs-property">namespaced</span> ? key + <span class="hljs-string">&quot;/&quot;</span> : <span class="hljs-string">&quot;&quot;</span>);<br>  &#125;, <span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>  <img src="images/4.jpg" width="80%"/><h5 id="为每个module绑定一个context上下文"><a href="#为每个module绑定一个context上下文" class="headerlink" title="为每个module绑定一个context上下文"></a>为每个module绑定一个context上下文</h5><p>为module绑定一个context属性即生成每个模块的上下文store<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 生成当前模块的上下文</span><br><span class="hljs-keyword">const</span> local = (<span class="hljs-variable language_">module</span>.<span class="hljs-property">context</span> = <span class="hljs-title function_">makeLocalContext</span>(store, namespace, path));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(local, <span class="hljs-string">&quot;local&quot;</span>);<br><span class="hljs-comment">// 生成当前模块的上下文</span><br><span class="hljs-comment">// - 重写dispatch,commit,拼接上命名空间</span><br><span class="hljs-comment">// - 对于state,通过Object.defineProperty将state变成响应式</span><br><span class="hljs-comment">// - 将dispatch、commit、state返回为一个对象local</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">makeLocalContext</span>(<span class="hljs-params">store, namespace, path</span>) &#123;<br>  <span class="hljs-keyword">let</span> noNamespace = namespace === <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">let</span> local = &#123;<br>    <span class="hljs-attr">dispatch</span>: noNamespace<br>      ? store.<span class="hljs-property">dispatch</span><br>      : <span class="hljs-function">(<span class="hljs-params">type, payload</span>) =&gt;</span> &#123;<br>          type = namespace + type;<br>          <span class="hljs-keyword">return</span> store.<span class="hljs-title function_">dispatch</span>(type, payload);<br>        &#125;,<br>    <span class="hljs-attr">commit</span>: noNamespace<br>      ? store.<span class="hljs-property">commit</span><br>      : <span class="hljs-function">(<span class="hljs-params">type, payload</span>) =&gt;</span> &#123;<br>          type = namespace + type;<br>          <span class="hljs-keyword">return</span> store.<span class="hljs-title function_">commit</span>(type, payload);<br>        &#125;,<br>  &#125;;<br>  <span class="hljs-comment">//  Object.defineProperties和Object.defineProperty的区别是前者可以定义多个属性,后者只能定义一个属性</span><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(local, &#123;<br>    <span class="hljs-attr">state</span>: &#123;<br>      <span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> state = store.<span class="hljs-property">state</span>;<br>        <span class="hljs-keyword">return</span> path.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">root, current</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">return</span> root[current];<br>        &#125;, state);<br>      &#125;,<br>    &#125;,<br>  &#125;);<br>  <span class="hljs-keyword">return</span> local;<br>&#125;<br></code></pre></td></tr></table></figure></p><img src="images/5.jpg" width="80%"/><h5 id="将mutation-action-getter-push到对应的数组-mutations-actions-wrappedGetters中以及递归执行installModule注册子模块"><a href="#将mutation-action-getter-push到对应的数组-mutations-actions-wrappedGetters中以及递归执行installModule注册子模块" class="headerlink" title="将mutation,action,getter push到对应的数组_mutations,_actions,_wrappedGetters中以及递归执行installModule注册子模块"></a>将mutation,action,getter push到对应的数组_mutations,_actions,_wrappedGetters中以及递归执行installModule注册子模块</h5>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 注册mutation</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-title function_">forEachMutation</span>(<span class="hljs-function">(<span class="hljs-params">mutation, key</span>) =&gt;</span> &#123;<br>  store.<span class="hljs-property">_mutations</span>[namespace + key] = store.<span class="hljs-property">_mutations</span>[namespace + key] || [];<br>  store.<span class="hljs-property">_mutations</span>[namespace + key].<span class="hljs-title function_">push</span>(<span class="hljs-function">(<span class="hljs-params">payload</span>) =&gt;</span> &#123;<br>    mutation.<span class="hljs-title function_">call</span>(store, local.<span class="hljs-property">state</span>, payload);<br>  &#125;);<br>&#125;);<br><span class="hljs-comment">// 注册action</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-title function_">forEachAction</span>(<span class="hljs-function">(<span class="hljs-params">action, key</span>) =&gt;</span> &#123;<br>  store.<span class="hljs-property">_actions</span>[namespace + key] = store.<span class="hljs-property">_actions</span>[namespace + key] || [];<br>  store.<span class="hljs-property">_actions</span>[namespace + key].<span class="hljs-title function_">push</span>(<span class="hljs-function">(<span class="hljs-params">payload</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> res = action.<span class="hljs-title function_">call</span>(store, local, payload);<br>    <span class="hljs-keyword">const</span> isPromise = res &amp;&amp; <span class="hljs-keyword">typeof</span> res.<span class="hljs-property">then</span> === <span class="hljs-string">&quot;function&quot;</span>;<br>    <span class="hljs-keyword">if</span> (!isPromise) &#123;<br>      res = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(res);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>  &#125;);<br>&#125;);<br><span class="hljs-comment">// 注册getter</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-title function_">forEachGetter</span>(<span class="hljs-function">(<span class="hljs-params">getter, key</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (store.<span class="hljs-property">_wrappedGetters</span>[namespace + key]) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-comment">// wrappedGetter的作用是包裹原始的getter,并且传入当前模块的state,当前模块的getters,根state,根getters</span><br>  store.<span class="hljs-property">_wrappedGetters</span>[namespace + key] = <span class="hljs-keyword">function</span> <span class="hljs-title function_">wrappedGetter</span>(<span class="hljs-params">store</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">getter</span>(local.<span class="hljs-property">state</span>, local.<span class="hljs-property">getters</span>, store.<span class="hljs-property">state</span>, store.<span class="hljs-property">getters</span>); <span class="hljs-comment">// 传入当前模块的state,当前模块的getters,根state,根getters</span><br>  &#125;;<br>&#125;);<br><span class="hljs-comment">// 递归注册子模块</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-title function_">forEachChild</span>(<span class="hljs-function">(<span class="hljs-params">child, key</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">installModule</span>(store, path.<span class="hljs-title function_">concat</span>(key), child, rootState);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="通过new-Vue实现视图数据响应更新-将state变成响应式"><a href="#通过new-Vue实现视图数据响应更新-将state变成响应式" class="headerlink" title="通过new Vue实现视图数据响应更新,将state变成响应式"></a>通过new Vue实现视图数据响应更新,将state变成响应式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-comment">// 处理计算属性,将_wrappedGetters中的属性定义到getters中;</span><br>  <span class="hljs-comment">// 同时处理state,将state变成响应式,并且将getters和state关联起来</span><br><span class="hljs-title function_">resetStoreVM</span>(<span class="hljs-variable language_">this</span>, options);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">resetStoreVM</span>(<span class="hljs-params">store, options</span>) &#123;<br>  <span class="hljs-keyword">const</span> computed = &#123;&#125;;<br>  store.<span class="hljs-property">getters</span> = &#123;&#125;;<br>  <span class="hljs-title function_">forEachValue</span>(store.<span class="hljs-property">_wrappedGetters</span>, <span class="hljs-function">(<span class="hljs-params">fn, key</span>) =&gt;</span> &#123;<br>    computed[key] = <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">fn</span>(store.<span class="hljs-property">state</span>);<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(store.<span class="hljs-property">getters</span>, key, &#123;<br>      <span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> store.<span class="hljs-property">_vm</span>[key],<br>    &#125;);<br>  &#125;);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(options.<span class="hljs-property">state</span>, <span class="hljs-string">&quot;options.state&quot;</span>);<br>  <span class="hljs-comment">// new一个Vue对象来实现数据的“响应式化”，运用Vue.js内部提供的数据双向绑定功能来实现store的数据与视图的同步更新.</span><br>  <span class="hljs-comment">// vuex是单向数据流</span><br>  store.<span class="hljs-property">_vm</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-attr">$$state</span>: options.<span class="hljs-property">state</span>,<br>    &#125;,<br>    computed,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>当我们访问<code>$store.state.xx</code>时即访问<code>Store的get state() &#123;return this._vm._data.$$state;&#125;</code></li><li>上面遍历store._wrappedGetters塞入computed中,同时通过Object.defineProperty在store.getters上绑定<code>store._vm[key]</code></li><li>最后通过new Vue传入state、computed来实现响应(数据改动,视图更新)</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Vuex导出install方法和Store类, 其中install提供mixin的beforeCreate往this.$store中赋值option.store,这样Vue.use就会使用install方法</li><li>我们在页面中调用<code>new Vuex.Store(&#123;options&#125;)</code>方法,会先通过<code>this._modules = new ModuleCollection(options)</code>递归将options转换为树结构<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">const</span> root = &#123;<br>  <span class="hljs-attr">_raw</span>: rootModule, <span class="hljs-comment">// 当前模块的原始数据</span><br>  <span class="hljs-attr">_children</span>: &#123;&#125;, <span class="hljs-comment">// 子module</span><br>  <span class="hljs-attr">state</span>: &#123;&#125;, <span class="hljs-comment">// 当前模块的数据</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li>传入树结构和初始化<code>path=[]</code>,递归执行<code>installModule</code>方法,遍历每个module.这样递归的时候,path存储每个module的命名空间,然后根据namespace拼接为state的key,也变成树结构.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">state</span>:&#123;<br>  <span class="hljs-attr">age</span>:<span class="hljs-number">10</span>,<br>  <span class="hljs-title class_">ModuleA</span>:&#123;<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">10</span>,<br>    <span class="hljs-title class_">ModuleA</span>-<span class="hljs-attr">A</span>:&#123;<br>      <span class="hljs-attr">age</span>:<span class="hljs-number">10</span>,<br>    &#125;<br>  &#125;,<br>  <span class="hljs-title class_">ModuleB</span>:&#123;<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">10</span>,<br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure></li><li>为每个module都增加一个context属性,表示当前module的上下文,其包含(state、mutations、actions),目的是各个模块都有自己的方法(经过拼接namespace重写)</li><li>然后定义<code>this._actions、this._mutations、this._wrappedGetters</code>用来存放包括modules的所有方法.因为上面是递归遍历module树,所以拼接好namespace,循环往数组后里面push</li><li>当我们访问$store.state.xx时即访问Store的get state() {return this._vm._data.$$state;}</li><li>遍历store._wrappedGetters塞入computed中,同时通过Object.defineProperty在store.getters上绑定store._vm[key],访问store.getters.xx即访问store._vm[key]</li><li>通过new Vue传入state、computed存入<code>store.vm</code>,结合67步, 就可以实现响应(数据改动,视图更新) </li></ol><h2 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a>疑问解答</h2><h3 id="mutation同步-action异步"><a href="#mutation同步-action异步" class="headerlink" title="mutation同步,action异步?"></a>mutation同步,action异步?</h3><p>为什么在mutation中不应该执行异步操作?而实际在里面放入异步操作貌似也没什么问题.参考<a href="https://vuex.vuejs.org/zh/guide/mutations.html#mutation-%E5%BF%85%E9%A1%BB%E6%98%AF%E5%90%8C%E6%AD%A5%E5%87%BD%E6%95%B0">vuex官网</a>.</p><ul><li>在Vuex中，mutation是唯一用于更改状态的途径。每个mutation执行完成后，都会对应到一个新的状态变更。这种同步的特性使得Vue DevTools谷歌插件能够轻松地追踪每一个状态的变化。它能够在每次mutation被调用时打个快照，形成一个状态变更的历史记录。这种机制对于调试和性能优化都非常有帮助。</li><li>如果mutation支持异步操作，就会引发一个问题：我们将无法精确知晓状态是何时更新的。异步操作的执行时间是不确定的，这使得状态变更的时机变得模糊不清。这样一来，在调试过程中就难以准确追踪状态的变化，给开发者带来不小的困扰。所以将异步操作以dispath分层</li></ul><h3 id="多个action-promise-all"><a href="#多个action-promise-all" class="headerlink" title="多个action, promise.all"></a>多个action, promise.all</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>     <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>     <span class="hljs-attr">store</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>       <span class="hljs-comment">// 存放数据,响应式,数据改变视图也会改变</span><br>       <span class="hljs-attr">state</span>: &#123;<br>         <span class="hljs-attr">age</span>: <span class="hljs-number">10</span>,<br>       &#125;,<br>       <span class="hljs-comment">// 计算属性,和computed原理一样,有缓存,依赖的数据变化才会重新计算</span><br>       <span class="hljs-attr">getters</span>: &#123;<br>         <span class="hljs-title function_">myAge</span>(<span class="hljs-params">state</span>) &#123;<br>           <span class="hljs-keyword">return</span> state.<span class="hljs-property">age</span> + <span class="hljs-number">20</span>;<br>         &#125;,<br>       &#125;,<br>       <span class="hljs-comment">// 修改state的唯一方式,同步的</span><br>       <span class="hljs-attr">mutations</span>: &#123;<br>         <span class="hljs-title function_">changeAge</span>(<span class="hljs-params">state, payload</span>) &#123;<br>           state.<span class="hljs-property">age</span> += payload;<br>         &#125;,<br>       &#125;,<br>       <span class="hljs-comment">// 异步操作,提交mutation,然后再去修改state</span><br>       <span class="hljs-attr">actions</span>: &#123;<br>         <span class="hljs-title function_">changeAge</span>(<span class="hljs-params">&#123; commit &#125;, payload</span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>                 <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                   <span class="hljs-title function_">resolve</span>();<br>                 &#125;, <span class="hljs-number">1000</span>);<br>               &#125;);<br>      <br>         &#125;,<br>       &#125;,<br>       <span class="hljs-attr">modules</span>: &#123;<br>         <span class="hljs-title class_">ModuleB</span>: &#123;<br>           <span class="hljs-attr">state</span>: &#123;<br>             <span class="hljs-attr">age</span>: <span class="hljs-number">100</span>,<br>           &#125;,<br>           <span class="hljs-attr">getters</span>: &#123;<br>             <span class="hljs-title function_">myAge</span>(<span class="hljs-params">state</span>) &#123;<br>               <span class="hljs-keyword">return</span> state.<span class="hljs-property">age</span> + <span class="hljs-number">20</span>;<br>             &#125;,<br>           &#125;,<br>           <span class="hljs-attr">mutations</span>: &#123;<br>             <span class="hljs-title function_">changeAge</span>(<span class="hljs-params">state, payload</span>) &#123;<br>               state.<span class="hljs-property">age</span> += payload;<br>             &#125;,<br>           &#125;,<br>           <span class="hljs-attr">actions</span>: &#123;<br>             <span class="hljs-title function_">changeAge</span>(<span class="hljs-params">&#123; commit &#125;, payload</span>) &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>                 <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                   <span class="hljs-title function_">resolve</span>();<br>                 &#125;, <span class="hljs-number">2000</span>);<br>               &#125;);<br>             &#125;,<br>           &#125;,<br>         &#125;,<br>       &#125;,<br>     &#125;),<br>     <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>       <span class="hljs-comment">// this.$store.commit(&quot;add&quot;);</span><br>     &#125;,<br>     <span class="hljs-attr">methods</span>:&#123;<br>       <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;dispatch异步&#x27;</span>);<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;changeAge&#x27;</span>,<span class="hljs-number">1</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>           <span class="hljs-comment">// console.log(&#x27;dispatch异步&#x27;);</span><br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;dispatch异步&#x27;</span>);<br>         &#125;)<br>       &#125;<br>     &#125;<br>   &#125;);<br></code></pre></td></tr></table></figure><p>上面代码,moduleB是没有namespace的,所以就是全局的,我们可以看到Store中会有2个</p><img src="images/6.jpg" width="80%"/><ul><li>当我们执行test函数时候,2s后才会打印结果,原理是Promise.all全部结束后才会返回.</li><li>如果不是promise,则push的时候会被包装成promise</li></ul>]]></content>
      
      
      <categories>
          
          <category> vue2源码 </category>
          
          <category> vuex </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>13.vue.use</title>
      <link href="/ypf-blog/2024/02/02/vue2%E6%BA%90%E7%A0%81/13.vue.use/"/>
      <url>/ypf-blog/2024/02/02/vue2%E6%BA%90%E7%A0%81/13.vue.use/</url>
      
        <content type="html"><![CDATA[<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.7.14/vue.min.js&quot;&gt;&lt;/script&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;33&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//    Vue.use插件</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> myPlugin = &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">install</span>(<span class="hljs-params">Vue, ...reset</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Vue</span>, reset);</span><br><span class="language-javascript">        <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">mixin</span>(&#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;插件&quot;</span>);</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> myPlugin1 = &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">install</span>(<span class="hljs-params">Vue, ...reset</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Vue</span>, reset);</span><br><span class="language-javascript">        <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">mixin</span>(&#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;插件1&quot;</span>);</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;;</span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(myPlugin,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);</span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(myPlugin1,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);</span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(myPlugin1,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vm);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(<span class="hljs-title class_">Vue</span>);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>Vue.use(plugin,a,b,c,d...)</code>是Vue的全局方法,一般我们使用该方法给Vue 添加全局功能,如指令、混入、修改Vue.prototype等</li><li>参数:第一个是插件plugin(可以为对象/函数,如果有install方法优先使用),剩下插件的参数,可以有多个</li><li>插件只会被注册一次(<code>_installedPlugins会判断</code>),即使多次调用<code>vue.use</code>也会只会执行第一次.上面我们对myPlugin1使用了2次,只打印了第一次 <strong>456</strong></li></ul><p>上面代码打印下,<br><img src="images/1.jpg" width="80%"/></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/<span class="hljs-variable language_">global</span>-api/index.<span class="hljs-property">js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">initGlobalAPI</span>(<span class="hljs-params">Vue</span>) &#123;<br>  ...<br>  <span class="hljs-comment">// 1.新增use方法</span><br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">use</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">plugin</span>) &#123;<br>    <span class="hljs-keyword">const</span> installedPlugins =<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">_installedPlugins</span> || (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_installedPlugins</span> = []); <span class="hljs-comment">// 存放已经安装的插件</span><br>    <span class="hljs-keyword">if</span> (installedPlugins.<span class="hljs-title function_">indexOf</span>(plugin) &gt; -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-comment">// 如果已经安装过了,则直接返回this,目的是为了链式调用</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">const</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 获取参数,如Vue.use(plugin,1,2,3),则args=[1,2,3]</span><br>    args.<span class="hljs-title function_">unshift</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// 将Vue放到第一个参数,如Vue.use(plugin,1,2,3),则args=[Vue,1,2,3]</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> plugin.<span class="hljs-property">install</span> === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>      <span class="hljs-comment">// 如果plugin是一个对象,并且有install方法,则调用install方法</span><br>      plugin.<span class="hljs-property">install</span>.<span class="hljs-title function_">apply</span>(plugin, args);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> plugin === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>      <span class="hljs-comment">// 如果plugin是一个函数,则直接调用</span><br>      plugin.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, args);<br>    &#125;<br>    installedPlugins.<span class="hljs-title function_">push</span>(plugin); <span class="hljs-comment">// 将插件放到已安装插件中</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>; <span class="hljs-comment">// 返回this,目的是为了链式调用</span><br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><ul><li><code>arr.slice(start,end)</code> 返回一个新的数组,包含从 start 到 end （不包括该元素）</li><li>如果省略 end ，那么 slice 从 start 一直到数组末尾</li><li>原数组不会被修改</li></ul><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><ul><li>arguments是一个伪数组,没有slice方法,所以需要借用<code>Array.prototype.slice.call(arguments, 1)</code>来获取参数</li><li>也可以先通过<code>Array.prototype.slice.call(arguments)</code>将arguments转换为数组,然后<code>slice(1)</code>即可.</li><li>下面是this指向回顾<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//                  正常模式下              严格模式下</span><br>a.<span class="hljs-title function_">call</span>();           <span class="hljs-comment">//window               undefined</span><br>a.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>);       <span class="hljs-comment">//window               null</span><br>a.<span class="hljs-title function_">call</span>(<span class="hljs-literal">undefined</span>);  <span class="hljs-comment">//window               undefined</span><br>a.<span class="hljs-title function_">call</span>(<span class="hljs-number">1</span>);          <span class="hljs-comment">//Number&#123;1&#125;            1</span><br>a.<span class="hljs-title function_">call</span>(<span class="hljs-string">&#x27;1&#x27;</span>);         <span class="hljs-comment">//String&#123;&#x27;1&#x27;&#125;           &#x27;1&#x27;</span><br>a.<span class="hljs-title function_">call</span>(<span class="hljs-literal">true</span>);       <span class="hljs-comment">//Boolean&#123;true&#125;        true</span><br>a.<span class="hljs-title function_">call</span>(b);          <span class="hljs-comment">//function b()&#123;&#125;       function b()&#123;&#125;</span><br>a.<span class="hljs-title function_">call</span>(obj);        <span class="hljs-comment">//Object               Object</span><br></code></pre></td></tr></table></figure><h3 id="对象比较"><a href="#对象比较" class="headerlink" title="对象比较"></a>对象比较</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj1=&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;<br><span class="hljs-keyword">let</span> obj2=&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">2</span>&#125;<br><span class="hljs-keyword">const</span> arr=[obj1,obj2]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1===obj1) <span class="hljs-comment">// true 指向同一内存地址</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1===obj2) <span class="hljs-comment">// false 不是一个内存地址,==也是false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">indexOf</span>(obj1)&gt;-<span class="hljs-number">1</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>item===obj1)) <span class="hljs-comment">// 0 指向同一内存地址</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>同理任何类型都符合上述规律</strong></p><h3 id="解析原理"><a href="#解析原理" class="headerlink" title="解析原理"></a>解析原理</h3><ol><li>定义<code>installedPlugins</code>,先通过<code>indexOf</code>判断plugin是否存在<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> installedPlugins =<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">_installedPlugins</span> || (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_installedPlugins</span> = []); <span class="hljs-comment">// 存放已经安装的插件</span><br><span class="hljs-keyword">if</span> (installedPlugins.<span class="hljs-title function_">indexOf</span>(plugin) &gt; -<span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-comment">// 如果已经安装过了,则直接返回this,目的是为了链式调用</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>arguments是一个伪数组,没有slice方法,所以需要借用<code>Array.prototype.slice.call(arguments, 1)</code>来获取参数,然后通过<code>unshift(this)</code>将Vue放到数组第一项<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 获取参数,如Vue.use(plugin,1,2,3),则args=[1,2,3]</span><br>args.<span class="hljs-title function_">unshift</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// 将Vue放到第一个参数,如Vue.use(plugin,1,2,3),则args=[Vue,1,2,3]</span><br></code></pre></td></tr></table></figure></li><li>判断plugin有install就执行install里面方法,将上面args传过去.如果是函数直接调用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> plugin.<span class="hljs-property">install</span> === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>   <span class="hljs-comment">// 如果plugin是一个对象,并且有install方法,则调用install方法</span><br>   plugin.<span class="hljs-property">install</span>.<span class="hljs-title function_">apply</span>(plugin, args);<br> &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> plugin === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>   <span class="hljs-comment">// 如果plugin是一个函数,则直接调用</span><br>   plugin.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, args);<br> &#125;<br></code></pre></td></tr></table></figure></li><li>将plugin放到<code>已安装插件数组installedPlugins</code>中,最后<code>return this</code>用来链式调用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">installedPlugins.<span class="hljs-title function_">push</span>(plugin); <span class="hljs-comment">// 将插件放到已安装插件中</span><br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>; <span class="hljs-comment">// 返回this,目的是为了链式调用</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vue2源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基础-8</title>
      <link href="/ypf-blog/2024/01/25/gwy/LFTT/%E5%9F%BA%E7%A1%80-8/"/>
      <url>/ypf-blog/2024/01/25/gwy/LFTT/%E5%9F%BA%E7%A1%80-8/</url>
      
        <content type="html"><![CDATA[<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><img src="/ypf-blog/assets/images/gwy/LFTT/8-1.jpg" width="50%"/><p>案例特点:图形相交<br>考点:相交图形的边数、图形特征(纯曲、纯直)<br>练习题1: <strong>相交图形的边数</strong><br>规律:分别是343344,所以选C</p><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><img src="/ypf-blog/assets/images/gwy/LFTT/8-2.jpg" width="50%"/><p>案例特点:图形外有2个圆圈<br>考点:圆圈连线<br>练习题1: <strong>连线是体/面对角线</strong><br>所以选A</p><h3 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h3><img src="/ypf-blog/assets/images/gwy/LFTT/8-3.jpg" width="50%"/><p>案例特点:乍一看以为是移动规律,但是移动规律一般不考分组<br>练习题1: <strong>分离、相邻</strong><br>156左边的圆圈相邻,234右边的圆圈相邻,所以选D</p><h3 id="案例4"><a href="#案例4" class="headerlink" title="案例4"></a>案例4</h3><img src="/ypf-blog/assets/images/gwy/LFTT/8-4.jpg" width="50%"/><p>案例特点:看到纯文字、字母、数字等,要想到空间、部分、横竖线条数量、最大/最小封闭/开放<br>练习题1: <strong>最大最小数字与形状</strong><br>126形状最大的数字最大,345状最大的数字最小</p><h3 id="案例5"><a href="#案例5" class="headerlink" title="案例5"></a>案例5</h3><img src="/ypf-blog/assets/images/gwy/LFTT/8-5.jpg" width="50%"/><p>案例特点:一笔画、交点<br>练习题1: <strong>一笔画</strong><br>分别是221121,所以选B</p><h3 id="案例6"><a href="#案例6" class="headerlink" title="案例6"></a>案例6</h3><img src="/ypf-blog/assets/images/gwy/LFTT/8-6.jpg" width="50%"/><p>案例特点:复杂程度不单调(逻辑运算)<br>练习题1: <strong>轮廓数量-内部线条数</strong><br>分别是34 44 45 55 45 66,所以选D</p><h3 id="案例7"><a href="#案例7" class="headerlink" title="案例7"></a>案例7</h3><img src="/ypf-blog/assets/images/gwy/LFTT/8-7.jpg" width="50%"/><p>案例特点:切点数、切线数、交点数<br>练习题1: <strong>切点数</strong><br>分别是221211,所以选C</p><h3 id="案例8"><a href="#案例8" class="headerlink" title="案例8"></a>案例8</h3><img src="/ypf-blog/assets/images/gwy/LFTT/8-8.jpg" width="50%"/><p>案例特点:封闭/开放<br>规律1: <strong>封闭/开放</strong><br>145开放236封闭,所以选C<br>规律1: <strong>整体/分离</strong><br>135整体246分离</p><h3 id="案例9"><a href="#案例9" class="headerlink" title="案例9"></a>案例9</h3><img src="/ypf-blog/assets/images/gwy/LFTT/8-9.jpg" width="50%"/><p>案例特点:对称轴位置<br>练习题1: <strong>对称轴方向</strong><br>146一组,235一组,所以选D</p><h3 id="案例10"><a href="#案例10" class="headerlink" title="案例10"></a>案例10</h3><img src="/ypf-blog/assets/images/gwy/LFTT/8-10.jpg" width="50%"/><p>案例特点:<strong>外直内曲/外曲内直</strong><br>124外直内曲,356外曲内直,所以选A</p><h3 id="案例11"><a href="#案例11" class="headerlink" title="案例11"></a>案例11</h3><img src="/ypf-blog/assets/images/gwy/LFTT/8-11.jpg" width="50%"/><p>案例特点:多要素做差、复杂程度不单调、如果单要素考直角数量、 轮廓上交点<br>考点:<strong>直角数</strong>,<br>分别是454455,所以选C</p>]]></content>
      
      
      <categories>
          
          <category> gwy </category>
          
          <category> LFTT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基础-7</title>
      <link href="/ypf-blog/2024/01/24/gwy/LFTT/%E5%9F%BA%E7%A1%80-7/"/>
      <url>/ypf-blog/2024/01/24/gwy/LFTT/%E5%9F%BA%E7%A1%80-7/</url>
      
        <content type="html"><![CDATA[<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><img src="/ypf-blog/assets/images/gwy/LFTT/7-1.jpg" width="50%"/><p>考点:几组平行线,常见的图案 <code>Z N H I M、梯形、平行四边形、长方形等</code>,要想到考几组平行线(注意: 数几组一般是,2条线数过了,就不算了(不能说这条线和多条线平行就算多组))<br>练习题1: <strong>平行线</strong><br>规律:都是 1 2 3组平线线,所以选C</p><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><img src="/ypf-blog/assets/images/gwy/LFTT/7-2.jpg" width="50%"/><p>案例特点:阴影部分都是直角三角形<br>考点:阴影面积(可以画辅助线好判断)<br>练习题1: <strong>阴影面积</strong><br>规律:阴影面积都占1/4,所以选D</p><h3 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h3><img src="/ypf-blog/assets/images/gwy/LFTT/7-3.jpg" width="50%"/><p>案例特点:空间形状相似<br>考点:空间形状、空间数量(如相同形状的空间数量)<br>练习题1: <strong>相同形状的空间数量</strong><br>规律:三角形数量为434334分组,或者四边形分组也可以</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/7-3-1.jpg" width="50%"/><p>练习题2: <strong>空间数量</strong><br>规律: 分别是699966来分组</p><h3 id="案例4"><a href="#案例4" class="headerlink" title="案例4"></a>案例4</h3><img src="/ypf-blog/assets/images/gwy/LFTT/7-4.jpg" width="50%"/><p>案例特点:纯封闭、T字形、对称<br>考点:空间形状、对称、直角数量<br>练习题1: <strong>对称(对称轴位置)</strong><br>规律:对称轴和会和图形的一条线重合,所以选D</p><h3 id="案例5"><a href="#案例5" class="headerlink" title="案例5"></a>案例5</h3><img src="/ypf-blog/assets/images/gwy/LFTT/7-5.jpg" width="50%"/><p>案例特点:出头、类圆曲线<br>考点:曲直交点<br>练习题1: <strong>曲直交点(曲线与直线交点数)</strong><br>规律:分别是23423?所以选C</p><h3 id="案例6"><a href="#案例6" class="headerlink" title="案例6"></a>案例6</h3><img src="/ypf-blog/assets/images/gwy/LFTT/7-6.jpg" width="50%"/><p>案例特点:阴影数量一致、6边形轮廓<br>考点:内外环移动<br>练习题1: <strong>内外环移动</strong><br>规律:外环是顺时针每次移动3格,内环是逆时针每次移动2格,所以选D</p><h3 id="案例7"><a href="#案例7" class="headerlink" title="案例7"></a>案例7</h3><img src="/ypf-blog/assets/images/gwy/LFTT/7-7.jpg" width="50%"/><p>案例特点:存在空白缺口位置<br>考点:缺口位置移动(可以把缺口画个三角形占位)<br>练习题1: <strong>缺口位置移动</strong><br>规律:第一个缺口顺时针外环每次移动2格,第二个缺口顺时针外环每次移动1格,所以选A</p><h3 id="案例8"><a href="#案例8" class="headerlink" title="案例8"></a>案例8</h3><img src="/ypf-blog/assets/images/gwy/LFTT/7-8.jpg" width="50%"/><p>案例特点:坐标轴<br>考点:交点数、上下位置关系、还有之前讲过的与坐标轴形成的直角数<br>练习题1: <strong>上下空间数量逻辑运算</strong><br>规律:看交点数量,分别是023 345 56?没有规律,<br>    所以再看上下空间数量,分别是00 01 11; 11 12 22; 22 32 ?, 所以做差选C</p><h3 id="案例9"><a href="#案例9" class="headerlink" title="案例9"></a>案例9</h3><img src="/ypf-blog/assets/images/gwy/LFTT/7-9.jpg" width="50%"/><p>案例特点:出头<br>考点:交点数、一笔画、曲直交点、内部交点、轮廓上交点<br>练习题1: <strong>一笔画</strong><br>规律:笔画数分别是111 222</p><hr><p>练习题2: <strong>一笔画</strong><br>规律:笔画数分别是211 122分组</p><h3 id="案例10"><a href="#案例10" class="headerlink" title="案例10"></a>案例10</h3><img src="/ypf-blog/assets/images/gwy/LFTT/7-10.jpg" width="50%"/><p>案例特点:图形分离<br>考点:元素种类、曲直元素、空间位置<br>练习题1: <strong>元素种类</strong><br>规律:按行分别是1种元素、2种元素、3种元素,所以选D</p><hr><p>练习题2: <strong>元素种类</strong><br>规律:245都是相同大小元素,136都是不同元素</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>看到平行线、<code>Z N H I M、梯形、平行四边形、长方形等</code>,要想到考几组平行线</li><li>看到阴影三角形要想到阴影面积</li><li>看到空间形状相似的图形,要想到相同空间的数量、或者空间数量</li><li>看到对称要想到对称轴位置、数量</li><li>看到T字形要想到直角数</li><li>看到曲直图形,要想到曲直交点</li><li>看到阴影图形且轮廓一致,要想到内外环移动</li><li>看到空白缺口,可以把空白填充一个三角形,要想到空白位置移动</li><li>看到坐标轴要想到线条与坐标轴交点、上下空间数、与坐标轴形成的直角数</li><li>看到图形分离要想到相同元素种类</li></ul>]]></content>
      
      
      <categories>
          
          <category> gwy </category>
          
          <category> LFTT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>12.组件component和Vue.extend</title>
      <link href="/ypf-blog/2024/01/18/vue2%E6%BA%90%E7%A0%81/12.%E7%BB%84%E4%BB%B6component%E5%92%8CVue.extend/"/>
      <url>/ypf-blog/2024/01/18/vue2%E6%BA%90%E7%A0%81/12.%E7%BB%84%E4%BB%B6component%E5%92%8CVue.extend/</url>
      
        <content type="html"><![CDATA[<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.7.14/vue.min.js&quot;&gt;&lt;/script&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;33&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">my-component</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">my-component1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 创建全局组件 Vue.component</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&quot;my-component&quot;</span>, &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;div&gt;全局组件&lt;/div&gt;&quot;</span>,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">      <span class="hljs-comment">// 或者</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&quot;my-component1&quot;</span>, <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;div&gt;全局组件1&lt;/div&gt;&quot;</span>,</span><br><span class="language-javascript">    &#125;));</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-string">&quot;my-component&quot;</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;div&gt;局部组件&lt;/div&gt;&quot;</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ol><li>Vue可以通过<code>Vue.componet</code>创建全局组件, 有2种写法 <a href="https://v2.cn.vuejs.org/v2/api/#Vue-component">官网链接</a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// 传入一个扩展过的**构造器** </span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component&#x27;</span>, <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(&#123; <span class="hljs-comment">/* ... */</span> &#125;))<br> <span class="hljs-comment">// 传入一个**选项对象** (vue还是会自动调用 Vue.extend) </span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component&#x27;</span>, &#123; <span class="hljs-comment">/* ... */</span> &#125;)<br></code></pre></td></tr></table></figure></li><li>局部组件是直接传入配置来创建,最终核心都是调用了Vue.extend来创建组件的.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">components</span>: &#123;<br>   <span class="hljs-string">&quot;my-component&quot;</span>: &#123;<br>     <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;div&gt;局部组件&lt;/div&gt;&quot;</span>,<br>   &#125;,<br> &#125;,<br> <span class="hljs-comment">// 或者(不过这种写法就多此一举了) </span><br> <span class="hljs-attr">components</span>: &#123;<br>   <span class="hljs-string">&quot;my-component&quot;</span>:  <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(&#123;<br>     <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;div&gt;局部组件&lt;/div&gt;&quot;</span>,<br>   &#125;),<br> &#125;,<br></code></pre></td></tr></table></figure></li><li>如果全局组件和局部组件重名,vue会<strong>优先去$options上找局部组件,找不到再去找全局组件</strong>,我们打印下vm,可以看到$options上的局部组件,原形上是全局组件.</li></ol><img src="images/demo.jpg" width="50%"/>   <h2 id="组件的好处"><a href="#组件的好处" class="headerlink" title="组件的好处"></a>组件的好处</h2><ul><li><strong>最主要的就是组件更新</strong>,不会影响其他组件,只会更新当前组件</li><li>组件可以复用</li><li>组件化开发,提高开发效率</li></ul><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js">/src/<span class="hljs-variable language_">global</span>-api/index.<span class="hljs-property">js</span><br><span class="hljs-comment">// 说明：全局api</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">initGlobalAPI</span>(<span class="hljs-params">Vue</span>) &#123;<br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">options</span> = &#123;&#125;; <span class="hljs-comment">// 用来存放全局api</span><br>  <span class="hljs-comment">// 说明：合并options</span><br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">mixin</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">mixin</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = <span class="hljs-title function_">mergeOptions</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>, mixin); <span class="hljs-comment">// 合并options赋值給this.options,下次再调用Vue.mixin时，this.options就是上次合并后的结果</span><br>  &#125;;<br>  <span class="hljs-comment">// 1.存放全局组件</span><br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">options</span>.<span class="hljs-property">components</span> = &#123;&#125;; <span class="hljs-comment">// 放全局组件</span><br>  <span class="hljs-comment">// 2.定义方法</span><br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">component</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">id, definition</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> definition === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>      definition.<span class="hljs-property">name</span> = definition.<span class="hljs-property">name</span> || id;<br>      definition = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">extend</span>(definition); <span class="hljs-comment">// 调用构造函数</span><br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>.<span class="hljs-property">components</span>[id] = definition; <span class="hljs-comment">// 将组件放到全局组件中</span><br>  &#125;;<br>  <span class="hljs-comment">// 核心,返回一个构造函数</span><br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">extend</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Super</span> = <span class="hljs-variable language_">this</span>; <span class="hljs-comment">// Vue</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Sub</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">VueComponent</span>(<span class="hljs-params">opts</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_init</span>(opts); <span class="hljs-comment">// 调用父类的_init方法进行初始化</span><br>    &#125;;<br>    <span class="hljs-comment">// 要继承父组件的属性</span><br>    <span class="hljs-title class_">Sub</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Super</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>); <span class="hljs-comment">// 子类的原型指向父类的原型</span><br>    <span class="hljs-title class_">Sub</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Sub</span>; <span class="hljs-comment">// 修正constructor指向,即this指向</span><br>    <span class="hljs-title class_">Sub</span>.<span class="hljs-property">options</span> = <span class="hljs-title function_">mergeOptions</span>(<span class="hljs-title class_">Super</span>.<span class="hljs-property">options</span>, options); <span class="hljs-comment">// 合并options</span><br>    <span class="hljs-comment">// 子组件</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Sub</span>;<br>  &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js">/src/utils/index.<span class="hljs-property">js</span><br><span class="hljs-comment">// 3.定义components钩子函数</span><br>strats.<span class="hljs-property">components</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">parentVal, childVal</span>) &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(parentVal); <span class="hljs-comment">// 原型上放置全局组件</span><br>  <span class="hljs-keyword">if</span> (childVal) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> childVal) &#123;<br>      res[key] = childVal[key]; <span class="hljs-comment">// 局部组件</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br><span class="hljs-comment">// 说明：合并options</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">mergeOptions</span>(<span class="hljs-params">parent, child</span>) &#123;<br>  <span class="hljs-keyword">const</span> options = &#123;&#125;;<br>  <span class="hljs-comment">// 说明：合并parent有，但是child中没有的key</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> parent) &#123;<br>    <span class="hljs-title function_">mergeField</span>(key);<br>  &#125;<br>  <span class="hljs-comment">// 说明：合并child中有，但是parent中没有的key</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> child) &#123;<br>    <span class="hljs-title function_">mergeField</span>(key);<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">mergeField</span>(<span class="hljs-params">key</span>) &#123;<br>    <span class="hljs-comment">// 4.因为components有函数定义,所以触发合并</span><br>    <span class="hljs-keyword">if</span> (strats[key]) &#123;      <br>      options[key] = strats[key](parent[key], child[key]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      options[key] = child[key] || parent[key];<br>    &#125;<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(options,<span class="hljs-string">&#x27;options&#x27;</span>);<br>  <span class="hljs-keyword">return</span> options;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs js">src/vdom/index.<span class="hljs-property">js</span><br><br><span class="hljs-comment">// 创建虚拟dom（之前_c的参数：tag,data,多个子节点）</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createElement</span>(<span class="hljs-params">vm, tag, data = &#123;&#125;, ...children</span>) &#123;<br>  <span class="hljs-comment">//  判断tag是否是普通标签</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> tag === <span class="hljs-string">&quot;string&quot;</span> &amp;&amp; <span class="hljs-title function_">isReservedTag</span>(tag)) &#123;<br>    <span class="hljs-comment">// 普通标签</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">vnode</span>(tag, data, data.<span class="hljs-property">key</span>, children);<br>  &#125;<br>  <span class="hljs-comment">// 5.新增组件判断</span><br>  <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 组件</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">Ctor</span> = vm.<span class="hljs-property">$options</span>.<span class="hljs-property">components</span>[tag]; <span class="hljs-comment">// 组件的构造函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createComponentVnode</span>(vm, tag, data, children, <span class="hljs-title class_">Ctor</span>);<br>  &#125;<br>&#125; <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isReservedTag</span>(<span class="hljs-params">tagName</span>) &#123;<br>  <span class="hljs-keyword">let</span> str =<br>    <span class="hljs-string">&quot;html,body,base,head,link,meta,style,title,&quot;</span> +<br>    <span class="hljs-string">&quot;address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,&quot;</span> +<br>    <span class="hljs-string">&quot;div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,&quot;</span> +<br>    <span class="hljs-string">&quot;a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,&quot;</span> +<br>    <span class="hljs-string">&quot;s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,&quot;</span> +<br>    <span class="hljs-string">&quot;embed,object,param,source,canvas,script,noscript,del,ins,&quot;</span> +<br>    <span class="hljs-string">&quot;caption,col,colgroup,table,thead,tbody,td,th,tr,&quot;</span> +<br>    <span class="hljs-string">&quot;button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,&quot;</span> +<br>    <span class="hljs-string">&quot;output,progress,select,textarea,&quot;</span> +<br>    <span class="hljs-string">&quot;details,dialog,menu,menuitem,summary,&quot;</span> +<br>    <span class="hljs-string">&quot;content,element,shadow,template,blockquote,iframe,tfoot&quot;</span>;<br>  <span class="hljs-keyword">let</span> obj = &#123;&#125;;<br>  str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;,&quot;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">tag</span>) =&gt;</span> &#123;<br>    obj[tag] = <span class="hljs-literal">true</span>;<br>  &#125;);<br>  <span class="hljs-keyword">return</span> obj[tagName];<br>&#125;<br><span class="hljs-comment">// 6.创建组件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createComponentVnode</span>(<span class="hljs-params">vm, tag, data, children, Ctor</span>) &#123;<br>  <span class="hljs-comment">// 如果是对象，调用extend需要转换成构造函数</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Ctor</span> === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>    <span class="hljs-title class_">Ctor</span> = vm.<span class="hljs-property">constructor</span>.<span class="hljs-title function_">extend</span>(<span class="hljs-title class_">Ctor</span>);<br>  &#125;  <br>  data.<span class="hljs-property">hook</span> = &#123;<br>    <span class="hljs-title function_">init</span>(<span class="hljs-params">vnode</span>) &#123;<br>      <span class="hljs-comment">// 调用子组件的构造函数，创建子组件实例</span><br>      <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ctor</span>(&#123; <span class="hljs-attr">data</span>: &#123;&#125; &#125;);<br>      <span class="hljs-comment">// 将子组件实例挂载到vnode上，用于后面创建 dom元素时，判断有没有子组件实例，如果有，说明是组件，直接取出组件实例的$el属性即可</span><br>      vnode.<span class="hljs-property">componentInstance</span> = vm;<br>      <span class="hljs-comment">// 将子组件的dom元素挂载到vnode上</span><br>      vm.$mount();<br>    &#125;,<br>  &#125;;<br>  <span class="hljs-comment">// 返回虚拟dom</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">vnode</span>(<span class="hljs-string">`vue-component-<span class="hljs-subst">$&#123;tag&#125;</span>`</span>, data, data.<span class="hljs-property">key</span>, <span class="hljs-literal">undefined</span>, <span class="hljs-literal">undefined</span>, &#123;<br>    <span class="hljs-title class_">Ctor</span>,<br>    children,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js">/src/vdom/patch.<span class="hljs-property">js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createElm</span>(<span class="hljs-params">vnode</span>) &#123;<br>  <span class="hljs-keyword">let</span> &#123; tag, children, key, data, text &#125; = vnode;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> tag === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    <span class="hljs-comment">// 8.判断是组件,直接返回$el</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">createComponent</span>(vnode)) &#123;<br>      <span class="hljs-keyword">return</span> vnode.<span class="hljs-property">componentInstance</span>.<span class="hljs-property">$el</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 元素</span><br>      vnode.<span class="hljs-property">el</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(tag); <span class="hljs-comment">// 创建元素</span><br>      <span class="hljs-title function_">updateProperties</span>(vnode); <span class="hljs-comment">// 更新属性</span><br>      children.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">child</span>) =&gt;</span> &#123;<br>        vnode.<span class="hljs-property">el</span>.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title function_">createElm</span>(child)); <span class="hljs-comment">// 递归渲染子节点</span><br>      &#125;);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 文本</span><br>    vnode.<span class="hljs-property">el</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(text);<br>  &#125;<br>  <span class="hljs-keyword">return</span> vnode.<span class="hljs-property">el</span>;<br>&#125;<br><span class="hljs-comment">// 7.新增创建组件方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createComponent</span>(<span class="hljs-params">vnode, tag, data, children, Ctor</span>) &#123;<br>  <span class="hljs-keyword">let</span> i = vnode.<span class="hljs-property">data</span>;<br>  <span class="hljs-comment">// 相当于 i= i.hook i = i.init</span><br>  <span class="hljs-keyword">if</span> ((i = i.<span class="hljs-property">hook</span>) &amp;&amp; (i = i.<span class="hljs-property">init</span>)) &#123;<br>    <span class="hljs-title function_">i</span>(vnode);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (vnode.<span class="hljs-property">componentInstance</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们来分步解释下上面的逻辑.</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Fn</span>= <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">111</span>);<br>&#125;<br><span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">a</span>=<span class="hljs-number">1</span><br><span class="hljs-title class_">Fn</span>.<span class="hljs-property">b</span>=<span class="hljs-number">1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Fn</span>,<span class="hljs-string">&#x27;Fn&#x27;</span>)<br><span class="hljs-keyword">const</span> instance=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Fn</span>()<br>consle.<span class="hljs-title function_">log</span>(instance,<span class="hljs-string">&#x27;instance&#x27;</span>)<br></code></pre></td></tr></table></figure><img src="images/1.jpg" width="50%"/>我们再次打印以下结果都为true<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>); <span class="hljs-comment">// 实例的 __proto__ 指向构造函数的 prototype</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Fn</span>); <span class="hljs-comment">// 实例的 constructor 指向构造函数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Fn</span>); <span class="hljs-comment">// 构造函数的 prototype 的 constructor 指向构造函数</span><br></code></pre></td></tr></table></figure>我们再次打印<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance.<span class="hljs-property">constructor</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br></code></pre></td></tr></table></figure><img src="images/2.jpg" width="50%"/><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Fn1</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Fn.call(this);</span><br>&#125;;<br><span class="hljs-title class_">Fn1</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><span class="hljs-title class_">Fn1</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Fn1</span>; <span class="hljs-comment">// 添加constructor,否则找不到constructor就会继续向上找,找到Fn.prototype.constructor,这样就不对了</span><br><span class="hljs-keyword">const</span> instance1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fn1</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Fn1</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br></code></pre></td></tr></table></figure><p>我们先看一个奇怪的问题,为什么继承后要加<code>Fn1.prototype.constructor</code>将指针指向修正?<br>我们看下打印,没修正,少一个constructor属性,就会导致找不到继续向上找,找到了Fn.prototype.constructor即Fn<br><img src="images/constructor2.jpg" width="50%"/><br>修正,会多一个constructor属性Fn1<br><img src="images/constructor1.jpg" width="50%"/></p><p>实际上,不加上这句话继承也是没有问题,都能继承到方法属性,那为什么还要加呢?</p><ul><li>最重要的修正意义应该还是针对显示调用的时候,比如本来<code>Fn1.prototype.constructor就应该===F1</code> ,如果不修正就是<code>Fn.prototype.constructor即Fn</code>了,就导致我们显示调用创建实例的时候<code>new Fn1.prototype.constructor()</code>用的是Fn创建的实例,而不是Fn1创建的了,所以我们要修正</li><li>网上还看到一种说法, constructor其实没有什么用处，只是JavaScript语言设计的历史遗留物。由于constructor属性是可以变更的，所以未必真的指向对象的构造函数，只是一个提示。不过，从编程习惯上，我们应该尽量让对象的constructor指向其构造函数，以维持这个惯例。</li></ul><h3 id="原理讲解"><a href="#原理讲解" class="headerlink" title="原理讲解"></a>原理讲解</h3><ol><li>全局挂载<code>Vue.component</code>方法,先判断如果是对象,调用<code>Vue.extend</code>,该方法主要是创建一个子类(构造函数-里面很简单,和Vue一样就是<code>this._init(opts)</code>进行初始化)继承父类Vue原型上的方法然后return出去,同时通过<code>this.options.components[id] = definition</code>存入全局组件.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">initGlobalAPI</span>(<span class="hljs-params">Vue</span>) &#123;<br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">options</span> = &#123;&#125;; <span class="hljs-comment">// 用来存放全局api</span><br>  <span class="hljs-comment">// 说明：合并options</span><br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">mixin</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">mixin</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = <span class="hljs-title function_">mergeOptions</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>, mixin); <span class="hljs-comment">// 合并options赋值給this.options,下次再调用Vue.mixin时，this.options就是上次合并后的结果</span><br>  &#125;;<br>  <span class="hljs-comment">// 1.存放全局组件</span><br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">options</span>.<span class="hljs-property">components</span> = &#123;&#125;; <span class="hljs-comment">// 放全局组件</span><br>  <span class="hljs-comment">// 2.定义方法</span><br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">component</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">id, definition</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> definition === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>      definition.<span class="hljs-property">name</span> = definition.<span class="hljs-property">name</span> || id;<br>      definition = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">extend</span>(definition); <span class="hljs-comment">// 调用构造函数</span><br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>.<span class="hljs-property">components</span>[id] = definition; <span class="hljs-comment">// 将全局组件放到全options中</span><br>  &#125;;<br>  <span class="hljs-comment">// 核心,返回一个构造函数</span><br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">extend</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Super</span> = <span class="hljs-variable language_">this</span>; <span class="hljs-comment">// Vue</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Sub</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">VueComponent</span>(<span class="hljs-params">opts</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_init</span>(opts); <span class="hljs-comment">// 调用父类的_init方法进行初始化</span><br>    &#125;;<br>    <span class="hljs-comment">// 要继承父组件的属性</span><br>    <span class="hljs-title class_">Sub</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Super</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>); <span class="hljs-comment">// 子类的原型指向父类的原型</span><br>    <span class="hljs-title class_">Sub</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Sub</span>; <span class="hljs-comment">// 修正constructor指向,即this指向</span><br>    <span class="hljs-title class_">Sub</span>.<span class="hljs-property">options</span> = <span class="hljs-title function_">mergeOptions</span>(<span class="hljs-title class_">Super</span>.<span class="hljs-property">options</span>, options); <span class="hljs-comment">// 合并options</span><br>    <span class="hljs-comment">// 子组件</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Sub</span>;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>重点来了<code>Sub.options = mergeOptions(Super.options, options);</code>这段代码的主要作用就是往components的原型上挂载全局组件,这样如果局部组件和全局组件重名,优先用局部组件.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 3.定义components钩子函数</span><br>strats.<span class="hljs-property">components</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">parentVal, childVal</span>) &#123;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(parentVal); <span class="hljs-comment">// 原型上放置全局组件</span><br>  <span class="hljs-keyword">if</span> (childVal) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> childVal) &#123;<br>      res[key] = childVal[key]; <span class="hljs-comment">// 局部组件</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br><span class="hljs-comment">// 说明：合并options</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">mergeOptions</span>(<span class="hljs-params">parent, child</span>) &#123;<br>  <span class="hljs-keyword">const</span> options = &#123;&#125;;<br>  <span class="hljs-comment">// 说明：合并parent有，但是child中没有的key</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> parent) &#123;<br>    <span class="hljs-title function_">mergeField</span>(key);<br>  &#125;<br>  <span class="hljs-comment">// 说明：合并child中有，但是parent中没有的key</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> child) &#123;<br>    <span class="hljs-title function_">mergeField</span>(key);<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">mergeField</span>(<span class="hljs-params">key</span>) &#123;<br>    <span class="hljs-comment">// 4.因为components有函数定义,所以触发合并</span><br>    <span class="hljs-keyword">if</span> (strats[key]) &#123;      <br>      options[key] = strats[key](parent[key], child[key]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      options[key] = child[key] || parent[key];<br>    &#125;<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(options,<span class="hljs-string">&#x27;options&#x27;</span>);<br>  <span class="hljs-keyword">return</span> options;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><img src="images/3.jpg" width="50%"/><ol start="3"><li>当我们在页面中使用组件时,<code>&lt;my-component&gt;&lt;/my-component&gt; &lt;my-component1&gt;&lt;/my-component1&gt;</code>,编译后来到创建虚拟dom(下面会回忆下如何创建vdom), 要区分是html标签还是组件的标签,通过<code>isReservedTag函数</code>,如果是组件标签,直接获取<code>vm.$options.components[tag]</code>通过<code>createComponentVnode</code>创建组件vdom.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js">src/vdom/index.<span class="hljs-property">js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isReservedTag</span>(<span class="hljs-params">tagName</span>) &#123;<br>  <span class="hljs-keyword">let</span> str =<br>    <span class="hljs-string">&quot;html,body,base,head,link,meta,style,title,&quot;</span> +<br>    <span class="hljs-string">&quot;address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,&quot;</span> +<br>    <span class="hljs-string">&quot;div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,&quot;</span> +<br>    <span class="hljs-string">&quot;a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,&quot;</span> +<br>    <span class="hljs-string">&quot;s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,&quot;</span> +<br>    <span class="hljs-string">&quot;embed,object,param,source,canvas,script,noscript,del,ins,&quot;</span> +<br>    <span class="hljs-string">&quot;caption,col,colgroup,table,thead,tbody,td,th,tr,&quot;</span> +<br>    <span class="hljs-string">&quot;button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,&quot;</span> +<br>    <span class="hljs-string">&quot;output,progress,select,textarea,&quot;</span> +<br>    <span class="hljs-string">&quot;details,dialog,menu,menuitem,summary,&quot;</span> +<br>    <span class="hljs-string">&quot;content,element,shadow,template,blockquote,iframe,tfoot&quot;</span>;<br>  <span class="hljs-keyword">let</span> obj = &#123;&#125;;<br>  str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;,&quot;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">tag</span>) =&gt;</span> &#123;<br>    obj[tag] = <span class="hljs-literal">true</span>;<br>  &#125;);<br>  <span class="hljs-keyword">return</span> obj[tagName];<br>&#125;<br><span class="hljs-comment">// 创建虚拟dom（之前_c的参数：tag,data,多个子节点）</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createElement</span>(<span class="hljs-params">vm, tag, data = &#123;&#125;, ...children</span>) &#123;<br>  <span class="hljs-comment">//  判断tag是否是普通标签</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> tag === <span class="hljs-string">&quot;string&quot;</span> &amp;&amp; <span class="hljs-title function_">isReservedTag</span>(tag)) &#123;<br>    <span class="hljs-comment">// 普通标签</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">vnode</span>(tag, data, data.<span class="hljs-property">key</span>, children);<br>  &#125;<br>  <span class="hljs-comment">// 1.新增组件vdom创建</span><br>  <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 组件的构造函数</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">Ctor</span> = vm.<span class="hljs-property">$options</span>.<span class="hljs-property">components</span>[tag];<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createComponentVnode</span>(vm, tag, data, children, <span class="hljs-title class_">Ctor</span>);<br>  &#125;<br>&#125; <br></code></pre></td></tr></table></figure></li><li><code>createComponentVnode</code>主要目的是,</li></ol><ul><li>组件是对象通过extend转化: 判断<code>vm.$options.components[tag]</code>是对象的要通过<code>vm.constructor.extend(Ctor)</code>转化, 注意⚠️,全局函数直接在Vue.component里面已经判断转化,局部组件才会走到这里进行判断转换.</li><li>tag重命名: 本身tag标签是如 <code>my-component</code>,拼接上前缀<code>vue-component-</code>来标示,后面组件更新时通过标示判断是组件跳过.</li><li>往data中注入<code>hook对象</code>: 回忆下vnode的data是干嘛用的(存储属性用的,如style、属性等),hook对象里面有个<code>init函数</code>,用于执行子组件<code>new Ctor(&#123; &#125;)</code>,上面讲了构造函数里面就是<code>this._init(opts)</code>形成了闭环.同时在vnode上面绑定了实例<code>vnode.componentInstance = vm</code>为了后面创建真实dom节点时候,判断有vm肯定是组件通过构造函数生成的.最后执行<code>vm.$mount()</code>进行挂载$el.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createComponentVnode</span>(<span class="hljs-params">vm, tag, data, children, Ctor</span>) &#123;<br>  <span class="hljs-comment">// 局部组件是对象，调用extend需要转换成构造函数, </span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Ctor</span> === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>    <span class="hljs-title class_">Ctor</span> = vm.<span class="hljs-property">constructor</span>.<span class="hljs-title function_">extend</span>(<span class="hljs-title class_">Ctor</span>);<br>  &#125;  <br>  data.<span class="hljs-property">hook</span> = &#123;<br>    <span class="hljs-title function_">init</span>(<span class="hljs-params">vnode</span>) &#123;<br>      <span class="hljs-comment">// 调用子组件的构造函数，创建子组件实例</span><br>      <span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ctor</span>(&#123; &#125;);<br>      <span class="hljs-comment">// 将子组件实例挂载到vnode上，用于后面创建 dom元素时，判断有没有子组件实例，如果有，说明是组件，直接取出组件实例的$el属性即可</span><br>      vnode.<span class="hljs-property">componentInstance</span> = vm;<br>      <span class="hljs-comment">// 将子组件的dom元素挂载到vnode上</span><br>      vm.$mount();<br>    &#125;,<br>  &#125;;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">vnode</span>(<span class="hljs-string">`vue-component-<span class="hljs-subst">$&#123;tag&#125;</span>`</span>, data, data.<span class="hljs-property">key</span>, <span class="hljs-literal">undefined</span>, <span class="hljs-literal">undefined</span>, &#123;<br>    <span class="hljs-title class_">Ctor</span>,<br>    children,<br>  &#125;);<br>&#125;<br><span class="hljs-comment">// 构造虚拟dom结构</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">vnode</span>(<span class="hljs-params">tag, data, key, children, text, componentOptions</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    tag,<br>    data,<br>    key,<br>    children,<br>    text,<br>    componentOptions,<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure>我们看下vnode的结构<img src="images/4.jpg" width="50%"/></li></ul><ol start="5"><li>接下来是通过vdom生成真实dom结构,先回忆下如何创建vdom的,第一次渲染,走了$mount,挂载到#app下,后面有个_render就是创建vdom的即上面第三、四步.<img src="images/5.jpg" width="80%"/><img src="images/6.jpg" width="80%"/></li></ol><p><code>_render</code><br><img src="images/6-1.jpg" width="80%"/><br><img src="images/6-2.jpg" width="80%"/><br><img src="images/7.jpg" width="80%"/><br>6. 最后走到patch方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">patch</span>(<span class="hljs-params">oldVnode, vnode</span>) &#123;<br>  <span class="hljs-comment">// 组件渲染时，没有oldVnode</span><br>  <span class="hljs-keyword">if</span>(!oldVnode)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">createElm</span>(vnode); <br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oldVnode, vnode, <span class="hljs-string">&quot;patch&quot;</span>);<br>  <span class="hljs-comment">// 1.判断是更新还是第一次渲染，第一次传的是真实的dom节点$el,后面更新传递的是虚拟dom</span><br>  <span class="hljs-keyword">const</span> isRealElement = oldVnode.<span class="hljs-property">nodeType</span>;<br>  <span class="hljs-keyword">if</span> (isRealElement) &#123;<br>    <span class="hljs-comment">// 渲染</span><br>    <span class="hljs-keyword">const</span> oldElm = oldVnode; <span class="hljs-comment">// div id=&quot;app&quot;</span><br>    <span class="hljs-keyword">const</span> parentElm = oldElm.<span class="hljs-property">parentNode</span>; <span class="hljs-comment">// body</span><br>    <span class="hljs-keyword">let</span> el = <span class="hljs-title function_">createElm</span>(vnode); <span class="hljs-comment">// 创建真实dom</span><br>    parentElm.<span class="hljs-title function_">insertBefore</span>(el, oldElm.<span class="hljs-property">nextSibling</span>); <span class="hljs-comment">// 将创建的真实dom插入到老的dom的后面</span><br>    parentElm.<span class="hljs-title function_">removeChild</span>(oldElm); <span class="hljs-comment">// 删除老的dom</span><br>    <span class="hljs-keyword">return</span> el;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 更新</span><br>    <span class="hljs-title function_">patchVnode</span>(oldVnode, vnode);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一次渲染,我们打印oldVnode<br><img src="images/8.jpg" width="80%"/><br>然后走到createElm,通过<code>createComponent(vnode)</code>判断是组件该方法主要执行了取出patch传过来的vdom的data中之前定义的hook.init函数,进行执行<code>vnode.data.hook.init(vnode)</code>,因为执行中我们上面讲了往vdom上绑定了实例表示已经初始化了<code>let vm = new Ctor(&#123; &#125;);vnode.componentInstance = vm;</code>我们判断<code>if (vnode.componentInstance) &#123; return true;&#125;</code>表示是组件,因为已经new实例话渲染过了,所以已经有了$el,所以判断是组件直接返回了<code>vnode.componentInstance.$el</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createElm</span>(<span class="hljs-params">vnode</span>) &#123;<br>  <span class="hljs-keyword">let</span> &#123; tag, children, key, data, text &#125; = vnode;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> tag === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    <span class="hljs-comment">// 1.判断是组件</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">createComponent</span>(vnode)) &#123;<br>      <span class="hljs-comment">// 如果返回true，说明是组件</span><br>      <span class="hljs-keyword">return</span> vnode.<span class="hljs-property">componentInstance</span>.<span class="hljs-property">$el</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 元素</span><br>      vnode.<span class="hljs-property">el</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(tag); <span class="hljs-comment">// 创建元素</span><br>      <span class="hljs-title function_">updateProperties</span>(vnode); <span class="hljs-comment">// 更新属性</span><br>      children.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">child</span>) =&gt;</span> &#123;<br>        vnode.<span class="hljs-property">el</span>.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title function_">createElm</span>(child)); <span class="hljs-comment">// 递归渲染子节点</span><br>      &#125;);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 文本</span><br>    vnode.<span class="hljs-property">el</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(text);<br>  &#125;<br>  <span class="hljs-keyword">return</span> vnode.<span class="hljs-property">el</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createComponent</span>(<span class="hljs-params">vnode, tag, data, children, Ctor</span>) &#123;<br>  <span class="hljs-keyword">let</span> i = vnode.<span class="hljs-property">data</span>;<br>  <span class="hljs-comment">// 相当于 i= i.hook i = i.init</span><br>  <span class="hljs-keyword">if</span> ((i = i.<span class="hljs-property">hook</span>) &amp;&amp; (i = i.<span class="hljs-property">init</span>)) &#123;<br>    <span class="hljs-title function_">i</span>(vnode);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (vnode.<span class="hljs-property">componentInstance</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li>组件的加载顺序是自上而下的，也就是先加载父组件，再递归地加载其所有的子组件。</li><li>组件渲染顺序是按照深度优先遍历的方式，也就是先渲染最深层的子组件，再依次向上渲染其父组件</li><li>全部组件加载成功后(有了dom节点$el),才会执行mounted钩子函数</li><li>子组件更新自己的属性不会影响父组件(即不会触发父组件的updated、beforeUpdate)</li></ul><img src="images/9.jpg" width="80%"/>比如<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">my-component</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>先渲染template,发现<my-component>判断是组件,最后走到patch函数,vue需要有个根结点,如#app,第一次是真实dom节点<code>vm.$mount(vm.$options.el)</code>直接先走到<code>if (isRealElement) &#123;&#125;中</code>,而子组件因为<code>vm.$mount()传的是空</code>,所以代码上面就<code>if(!oldVnode)&#123;     return createElm(vnode);    &#125;</code>return掉,直到生成$el完毕,最后父组件才会mounted完毕</p><img src="images/10.jpg" width="80%"/>]]></content>
      
      
      <categories>
          
          <category> vue2源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基础-6</title>
      <link href="/ypf-blog/2024/01/18/gwy/LFTT/%E5%9F%BA%E7%A1%80-6/"/>
      <url>/ypf-blog/2024/01/18/gwy/LFTT/%E5%9F%BA%E7%A1%80-6/</url>
      
        <content type="html"><![CDATA[<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><img src="/ypf-blog/assets/images/gwy/LFTT/6-1.jpg" width="50%"/><p>案例特点: 对称、纯封闭、2笔画<br>考点: 空间数量、对称、一笔画<br>练习题1: <strong>对称轴数量</strong><br>134一组2条对称轴, 256一组一条对称轴</p><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><img src="/ypf-blog/assets/images/gwy/LFTT/6-2.jpg" width="50%"/><p>案例特点: 对称、纯封闭、1笔画<br>考点: 空间数量、对称、一笔画<br>练习题1: <strong>对称轴角度</strong><br>规律是:对称轴顺时针依次旋转45度,所以排除AC, 在看题目发现对称轴都会过一个点,所以选D</p><h3 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h3><img src="/ypf-blog/assets/images/gwy/LFTT/6-3.jpg" width="50%"/><p>案例特点: 典型2笔画<br>考点: 交点数量、一笔画<br>练习题1: <strong>一笔画</strong><br>规律:分别是1笔画、2笔画、3、4,所以选D</p><h3 id="案例4"><a href="#案例4" class="headerlink" title="案例4"></a>案例4</h3><img src="/ypf-blog/assets/images/gwy/LFTT/6-4.jpg" width="50%"/><p>案例特点: 三角形位置变化()<br>考点: 修正空间数量<br>练习题1: <strong>空间数量</strong><br>规律:空间数分别是2、3、4、5,所以只剩下BD,再观察案例,都是对称的,所以选D</p><h3 id="案例5"><a href="#案例5" class="headerlink" title="案例5"></a>案例5</h3><img src="/ypf-blog/assets/images/gwy/LFTT/6-5.jpg" width="50%"/><p>案例特点: 一笔画、点连接、对称、交点<br>练习题1: <strong>交点数量</strong><br>规律:分别是2、3、4、5、6,所以选B</p><hr><p>练习题1: <strong>点/线连接</strong><br>规律:125是线连接、346是点连接</p><h3 id="案例6"><a href="#案例6" class="headerlink" title="案例6"></a>案例6</h3><img src="/ypf-blog/assets/images/gwy/LFTT/6-6.jpg" width="50%"/><p>案例特点: 内含正方形区域<br>考点:正方形面积、位置<br>练习题1: <strong>正方形位置</strong><br>规律:136正方形都是最小区域,245都是大区域</p><h3 id="案例7"><a href="#案例7" class="headerlink" title="案例7"></a>案例7</h3><img src="/ypf-blog/assets/images/gwy/LFTT/6-7.jpg" width="50%"/><p>案例特点: 两个元素部分重合<br>考点:重合区域形状(相似性、线条数量、曲直定性)<br>练习题1: <strong>重合区域条线数量</strong><br>规律:分别是3456,所以选C</p><hr><p>练习题2: <strong>重合区域条线数量</strong><br>规律:都是5,所以选A</p><hr><p>练习题3: <strong>重合区域条线数量</strong><br>规律:125一组都是4边形,346一组都是5边形</p><h3 id="案例8"><a href="#案例8" class="headerlink" title="案例8"></a>案例8</h3><img src="/ypf-blog/assets/images/gwy/LFTT/6-8.jpg" width="50%"/><p>案例特点: 奔驰标志变形、2笔画、三个空间且形状不规则<br>练习题1: <strong>图形两两都有公共边</strong><br>规律:125一组,346一组</p><hr><p>练习题2: <strong>1笔画</strong><br>规律:都是1笔画,所以选D</p><h3 id="案例9"><a href="#案例9" class="headerlink" title="案例9"></a>案例9</h3><img src="/ypf-blog/assets/images/gwy/LFTT/6-9.jpg" width="50%"/><p>案例特点: 单区域纯封闭图形<br>考点:曲直数量、交点、对称、逻辑运算<br>练习题1: <strong>交点数量</strong><br>规律:分别是34567,所以选B</p><hr><p>练习题2: <strong>逻辑运算(曲线数量与直线数量之差)</strong><br>规律:134都是直线数量-曲线数量=1, 256都是曲线数量-直线数量=1</p><hr><p>练习题3: <strong>交点数量</strong><br>规律:第一组是357,第二组也是35?所以选C</p><hr><p>练习题4: <strong>逻辑运算(对称轴数量-空间数=0)</strong><br>规律:所以选A</p><h3 id="案例10"><a href="#案例10" class="headerlink" title="案例10"></a>案例10</h3><img src="/ypf-blog/assets/images/gwy/LFTT/6-10.jpg" width="50%"/><p>案例特点: 2个空间相连接<br>考点:对接考法、空间形状、对称<br>练习题1: <strong>对称轴特性(2个图形的对称轴位置关系)</strong><br>规律:2个图形的对称轴位置关系分别为平行、相交、垂直、平行、相交、?,所以选D</p><hr><p>练习题2: <strong>对称轴特性(2个图形的对称轴位置关系)</strong><br>规律:2个图形的对称轴位置关系分别为重合、重合、垂直、垂直、重合、垂直</p><hr><p>练习题3: <strong>对接考法(对接边条数)</strong><br>规律:分别是0 1 2 3 4 ?选C</p><hr><p>练习题4: <strong>对称轴特性(2个图形的对称轴位置关系)</strong><br>规律:位置关系是存在平行、相交、存在平行、存在平行、相交、相交,所以134一组,256一组</p><img src="/ypf-blog/assets/images/gwy/LFTT/6-10-1.jpg" width="50%"/><p>练习题5: <strong>对称轴特性(2个图形的对称轴位置关系)</strong><br>规律:分别是平行、相交、垂直; 平行、相交、? 选D</p><hr><p>练习题6: <strong>对称轴特性(2个图形的对称轴位置关系)</strong><br>规律:都是内外对称轴垂直? 选A, B不选是因为不是内外关系</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>两图形相交,要想到相交的图形对称轴的位置关系、对接公共边条数、组成的重合区域线条数、点/线连接等</li><li>内都都含有正方形图形或者同样的图形,要想到该图形的位置,如都在最大区域、最小区域等</li><li>看到图形修正,如三角形有内到外,要想到空间数量</li><li>看到对称图形要想到对称轴位置、一笔画、空间数、</li></ul>]]></content>
      
      
      <categories>
          
          <category> gwy </category>
          
          <category> LFTT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基础-5</title>
      <link href="/ypf-blog/2024/01/15/gwy/LFTT/%E5%9F%BA%E7%A1%80-5/"/>
      <url>/ypf-blog/2024/01/15/gwy/LFTT/%E5%9F%BA%E7%A1%80-5/</url>
      
        <content type="html"><![CDATA[<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><img src="/ypf-blog/assets/images/gwy/LFTT/5-1.jpg" width="50%"/><p>案例特点: 字母九宫格<br>考点: 曲直数量位置、封闭元素数量位置、空间数量<br>练习题1: <strong>曲直数量位置</strong><br>分别是:  第一行第二行,曲的位置是123,所以选D</p><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><img src="/ypf-blog/assets/images/gwy/LFTT/5-2.jpg" width="50%"/><p>案例特点: 📎曲别针、不规则开放图形却出现在第一个<br>考点: 空间数量、一笔画<br>练习题1: <strong>空间数量</strong><br>分别是: 0 1 2 3 ?, 选A </p><hr><p>练习题2: <strong>一笔画</strong><br>分别是: 都是1笔画, 选D </p><hr><p>练习题3: <strong>一笔画</strong><br>分别是: 都是1笔画, 选A</p><h3 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h3><img src="/ypf-blog/assets/images/gwy/LFTT/5-3.jpg" width="50%"/><p>案例特点: 分离色彩,上面放大镜有4部分(包含正方形轮廓)<br>考点: 元素、部分数量、分离/整体<br>练习题1: <strong>分离</strong><br>分别是: 125分离,346整体</p><h3 id="案例4"><a href="#案例4" class="headerlink" title="案例4"></a>案例4</h3><img src="/ypf-blog/assets/images/gwy/LFTT/5-4.jpg" width="50%"/><p>案例特点: 回旋折线<br>考点: 进出口线的位置关系(平行、垂直、方向一致)<br>练习题1: <strong>进出口线位置</strong><br>分别是: 125垂直,346平行</p><h3 id="案例5"><a href="#案例5" class="headerlink" title="案例5"></a>案例5</h3><img src="/ypf-blog/assets/images/gwy/LFTT/5-5.jpg" width="50%"/><p>案例特点: 对称图形<br>考点: 对称轴方向、数量、方式、轴线位置关系<br>练习题1: <strong>对称轴方向-每次旋转45度、轴线位置关系</strong><br>所以只剩下BD,观察发现轴线位置关系分别是重合、不重合进行循环,所以选B</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/5-5-1.jpg" width="50%"/><p>常考的对称轴考点优先级3+3:<br>第一优先级: 对称轴方向、数量、方式<br>第二优先级: 其次是轴线位置关系(重合&gt;垂直)、对称轴点到点,还是过线、对称轴分割2遍都有同样图形</p><p>上图就介绍了第二优先级的类型.</p><h3 id="案例6"><a href="#案例6" class="headerlink" title="案例6"></a>案例6</h3><img src="/ypf-blog/assets/images/gwy/LFTT/5-6.jpg" width="50%"/><p>案例特点: 对称图形+单区域图形<br>考点: 上面介绍的6+6考点<br>练习题1: <strong>对称轴点到点,还是过线</strong><br>所以145一组,236一组</p><hr><p>练习题2: <strong>对称轴点到点,还是过线</strong><br>所以125一组,346一组</p><h3 id="案例7"><a href="#案例7" class="headerlink" title="案例7"></a>案例7</h3><img src="/ypf-blog/assets/images/gwy/LFTT/5-7.jpg" width="50%"/><p>案例特点: 黑白阴影、只看阴影<br>考点:黑白形状面积关系<br>练习题1: <strong>黑白面积(黑面积=白面积)</strong><br>所以126一组,345一组</p><hr><p>练习题2: <strong>黑白面积(黑面积=白面积)</strong><br>所以选B</p><hr><p>练习题3: <strong>黑白面积(黑面积=白面积)</strong><br>所以134一组,256一组</p><hr><p>练习题4: <strong>黑白轮廓数量</strong><br>分别是:65 44 33 , 76 55 ?, 选C</p><h3 id="案例8"><a href="#案例8" class="headerlink" title="案例8"></a>案例8</h3><img src="/ypf-blog/assets/images/gwy/LFTT/5-8.jpg" width="50%"/><p>案例特点:纯直图形<br>考点:曲直定性、曲直线条数量</p><p>练习题1: <strong>曲直定性</strong><br>按行分别是纯直、纯曲、曲直,所以选A</p><hr><p>练习题2: <strong>曲直定性</strong><br>按行分别是纯直、纯曲、曲直,所以选D</p><h3 id="案例9"><a href="#案例9" class="headerlink" title="案例9"></a>案例9</h3><img src="/ypf-blog/assets/images/gwy/LFTT/5-9.jpg" width="50%"/><p>案例特点:单区域轮廓+一个小圆圈<br>考点:标记考法<br>练习题1: <strong>小圆圈在直角/钝角</strong><br>所以125直角一组,346锐角一组</p><hr><p>练习题2: <strong>小圆圈在长边/短边</strong><br>所以136短边一组,245长边一组</p><hr><p>练习题3: <strong>小圆圈在凹角/凸角</strong><br>所以123凹角一组,456凸角一组</p><h3 id="案例10"><a href="#案例10" class="headerlink" title="案例10"></a>案例10</h3><img src="/ypf-blog/assets/images/gwy/LFTT/5-10.jpg" width="50%"/><p>案例特点:类圆曲线+出头色彩<br>考点:曲直交点、曲曲交点 (数的时候一条一条曲线数)、交点数</p><p>练习题1: <strong>曲直交点数量=曲线数量2倍</strong><br>分别是: 42 63 21 42 84, 所以选D</p><hr><p>练习题2: <strong>相切</strong><br>246相切一组,135一组</p><hr><p>练习题3: <strong>相切且与圆有一个交点</strong><br>所以选C</p><h3 id="案例11"><a href="#案例11" class="headerlink" title="案例11"></a>案例11</h3><img src="/ypf-blog/assets/images/gwy/LFTT/5-11.jpg" width="50%"/><p>案例特点:元素相同但位置不同<br>考点:元素位置<br>练习题1: <strong>元素位置</strong><br>分别是: 第一组是圆圈分别在外、内、包含, 第二组三角形同样规律,所以选C </p><h3 id="案例12"><a href="#案例12" class="headerlink" title="案例12"></a>案例12</h3><img src="/ypf-blog/assets/images/gwy/LFTT/5-12.jpg" width="50%"/><p>案例特点:元素上下位置关系呈现<br>考点:上下要素关系<br>练习题1: <strong>上下一笔画作差</strong><br>分别是: 12 12 21 21 ? 选D</p><h3 id="案例13"><a href="#案例13" class="headerlink" title="案例13"></a>案例13</h3><img src="/ypf-blog/assets/images/gwy/LFTT/5-13.jpg" width="50%"/><p>案例特点:数字修正变形<br>考点:直角数量<br>练习题1: <strong>直角数量</strong><br>分别是: 按行看,都是123,所以选D</p><h3 id="案例14"><a href="#案例14" class="headerlink" title="案例14"></a>案例14</h3><img src="/ypf-blog/assets/images/gwy/LFTT/5-14.jpg" width="50%"/><p>案例特点:立体图形<br>考点:面数量<br>练习题1: <strong>面数量</strong><br>都是6面体,所以选A</p><h3 id="案例15"><a href="#案例15" class="headerlink" title="案例15"></a>案例15</h3><img src="/ypf-blog/assets/images/gwy/LFTT/5-15.jpg" width="50%"/><p>案例特点:平面图形+立体图形<br>考点:交点数量<br>练习题1: <strong>交点数量</strong><br>交点数量分别是3 4 5 6 ? 选A</p><h3 id="案例16"><a href="#案例16" class="headerlink" title="案例16"></a>案例16</h3><img src="/ypf-blog/assets/images/gwy/LFTT/5-16.jpg" width="50%"/><p>案例特点:图形相似,元素减少<br>考点:去同存异、去异留同<br>练习题1: <strong>去同存异</strong><br>选D</p><h3 id="案例17"><a href="#案例17" class="headerlink" title="案例17"></a>案例17</h3><img src="/ypf-blog/assets/images/gwy/LFTT/5-17.jpg" width="50%"/><p>案例特点:轮廓相同,阴影数量不一致<br>考点:逻辑加减,如黑白运算<br>练习题1: <strong>黑白运算</strong><br>白+白=白 黑+白=黑, 所以选A</p><hr><p>练习题2: <strong>黑白运算</strong><br>白+白=白 黑+白=黑, 所以选C</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>黑白图形要想到黑白去同存异、黑白分割空间数、黑白分割线一笔画、黑白面积(黑=白面积)、只看黑阴影、黑白轮廓数量等</li><li>看到立体图形+平面图形要想到交点数量,只有立体图形要想到面数量</li><li>看到数字修正变形要想到直角数</li><li>看到上下排版图形,要想到上下逻辑计算(如上下一笔画计算)</li><li>常考的对称轴考点优先级3+3:<br>第一优先级: 对称轴方向、数量、方式<br>第二优先级: 其次是轴线位置关系(重合&gt;垂直)、对称轴点到点,还是过线、对称轴分割2遍都有同样图形</li><li>看到图形有一个小圆圈,要想到小圆圈的位置(钝角/直角、凹/凸、长边/短边), 2个小圆圈要想到圆圈连线位置,如两圆圈连线经过的图形位置、方向、小圆圈相对图形位置(如一个圆内、一个圆外或圆上、一个正方形一个三角形内、一个边上一个顶点上)</li><li>看到回旋折线,要想到进出口位置关系(平行、垂直、方向一致)</li><li>看到曲别针且出现在首位,要想到空间数量递增、一笔画</li><li>看到字母九宫格,要想到曲直</li></ul>]]></content>
      
      
      <categories>
          
          <category> gwy </category>
          
          <category> LFTT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基础-4</title>
      <link href="/ypf-blog/2024/01/03/gwy/LFTT/%E5%9F%BA%E7%A1%80-4/"/>
      <url>/ypf-blog/2024/01/03/gwy/LFTT/%E5%9F%BA%E7%A1%80-4/</url>
      
        <content type="html"><![CDATA[<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-1.jpg" width="50%"/><p>案例特点: 中心对称、九宫格中心位置<br>考点: 对称、数量个数、元素种类变化(有几种元素、颜色)<br>练习题1: <strong>数量个数</strong><br>规律: 对角数量之和是中心5的2倍,所以选B</p><hr><p>练习题2: <strong>数量个数+种类(颜色)变化+</strong><br>规律:<br>第一行: 6 1 7<br>第二行: 7 3 10<br>第三行: ? 9 13<br>所以排除A,再看规律,发现每行,第一列和第二列的颜色到第三列都会反过来,所以选C</p><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-2.jpg" width="50%"/><p>案例特点: 对称、封闭<br>考点:对称、交点、空间、平行</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/4-2-1.jpg" width="50%"/><p>练习题: <strong>对称轴条数</strong><br>规律: 134都是1条对称轴,256都是2条</p><h3 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-3.jpg" width="50%"/><p>案例特点: 四笔画经典图形、内外是一样的图形、对称、纯封闭<br>考点:一笔画、内外交点数量、空间位置、对称<br>练习题: <strong>对称</strong><br>规律: 134都是一条对称轴,256都是多条</p><h3 id="案例4"><a href="#案例4" class="headerlink" title="案例4"></a>案例4</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-4.jpg" width="50%"/><p>案例特点: 都是三角形组成、纯封闭<br>考点:三角形数量、空间数量、外轮廓规则(运算)<br>练习题: <strong>外轮廓规则(运算)</strong><br>规律: 外轮廓数量-空间数量=0,所以选A</p><h3 id="案例5"><a href="#案例5" class="headerlink" title="案例5"></a>案例5</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-5.jpg" width="50%"/><p>案例特点: 纯封闭、对称<br>考点:一笔画、空间数量、空间形状、对称、空间面积<br>练习题: <strong>空间数量</strong><br>规律:  2 3 4  3 4 ? ,所以选A</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/4-5-1.jpg" width="50%"/><p>规律: <strong>空间面积</strong><br>内部存在一个空间面积=其余面积之和</p><h3 id="案例6"><a href="#案例6" class="headerlink" title="案例6"></a>案例6</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-6.jpg" width="50%"/><p>案例特点: 圆轮廓出头很多线条、圆内部无线条<br>考点:延伸线考法(延伸线数量有几条、延伸线每条分为几段、延伸线与图形位置关系)</p><p>这里讲练习题前,我们先看下几种案例:</p><img src="/ypf-blog/assets/images/gwy/LFTT/4-6-0.jpg" width="50%"/><ol><li>延伸线在外面,我们关注点在外面</li><li>延伸线从里到外, 我们关注点在里面</li><li>延伸线全部在里面且连接了轮廓,我们关注点在圆内和圆轮廓上</li><li>延伸线在里面且有部分没连接轮廓,我们关注点在点数量和一笔画</li></ol><p>练习题: <strong>延伸线数量有几条</strong><br>规律:  2 3 4 5 ? 所以选B</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/4-6-1.jpg" width="50%"/><p>规律:  <strong>延伸线与图形位置关系</strong><br>145相切, 236从点延伸</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/4-6-2.jpg" width="50%"/><ol><li>延伸线数量 1 2</li><li>延伸线线段数量 1 2 ,和上面一个是线条、一个是线段</li><li>分别是延伸线从线触发、延伸线从点出发</li><li>延伸线线段数量=图形轮廓数量</li><li>延伸线存在一条线段与图形垂直/平行</li></ol><h3 id="案例7"><a href="#案例7" class="headerlink" title="案例7"></a>案例7</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-7.jpg" width="50%"/><p>案例特点: 延伸线+简单图形<br>考点: 重点在图形,图形轮廓数量, 延伸线就是干扰了<br>练习题:<br>规律: <strong>图形轮廓数量</strong><br>轮廓数分别是: 3 4 5 6 ? 8 所以选B</p><h3 id="案例8"><a href="#案例8" class="headerlink" title="案例8"></a>案例8</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-8.jpg" width="50%"/><p>案例特点: 圆形轮廓、线条贯穿内外、线条基本不封闭<br>考点: 圆内点(交点等)、线、面数量<br>练习题:  <strong>交点数量</strong><br>规律: 交点数量分别是0 1 2 3 4 ? 所以选 C</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/4-8-1.jpg" width="50%"/><p>练习题1:<br>规律: <strong>交点数量</strong><br>第一行都是1,第二行都是2, 所以选C</p><hr><p>练习题2:<br>规律: <strong>面的数量</strong><br>分别是 1 2 3 4 5 ?所以选A</p><h3 id="案例9"><a href="#案例9" class="headerlink" title="案例9"></a>案例9</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-9.jpg" width="50%"/><p>案例特点: 圆形轮廓、纯封闭<br>考点: 轮廓上要素、轮廓内要素<br>练习题:  <strong>轮廓内要素(线条数量)</strong><br>规律: 分别是 1 2 3 4 ? 所以选D</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/4-9-1.jpg" width="50%"/><p>规律: <strong>轮廓上点数</strong><br>轮廓上点数量分别是 0 1 2 ? 4 所以选D</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/4-9-2.jpg" width="50%"/><p>规律: <strong>轮廓上点数</strong>, 所以145一组都是3个, 236一组都是4个</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="黑白点"><a href="#黑白点" class="headerlink" title="黑白点"></a>黑白点</h3><a href="/ypf-blog/2023/12/27/gwy/LFTT/%E5%9F%BA%E7%A1%80-3/" title="上一篇基础-3">上一篇基础-3</a> 黑白点规律总结有一部分,该节新增<ul><li>黑白数量个数变化(第一个+第二个=第三个总数)</li><li>第一个和第二个颜色到第三个颜色反了</li></ul><h3 id="典型四笔画"><a href="#典型四笔画" class="headerlink" title="典型四笔画"></a>典型四笔画</h3><p>看到典型四笔画或者内外都一样图形,要考虑对称、交点数量</p><h3 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h3><ul><li>看到三角形要考虑三角形数量、空间数量、轮廓与空间数量运算、一个空间面积=其余面积之和</li></ul><h3 id="轮廓-延伸线"><a href="#轮廓-延伸线" class="headerlink" title="轮廓+延伸线"></a>轮廓+延伸线</h3><ol><li>轮廓是圆形,考点有延伸线数量、延伸线线段数量、延伸线和轮廓数量、延伸线和轮廓位置关系、延伸线从线/点出发</li><li>轮廓不是圆形,关注点在轮廓,不在延伸线, 此时考察轮廓线条数量</li><li>延伸线贯穿图形内外,优先级考虑轮廓内/轮廓上的点, 点、线、面数量</li></ol><h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><h3 id="案例1-1"><a href="#案例1-1" class="headerlink" title="案例1"></a>案例1</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-10.jpg" width="50%"/><p>案例特点: 实物简笔画<br>考点: 空间数量、线条数量、图形特征(封闭/开放等)<br>练习题1:  <strong>空间数量</strong><br>规律: 分别是 3 4 5 6 ? 所以选C</p><hr><p>练习题2:<br>规律: <strong>图形特征(封闭/开放)</strong><br>156都是封闭, 234都是开放</p><h3 id="案例2-1"><a href="#案例2-1" class="headerlink" title="案例2"></a>案例2</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-11.jpg" width="50%"/><p>案例特点: 外部规则、内部不规则<br>我们总结一下常用规律:</p><ul><li>外部规则看外部</li><li>外部不规则看内部</li><li>内外分离结合看(结合外部、内部综合计算等)</li><li>轮廓相同都要看(都要看指的是全部都看,如轮廓外、内、轮廓上等)</li><li>内外都乱,定性看(此时就不是数数量了,要看图形特征,如外直内曲等)</li></ul><hr><p>练习题1:  <strong>外部规则看外部-外部轮廓数量</strong><br>左边分别是 4 5 6, 右边是1 2 ?, 所以选C</p><hr><p>练习题2: <strong>内外分离结合看-外轮廓数和内部线条数量</strong><br>分别是:65 55 44 44 32 43<br>所以234一组,156一组</p><h3 id="案例3-1"><a href="#案例3-1" class="headerlink" title="案例3"></a>案例3</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-12.jpg" width="50%"/><p>规律: <strong>中心区域图形形状</strong><br>145中心区域为曲线,236为直线</p><h3 id="案例4-1"><a href="#案例4-1" class="headerlink" title="案例4"></a>案例4</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-13.jpg" width="50%"/><p>规律: <strong>轮廓对角线方向</strong><br>146一组,235一组</p><h3 id="案例5-1"><a href="#案例5-1" class="headerlink" title="案例5"></a>案例5</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-14.jpg" width="50%"/><p>规律: <strong>曲直定性</strong><br>124为外直内曲, 356为外曲内直</p><h3 id="案例6-1"><a href="#案例6-1" class="headerlink" title="案例6"></a>案例6</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-15.jpg" width="50%"/>案例特点: 火柴头考点: 看首、尾、拐点的移动位置规律、 如果火柴头没有头,只有线,可能会考经过的格子数量<hr><p>练习题1:  <strong>首、尾、拐点的移动位置</strong><br>头分别<strong>外圈</strong>顺时针移动2格,尾<strong>内圈</strong>逆时针移动一格,拐点为外圈顺时针移动一格,所以选B</p><hr><p>练习题2:  <strong>线经过的格子数量</strong><br>自己数一下即可.</p><h3 id="案例7-1"><a href="#案例7-1" class="headerlink" title="案例7"></a>案例7</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-16.jpg" width="50%"/><p>案例特点:圆、线、有切点<br>考点:曲线与曲线的切点数量和直线与曲线的切点数量<br>练习题1:  <strong>曲线与曲线的切点数量和直线与曲线的切点数量</strong><br>分别为: 21 12 32 12 12 21, 所以</p><h3 id="案例8-1"><a href="#案例8-1" class="headerlink" title="案例8"></a>案例8</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-17.jpg" width="50%"/><p>案例特点: 纯文字<br>考点: 空间数量、部分数量、<strong>横竖线条数量</strong><br>练习题1: <strong>横竖线条数量</strong><br>分别为: 11 22 33 44 55 ?, 所以选A</p><h3 id="案例9-1"><a href="#案例9-1" class="headerlink" title="案例9"></a>案例9</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-18.jpg" width="50%"/><p>案例特点: 字母、文字<br>考点: 部分数量、空间数量、曲直<br>练习题1:<strong>空间数量</strong><br>竖着看,空间数量分别为0 1 2, 所以选C</p><h3 id="案例10"><a href="#案例10" class="headerlink" title="案例10"></a>案例10</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-19.jpg" width="50%"/><p>案例特点: 轮廓下字母<br>考点: 空间、部分数量<br>练习题1:<strong>部分数量</strong><br>部分数量都是2,所以选A</p><h3 id="案例11"><a href="#案例11" class="headerlink" title="案例11"></a>案例11</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-20.jpg" width="50%"/><p>案例特点: 九宫格里面都是纯质、纯曲切出头<br>考点: 元素要素(行或列看)<br>练习题1:<strong>元素要素</strong><br>竖着看:第一列线段数量分别是321,第二列空间数量分别为432,第三列交点数分别为? 4 3,所以选D</p><h3 id="案例12"><a href="#案例12" class="headerlink" title="案例12"></a>案例12</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-21.jpg" width="50%"/><p>案例特点: 田字格轮廓<br>考点:对称性<br>练习题1: <strong>相同图形的对称性</strong><br>146相同对象都为对角、235都是同侧</p><h3 id="案例13"><a href="#案例13" class="headerlink" title="案例13"></a>案例13</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-22.jpg" width="50%"/><p>案例特点: 图形对接变都为2条<br>考点:夹角度数<br>练习题1: <strong>夹角度数</strong><br>126是钝角、345是直角</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/4-22-1.jpg" width="50%"/><p>上图可以看出,除去夹角度数,也可以考 <strong>对接线完全包含/部分包含、对接线是曲直、对接线数量、对接线是最长/最短边</strong></p><h3 id="案例14"><a href="#案例14" class="headerlink" title="案例14"></a>案例14</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-23.jpg" width="50%"/><p>案例特点: 每幅图都有2个小圆圈<br>考点:两圆圈连线经过的图形位置、方向、小圆圈相对图形位置(如一个圆内、一个圆外或圆上、一个正方形一个三角形内、一个边上一个顶点上)<br>练习题1: <strong>两圆圈连线经过的图形位置</strong><br>123都经过最大图形、456都经过最小图形</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/4-23-1.jpg" width="50%"/><h3 id="案例15"><a href="#案例15" class="headerlink" title="案例15"></a>案例15</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-24.jpg" width="50%"/><p>案例特点: 斜线阴影<br>考点: 阴影的方法、阴影与轮廓重合线数量<br>练习题1: <strong>阴影与轮廓重合线数量</strong><br>分别是: 3 3 3 3 ?, 所以选C</p><h3 id="案例16"><a href="#案例16" class="headerlink" title="案例16"></a>案例16</h3><img src="/ypf-blog/assets/images/gwy/LFTT/4-25.jpg" width="50%"/><p>案例特点: 十字坐标轴<br>考点: 坐标轴与图形夹角等<br>练习题1: <strong>坐标轴与图形夹角</strong><br>分别是: 数时针夹角 所以选A</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/4-25-1.jpg" width="50%"/><p>也可以考<strong>上下坐标轴的空间数量</strong>, 如上图分别是上下 12 22;<br>也可以考 <strong>坐标轴交点数量</strong>,如上图分别是3 5</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li>看到实物简笔画(如钟表、齿轮、量杯等),要想到空间数量、线条数量、都是封闭/都是开放图形</li><li>火柴头(或不带头),要想到起头、尾、拐点移动规律(外圈、内圈、象限)、或者经过格子数量</li><li>看到纯文字、字母等,要想到空间、部分、横竖线条数量</li><li>看见曲线、直线,要想到曲线与曲线切点、直线与曲线切点</li><li>均有中心区域,要想到中心区域图形(轮廓、曲直等)</li><li>图形内部均有对角线,要看对角线方向</li><li>看到图像有2个圆圈,要想到2圆圈连线位置,如两圆圈连线经过的图形位置、方向、小圆圈相对图形位置(如一个圆内、一个圆外或圆上、一个正方形一个三角形内、一个边上一个顶点上)</li><li>看到线阴影,要想到阴影与轮廓重合线数量</li><li>看到图形对接,要想到夹角、对接线完全包含/部分包含、对接线是曲直、对接线数量、对接线是最长/最短边</li><li>看到坐标轴,要想到图形与坐标轴的夹角图案、位置、上下坐标轴的空间数量、坐标轴交点数量</li></ul><p><strong>特殊规律: 一般是正方形/圆形轮廓,里面一些复杂图形</strong></p><ul><li>外部规则看外部</li><li>外部不规则看内部</li><li>内外分离结合看(结合外部、内部综合计算等)</li><li>轮廓相同都要看(都要看指的是全部都看,如轮廓外、内、轮廓上等)</li><li>内外都乱,定性看(此时就不是数数量了,要看图形特征,如外直内曲等)</li></ul>]]></content>
      
      
      <categories>
          
          <category> gwy </category>
          
          <category> LFTT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基础-3</title>
      <link href="/ypf-blog/2023/12/27/gwy/LFTT/%E5%9F%BA%E7%A1%80-3/"/>
      <url>/ypf-blog/2023/12/27/gwy/LFTT/%E5%9F%BA%E7%A1%80-3/</url>
      
        <content type="html"><![CDATA[<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><img src="/ypf-blog/assets/images/gwy/LFTT/3-1.jpg" width="50%"/><p>案例特点: 纯封闭, 空间数量都一致<br>考点:空间形状、空间位置、空间数量,(<strong>,此时出题人一般都是让空间数量一致,选项也和题目空间数量一致,让考生往形状、位置想,而不是往数量想</strong>)</p><p>所以测试图的规律是 <strong>空间位置</strong>——最大空间呈中心对称,所以选A</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/3-1-1.jpg" width="50%"/>上图要求排除一个规律不同的.<p>此题考的是 <strong>空间数量</strong>——都是2个三角形 + 一个四边形组成,所以选B</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/3-1-2.jpg" width="50%"/><p>上图规律是 <strong>空间形状</strong>: 246一组(<strong>外轮廓形状和最大面一样</strong>), 135一组(<strong>外轮廓形状和最小面一样</strong>)</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/3-1-3.jpg" width="50%"/><p>上图规律是 <strong>空间形状</strong>: 内部存在2个相似的图形,但ABC都存在,仔细观察题目是<strong>最小与最大面相似</strong>, 所以选C</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/3-1-4.jpg" width="50%"/><p>上图规律是 <strong>空间形状</strong>:内部存在2个相同即<strong>一摸一样</strong>的图形,所以选B, 注意D虽然有2个平行四边形,但是大小不一样,所以不同.</p><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><img src="/ypf-blog/assets/images/gwy/LFTT/3-2.jpg" width="50%"/><p>案例特点: logo阴影类.<br>考点: 部分数量、空间数量、对称<br>测试第二组的规律是:<strong>部分数量</strong>.: 4 7 7 4 4 7 ,注意数的是<strong>分离的部分</strong><br>测试第二组的规律是: 134属于一个<strong>整体</strong>, 256属于<strong>分离</strong>的.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>对于纯封闭,空间数量一致的图,我们要从下面3个角度考虑</li></ol><ul><li>空间位置:对称性、内部最大/最小/存在对称图形</li><li>空间形状: 外轮廓和内部最大/最小一样、 内部存在2个相似/相同的图形</li><li>空间数量: 如都是2个三角形+1个四边形</li></ul><ol start="2"><li>对于logo阴影图形,要从下面3个角度考虑</li></ol><ul><li>部分数量, 如几部分(分离的部分数)</li><li>整体性, 如是一个整体还是分离的</li><li>对称性, 是否是对称图形</li></ul><h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><h3 id="案例1-1"><a href="#案例1-1" class="headerlink" title="案例1"></a>案例1</h3><img src="/ypf-blog/assets/images/gwy/LFTT/3-3.jpg" width="50%"/><p>案例特点: 图形里含有直角三角形<br>考点: 直角数量(考的最多)、直角三角形数量、一笔画, 一般我们看到规则的直角,如 <code>L T +、正方形等</code>都要快速想到直角<br>练习题: <strong>直角数量</strong><br>1 2 1 2 2 1, 所以245一组</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/3-3-1.jpg" width="50%"/>直角数量: 1 2 3 4 5 ?, 所以选B<h3 id="案例2-1"><a href="#案例2-1" class="headerlink" title="案例2"></a>案例2</h3><img src="/ypf-blog/assets/images/gwy/LFTT/3-4.jpg" width="50%"/><p>案例特点:单区域,扇形<br>考点: 扇形的面积(即夹角度数)、曲直数量(扇形是1曲2直)、对称、一笔画<br>练习题: <strong>曲直数量</strong><br>都是1直,曲线是1 2 3 4 ?,所以选D</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/3-4-1.jpg" width="50%"/><p>规律:<strong>扇形的面积(度数)</strong>,分别是0 45 90 135 180 ? 所以选A</p><hr><h3 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h3><img src="/ypf-blog/assets/images/gwy/LFTT/3-5.jpg" width="50%"/><p>案例特点: 图形通过点/线连接、对称、封闭<br>考点:连接方式、空间数量、对称方式、切点/切线数量、一笔画</p><h4 id="点连接和线连接的定义"><a href="#点连接和线连接的定义" class="headerlink" title="点连接和线连接的定义"></a>点连接和线连接的定义</h4><ul><li>点连接: 图形通过线连接起来,线不属于图形的边就是点连接, 如果<strong>属于图形的公共边</strong>(图都有这条线)就是线连接.<br>如果多个图形,有点连接也有线连接, 也属于线连接</li></ul><p>练习题: <strong>空间数量</strong><br>考的是空间数量, 2 4 2 2 4 4,所以134一组</p><h3 id="案例4"><a href="#案例4" class="headerlink" title="案例4"></a>案例4</h3><img src="/ypf-blog/assets/images/gwy/LFTT/3-6.jpg" width="50%"/><p>案例特点: Z字形<br>考点:几组平行线,常见的图案 <code>Z N H I M、梯形、平行四边形、长方形等</code>,要想到考几组平行线(注意: 数几组一般是,2条线数过了,就不算了(不能说这条线和多条线平行就算多组))<br>练习题: <strong>平行线</strong><br>规律:左边都是2组平行线,右边都是3组,所以选A</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/3-6-1.jpg" width="50%"/><p>规律:都是 1 2 3组平线线,所以选C</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul><li>看到图形里含有直角三角形或者规则的直角(L T +、正方形等),要想到考直角数量、直角三角形数量</li><li>看到扇形,要想到考扇形面积(度数)、曲直数量、对称</li><li>看到Z字形或常见的(Z N H I M、梯形、平行四边形、长方形等),要想到考几组平行线</li></ul><h2 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h2><h3 id="案例5"><a href="#案例5" class="headerlink" title="案例5"></a>案例5</h3><img src="/ypf-blog/assets/images/gwy/LFTT/3-7.jpg" width="50%"/><p>案例特点:黑白点,轮廓不规则(啥意思呢,可以对比下面黑白点例子就知道轮廓规不规则了)、黑白的数量不相等<br>考点:黑白分割区域数量即空间数、黑色/白色一笔画<br>练习题: <strong>一笔画</strong><br>126黑色都是2笔画,345黑色都是1笔画</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/3-7-1.jpg" width="50%"/><p>规律: <strong>黑白分割区域数量即空间数</strong><br>两组都是由黑色区域分割为: 3 2 1, 所以选D</p><h3 id="案例6"><a href="#案例6" class="headerlink" title="案例6"></a>案例6</h3><img src="/ypf-blog/assets/images/gwy/LFTT/3-8.jpg" width="50%"/><p>案例特点:黑白点,轮廓规则(<strong>这里就能看出来了,上面一看就不规则,这个就是规则的</strong>)、黑白数量不等<br>考点:黑白分割区域数量即空间数、黑色/白色一笔画、对称(因为规则了)、位置传递</p><p>练习题: <strong>分割区域空间数</strong><br>规律: 1 2 3 4 ?,所以选D</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/3-8-1.jpg" width="50%"/><p>规律: <strong>位置传递</strong><br>1、2图相对比,只有第一行图形变化;<br>2、3图相对比,只有第二行图形变化<br>3、4图相对比,只有第三行图形变化<br>4、5图相对比,只有第四行图形变化<br>所以选C</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/3-8-2.jpg" width="50%"/><p>规律: <strong>对称性</strong><br>1、4、6黑色对称<br>2、3、5白色对称</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/3-8-3.jpg" width="50%"/><p>规律: <strong>空间数+黑白数量是否一致</strong><br>空间数都是2, 所以只有B、D符合,但是黑色都是3个,所以选D</p><h3 id="案例6-1"><a href="#案例6-1" class="headerlink" title="案例6"></a>案例6</h3><img src="/ypf-blog/assets/images/gwy/LFTT/3-9.jpg" width="50%"/><p>案例特点: 阴影数量一致(上图都是2黑点)、轮廓一致(都是n*n)<br>考点:元素位置考法, 一般我们按行、列、对角线去找黑点数量不变<br>练习题: <strong>元素位置</strong><br>规律: 第四列每次移动一个,对角线也是每次移动一个, 所以选A</p><h3 id="案例7"><a href="#案例7" class="headerlink" title="案例7"></a>案例7</h3><img src="/ypf-blog/assets/images/gwy/LFTT/3-10.jpg" width="50%"/><p>案例特点: 轮廓一致、黑白点、相连接<br>考点: 点连接、线连接、黑白点数<br>练习题: <strong>点连接+黑白点数量</strong><br>规律: 都是点连接,所以CD符合,但是黑块数量是5,所以选C</p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><ul><li>看见黑白点,且轮廓不规则、黑白数量不一致, 要考虑一笔画、黑白空间数</li><li>看见黑白点,且轮廓规则、黑白数量不一致, 要考虑一笔画、黑白空间数、黑白对称、位置传递(如两两对比,可能依次第一行、第二行、第三行变化了)</li><li>看见黑白点,且轮廓规则、黑白数量一致, 要考虑元素位置(如行、列、对角线移动)</li><li>看见黑白点,如果有明显的点连接, 要考虑点连接+选项黑白数量是否和题目一致</li><li>看见黑白点,要考虑黑白数量个数变化,如第一个+第二个=第三个总数</li><li>看见黑白点,要考虑黑白颜色变化,如第一个和第二个颜色到第三个颜色反了</li></ul><h3 id="回顾之前黑白规律"><a href="#回顾之前黑白规律" class="headerlink" title="回顾之前黑白规律"></a>回顾之前黑白规律</h3><ul><li>黑白logo图,要考虑部分数量(几部分)、 是否分离(分离和一个整体)、对称</li></ul>]]></content>
      
      
      <categories>
          
          <category> gwy </category>
          
          <category> LFTT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基础-2</title>
      <link href="/ypf-blog/2023/12/26/gwy/LFTT/%E5%9F%BA%E7%A1%80-2/"/>
      <url>/ypf-blog/2023/12/26/gwy/LFTT/%E5%9F%BA%E7%A1%80-2/</url>
      
        <content type="html"><![CDATA[<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><img src="/ypf-blog/assets/images/gwy/LFTT/2-1.jpg" width="50%"/><p>上图特点<strong>田字格</strong>,可以考 <strong>一笔画(2),对称、空间数量(4)</strong><br>所以例子:<br>对称:很明显第五个不是<br>笔画数:都是1,选项笔画数 2 2 2 1,所以选D</p><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><img src="/ypf-blog/assets/images/gwy/LFTT/2-2.jpg" width="50%"/><p>上图特点,1笔画、纯封闭、对称,相当于奥迪最后一个圈,少了一半,但还是1笔画.</p><h3 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h3><img src="/ypf-blog/assets/images/gwy/LFTT/2-3.jpg" width="50%"/>上图都是线条,最先想到是<p><strong>交点数量、一笔画、曲直定性</strong></p><p>例子,都是1笔画,选项笔画数是2 1 2,所以选中间那个<br>注意,第2个图:去除圆,去除五角星,就剩一个箭头,所以是1笔画.</p><h3 id="案例4"><a href="#案例4" class="headerlink" title="案例4"></a>案例4</h3><img src="/ypf-blog/assets/images/gwy/LFTT/2-4.jpg" width="50%"/><ul><li>案例:1笔画,3条线,6交点,7空间</li><li>左下角:1笔画,3条线,6交点,4空间<br>例子:笔画数:1 1 2 2 1 ?<br>  交点数:2 3 4 5 6<br>所以,选项交点数为 18 8 7 8,选C</li></ul><p><strong>注意,笔画数一般不会考计算,如1+1=2 或者 11 22 11这种数列</strong></p><h3 id="案例5"><a href="#案例5" class="headerlink" title="案例5"></a>案例5</h3><img src="/ypf-blog/assets/images/gwy/LFTT/2-5.jpg" width="50%"/><p>案例规律: <strong>两个相同的元素组成,十分容易出现三角形,所以此时要注意三角形数量</strong><br>所以测试题目:<br>三角形数量: 1 2 3 4 5 ?, 所以选B,三角形数量为6</p><h3 id="案例6"><a href="#案例6" class="headerlink" title="案例6"></a>案例6</h3><img src="/ypf-blog/assets/images/gwy/LFTT/2-6.jpg" width="50%"/><p>这里图形的主要特点 <strong>纯封闭、复杂程度不单调</strong>.啥叫复杂程度不单调,目前我仍不太理解,只是解析说图形由 <code>简单-&gt;复杂-&gt;简单或者复杂-&gt;简单-&gt;复杂</code>.<br>比如案例,第一个很简单,第二个就复杂了,第三个又简单了.<br><strong>此时考点一般是内外元素关联考法</strong>,比如外轮廓线数量-内部空间数量=固定值.<br>所以下方测试题目:<br>规律都为 <strong>外轮廓线数量-内空间数=2</strong>,所以选C</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/2-6-1.jpg" width="50%"/><p>上图规律也是 <strong>外轮廓线数量-内部空间数量=固定值0</strong>,所以选C</p><hr><img src="/ypf-blog/assets/images/gwy/LFTT/2-6-2.jpg" width="50%"/><p>上图规律是 <strong>外轮廓线数量-内部最大空间轮廓数量=固定值0</strong>,注意上面是自己画的图,第三个的平行四边形是连着的,没画好.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>看到<strong>田字格</strong>优先考虑一笔画、对称、空间数</li><li>看到<strong>奔驰、奥迪</strong>以及这两种的<strong>变形</strong>,比如奥迪少了个圈,奔驰变成Y等,优先考虑一笔画</li><li>看到<strong>线条、出头</strong>,优先考虑交点数、1笔画、空间数</li><li>看到<strong>相同图形交错</strong>,考虑三角数</li><li>看到<strong>纯封闭,图形简单复杂变化</strong>,考虑 <strong>关联考法</strong><ul><li>外轮廓线条数-内部空间数</li><li>外轮廓线条数-内部最大/最小空间轮廓数量等</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> gwy </category>
          
          <category> LFTT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基础-1</title>
      <link href="/ypf-blog/2023/12/25/gwy/LFTT/%E5%9F%BA%E7%A1%80-1/"/>
      <url>/ypf-blog/2023/12/25/gwy/LFTT/%E5%9F%BA%E7%A1%80-1/</url>
      
        <content type="html"><![CDATA[<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h3><img src="/ypf-blog/assets/images/gwy/LFTT/1-1.jpg" width="50%"/><p>上图可以看出的角度:</p><ul><li>空间数量:<strong>3个</strong>, 圆把正方形分割成了3个空间</li><li>中心对称</li><li>一笔画</li><li>相切(切点数),2个</li></ul><h4 id="什么一笔画"><a href="#什么一笔画" class="headerlink" title="什么一笔画?"></a>什么一笔画?</h4><p>何为笔画数? 即将封闭图形去掉,剩下的笔画数量,即为几笔画(如果剩下0,也为1笔画).<strong>注意,为同一个空间,如果2个没有交集的图形,分开数</strong>.<br>所以上图,去除长方形、圆形,没有了,所以为1笔画.</p><p>所以,上图下方关联图形,笔画数量为: <strong>1 1 1</strong></p><h4 id="中心对称、轴对称"><a href="#中心对称、轴对称" class="headerlink" title="中心对称、轴对称?"></a>中心对称、轴对称?</h4><p>中心对称: 把一个图形<strong>绕某一点</strong>旋转180度后能与另一个图形重合，这两个图形成中心对称.<br>轴对称: 一个图形<strong>沿一条直线</strong>折叠,如果重合,则，这两个图形成中心对称.</p><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><img src="/ypf-blog/assets/images/gwy/LFTT/1-2.jpg" width="50%"/><p>分析上面图形:</p><ul><li>笔画数: 1 1 2 1 ? 1</li><li>空间数: 2 3 4 2 ? 4</li></ul><p>所以选B<br><img src="/ypf-blog/assets/images/gwy/LFTT/1-2-1.jpg" width="50%"/><br>上图笔画数都是1,<br>切点数: 1 1 2 1 2 2,所以 3,5,6一组.</p><h3 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h3><img src="/ypf-blog/assets/images/gwy/LFTT/1-3.jpg" width="50%"/><p>分析上面图形:<br>笔画数: 2 1 2 1 2 ?<br>但是看下图笔画数是1的有A B D,所以我们还有一个规律 <strong>曲直定性-纯直、曲直、纯曲</strong>,所以选A</p><h3 id="案例4"><a href="#案例4" class="headerlink" title="案例4"></a>案例4</h3><img src="/ypf-blog/assets/images/gwy/LFTT/1-4.jpg" width="50%"/>笔画数:1 1 1 1 1 ?看选项笔画数: 2 2 1 2, 所以选C<h3 id="案例5"><a href="#案例5" class="headerlink" title="案例5"></a>案例5</h3><img src="/ypf-blog/assets/images/gwy/LFTT/1-5.jpg" width="50%"/>需要记住的是,上图笔画数:2面数:3交点数:7线条数:9<p>如果考内外结构, 上图 <strong>内部3条线,外部6条线,类似拍扁奔驰的标志</strong></p><h3 id="案例6"><a href="#案例6" class="headerlink" title="案例6"></a>案例6</h3><img src="/ypf-blog/assets/images/gwy/LFTT/1-6.jpg" width="50%"/><p>上图案例, 我们可以看到2个特点(<strong>出头、轮廓对称</strong>),可能的考点:</p><ul><li>一笔画</li><li>交点数量</li><li>轮廓对称轴与线的位置</li></ul><p>所以上面第一道列子:<br>笔画数: 全部都是1<br>分组: 3、4、6为一组,都存在对称轴与线垂直</p><h3 id="案例7"><a href="#案例7" class="headerlink" title="案例7"></a>案例7</h3><img src="/ypf-blog/assets/images/gwy/LFTT/1-7.jpg" width="50%"/><p>上图事例特点:<strong>可以看做奥迪图标</strong><br>笔画数都是1,所以选B</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>看到<strong>封闭图形、出头、对称图形</strong>要想到<strong>1笔画、切点数量、轮廓和线的对称性, 以及曲直定性-纯直、纯曲、曲直</strong></li><li>看到题目或选项有<strong>标志图形</strong>,如奥迪（一笔画）、奔驰（2笔画）、田字格（2笔画），要想到考1笔画。</li></ol>]]></content>
      
      
      <categories>
          
          <category> gwy </category>
          
          <category> LFTT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>进程与线程</title>
      <link href="/ypf-blog/2023/12/25/%E6%B5%8F%E8%A7%88%E5%99%A8/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
      <url>/ypf-blog/2023/12/25/%E6%B5%8F%E8%A7%88%E5%99%A8/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h2><p>查阅百度定义。</p><ul><li><p>进程：是系统对程序进行资源分配和调度的基本单位，是操作系统结构的基础。</p></li><li><p>线程：程序执行流的最小单元。</p></li></ul><p>What?什么意思，我不理解。那么直接看例子。平常我们在使用电脑过程中，假如我想登录微信，那么我双击微信图标登录即可。从表面上看，桌面打开了微信界面。实际上，系统也相应的开启了一个进程（一个程序可能会有多个进程，比如qq主进程，qq辅助进程等）。系统会给进程分配相应的cpu资源以及内存资源来保证进程运行。</p><p>我们来打开任务管理器，我事先已经打开了谷歌浏览器，可以看到，任务管理器中也会有浏览器相对应的进程，以及该进程的cpu占用率、内存占用资源。</p><img src="images/task.png"/><h2 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h2><p>现在应该理解进程是什么意思了吧，那么线程又是什么鬼？</p><p>实际我们一个程序对应一个进程（这里直接按对应一个来举例），进程也可以细分即线程。比如我通过微信正在聊天，我想看看朋友圈，相应的微信进程会分配朋友圈线程来执行（当然系统的微信进程不会直接分配线程，其内部也有自己的各个主进程来分配协调线程，分配内存等，如分配朋友圈线程）。即进程是种类，线程是种类下的具体列表。进程管理着线程。</p><blockquote><p>即公司（系统）- 各个部门（系统任务管理器的微信进程）-部门领导（微信进程中负责协调线程的主进程）-员工（线程）</p></blockquote><p>所以，应该更容易理解了：进程是cpu资源分配的最小单位（系统会给它分配内存）<br>最后，再用较为官方的术语描述一遍：</p><ul><li>进程是cpu资源分配的最小单位（是能拥有资源和独立运行的最小单位）</li><li>线程是cpu调度的最小单位（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）</li></ul><p>理解了进程和线程，我们来看<a href="/ypf-blog/2023/12/25/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E7%A8%8B/" title="下一篇-浏览器进程">下一篇-浏览器进程</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>零宽字符</title>
      <link href="/ypf-blog/2023/12/25/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%BB%83/%E9%9B%B6%E5%AE%BD%E5%AD%97%E7%AC%A6/"/>
      <url>/ypf-blog/2023/12/25/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%BB%83/%E9%9B%B6%E5%AE%BD%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是零宽字符"><a href="#什么是零宽字符" class="headerlink" title="什么是零宽字符"></a>什么是零宽字符</h2><blockquote><p>零宽字符是Unicode字符集中一类特殊的字符，叫 ZWJ（zero width joiner），也叫非打印字符、不可见字符。</p></blockquote><p>那什么是Unicode字符集，还有我们常听说的ASCII字符集具体是什么，这个后面会单独开一篇文章解释<a href="#">Post not found: javascript/字符集 下一篇-字符集</a>。</p><h2 id="零宽字符的特点"><a href="#零宽字符的特点" class="headerlink" title="零宽字符的特点"></a>零宽字符的特点</h2><ul><li>对于计算机来说，它依然会占用空间，在 Unicode 字符集中拥有独立的编码，你在 Word 键入这一字符它仍会被计入字数统计，同样在代码中打印这类字符的长度可以看到也是会占用长度的。</li><li>零宽字符的宽度为 0，对于肉眼而言不可见，在我们常用的一些软件中并不会显示，比如浏览器、word等。</li></ul><h2 id="常见的零宽字符"><a href="#常见的零宽字符" class="headerlink" title="常见的零宽字符"></a>常见的零宽字符</h2><table><thead><tr>  <th width="120">标题</th>  <th>Unicode</th>  <th>HTML转译字符</th>  <th>HTML转译字符（因为不会显示，所以去除最前面的&号）</th>  <th>HTML预览控制台看到的代码（因为不会显示，所以去除最前面的&号）</th></tr></thead><tbody>  <tr>    <td>零宽空格符</td>    <td>U+200B</td>    <td>&#8203;</td>    <td>#8203;</td>    <td>ZeroWidthSpace;</td>  </tr>  <tr>    <td>零宽非断开空格符</td>    <td>U+FEFF</td>    <td>暂没查到</td>    <td>暂没查到</td>    <td>ZeroWidthSpace;</td>  </tr>  <tr>    <td>零宽不连字符</td>    <td>U+200C</td>    <td>&#8204;</td>    <td>#8204;</td>    <td>zwnj;</td>  </tr>  <tr>    <td>零宽连字符</td>    <td>U+200D</td>    <td>&#8205;</td>    <td>#8205;</td>    <td>zwj;</td>  </tr>  <tr>    <td>左至右符号</td>    <td>U+200E</td>    <td>&#x200E; 或 &#8206;</td>    <td>#x200E; 或 #8206;</td>    <td>lrm; 或 lrm;</td>  </tr>  <tr>    <td>右至左符号</td>    <td> U+200F</td>    <td>&#x200F; 或 &#8207;</td>    <td>#x200F; 或 #8207;</td>    <td>rlm; 或 rlm;</td>  </tr>  <!-- <tr>    <td>字节顺序标记</td>    <td>U+FEFF</td>    <td>无</td>    <td>无</td>  </tr> --></tbody></table><p>具体解释下：</p><ul><li>零宽空格符：用于单词的换行分隔</li><li>零宽空格非断符：用于阻止特定位置的换行分隔</li><li>零宽不连字符：放在两个字符之间，抑制本来会发生的连字</li><li>零宽连字符：使两个本不会发生连字的字符产生了连字效果</li><li>左至右符号：用于计算机的双向文稿排版中。</li><li>右至左符号：用于计算机的双向文稿排版中。</li></ul><h2 id="如何输入零宽字符"><a href="#如何输入零宽字符" class="headerlink" title="如何输入零宽字符"></a>如何输入零宽字符</h2><p>html中需要使用HTML转译字符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-symbol">&amp;#8203;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js中需要使用Unicode码并做下处理(将上面表格的Unicode码<code>增加 \ 并去除+号</code>),大小写无所谓都可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;\u200b&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><h3 id="选中分隔"><a href="#选中分隔" class="headerlink" title="选中分隔"></a>选中分隔</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1234<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>html中有个1234，用户双击，会选中某个整个1234，假如用户想双击12和34呢，我们可以改成即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-symbol">&amp;#8203;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="加解密"><a href="#加解密" class="headerlink" title="加解密"></a>加解密</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 加密： str -&gt; 零宽字符</span><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">strToZeroWidth</span>(<span class="hljs-params">str</span>) &#123;<br>   <span class="hljs-keyword">return</span> str<br>     .<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>)<br>     .<span class="hljs-title function_">map</span>(<br>       <span class="hljs-function">(<span class="hljs-params">char</span>) =&gt;</span><br>         char<br>           .<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>) <span class="hljs-comment">// 每个字符转换为对应的 Unicode编码  [27979, 35797]</span><br>           .<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// 把数值转换为2进制(除了二进制，我们也可以使用更大的进制来缩短加密后的信息长度，以此提升效率) [&#x27;110110101001011&#x27;, &#x27;1000101111010101&#x27;]</span><br>     )<br>     .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>       <span class="hljs-keyword">return</span> (<br>         item<br>           .<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>)<br>           .<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> (item === <span class="hljs-string">&quot;1&quot;</span> ? <span class="hljs-string">&quot;\u200d&quot;</span> : <span class="hljs-string">&quot;\u200c&quot;</span>))<br>           <span class="hljs-comment">// 这里按照1-零宽度连字符\u200d 0-零宽度不连字符\u200c  空格-零宽空格\u200b ,也可以随便自定义顺序</span><br>           <span class="hljs-comment">// [</span><br>           <span class="hljs-comment">//   [&quot;​&quot;,&quot;​&quot;,&quot;‌&quot;,&quot;​&quot;,&quot;​&quot;,&quot;‌&quot;,&quot;​&quot;,&quot;‌&quot;,&quot;​&quot;,&quot;‌&quot;,&quot;‌&quot;,&quot;​&quot;,&quot;‌&quot;,&quot;​&quot;,&quot;​&quot;],</span><br>           <span class="hljs-comment">//   [&quot;​&quot;,&quot;‌&quot;,&quot;‌&quot;,&quot;‌&quot;,&quot;​&quot;,&quot;‌&quot;,&quot;​&quot;,&quot;​&quot;,&quot;​&quot;,&quot;​&quot;,&quot;‌&quot;,&quot;​&quot;,&quot;‌&quot;,&quot;​&quot;,&quot;‌&quot;,&quot;​&quot;]</span><br>           <span class="hljs-comment">// ]</span><br>           .<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;\u200b&quot;</span>)<br>       ); <span class="hljs-comment">// 数组转换为字符传，并用零宽空格连接</span><br>     &#125;).<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;\u200b&quot;</span>) <span class="hljs-comment">// 数组转换为字符传，并用零宽空格连接</span><br> &#125;<br><br></code></pre></td></tr></table></figure><p>解密按照加密的规则进行解密</p>]]></content>
      
      
      <categories>
          
          <category> 每日一练 </category>
          
          <category> 待完善 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器进程</title>
      <link href="/ypf-blog/2023/12/25/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E7%A8%8B/"/>
      <url>/ypf-blog/2023/12/25/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器有哪些进程"><a href="#浏览器有哪些进程" class="headerlink" title="浏览器有哪些进程"></a>浏览器有哪些进程</h2><p>通过<a href="/ypf-blog/2023/12/25/%E6%B5%8F%E8%A7%88%E5%99%A8/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/" title="上一篇-进程与线程">上一篇-进程与线程</a>我们了解了操作系统通过进程控制着程序的运行,程序也有自己的主进程控制线程。那么浏览器有哪些进程？</p><blockquote><p><b class="red">1.浏览器进程（Browser进程):</b>浏览器的主进程，只有一个，（负责协调、主控）</p></blockquote><ul><li>负责浏览器界面显示，与用户交互。如前进，后退等</li><li>负责各个页面的管理，创建和销毁其他进程</li><li>将渲染（Renderer）进程得到的内存中的Bitmap（位图），绘制到用户界面上</li><li>网络资源的管理，下载等，现在已经独立出来为网络进程</li></ul><blockquote><p><b class="red">2.第三方插件进程：</b>每种类型的插件对应一个进程，仅当使用该插件时才创建<br><b class="red">3.GPU进程：</b>最多一个，用于3D绘制等<br><b class="red">4.渲染进程（Renderer进程，内部是多线程的）（即通常所说的浏览器内核）：</b>主要作用为页面渲染，脚本执行，事件处理等，我们在浏览器打开一个个tab页，就相当于创建了一个个独立的渲染进程<br><b class="red">5.网络进程：</b>负责页面中发起和接受网络请求，以前是作为模块运行在浏览器进程一时在面的，后面才独立出来，成为一个单独的进程</p></blockquote><p><strong>注意：在这里浏览器应该也有自己的优化机制，有时候打开多个tab页后，可以在Chrome任务管理器中看到，有些进程被合并了，譬如打开多个空白标签页后，会发现多个空白标签页被合并成了一个渲染进程。（所以每一个Tab标签对应一个渲染进程并不一定是绝对的）</strong></p><p>类似windows的任务管理器，我们可以打开谷歌的进程管理器。</p><img src="images/browser-task.png"/><p>在上图中我们可以看到有个浏览器进程、GPU进程等非tab页面进程，但是对于我们前端才做来说，我们需要真正关系的是-渲染进程（浏览器内核），因为页面渲染，js执行，事件处理都是在这里面进行的。</p><h2 id="浏览器渲染进程（内核）"><a href="#浏览器渲染进程（内核）" class="headerlink" title="浏览器渲染进程（内核）"></a>浏览器渲染进程（内核）</h2><p>上一节我们讲过进程和线程，所以渲染进程由线程组成。下图列出了组成：</p><img src="images/线程.webp"/><p>接下来我们着重讲解浏览器内核的各个线程；</p><h3 id="GUI渲染线程"><a href="#GUI渲染线程" class="headerlink" title="GUI渲染线程"></a>GUI渲染线程</h3><ul><li>负责渲染浏览器界面，解析HTML，CSS，构建DOM树和Render树，布局和绘制等。</li><li>当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行</li><li>注意，GUI渲染线程与JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。</li></ul><p>下面我们详细讲解下一个html页面如何通过渲染进程显示出来的。</p><h4 id="构建dom树"><a href="#构建dom树" class="headerlink" title="构建dom树"></a>构建dom树</h4><p>通过 <code>html解析器</code>解析html转换成dom树。在控制台可以尝试打印document，这就是解析出来的DOM树。<br><img src="images/dom.webp"/></p><h4 id="样式计算"><a href="#样式计算" class="headerlink" title="样式计算"></a>样式计算</h4><p>解析css代码，解析出样式表（CSS Object Model），给每一个节点计算出最终的样式值。在控制台打印document.styleSheets，这就是解析出的样式表。<br><img src="images/css.jpg" width="50%"/><br>因为涉及到CSS的继承和层叠规则，我们可以看到上图中，有个parentStyleSheet，表示此节点的父级样式。</p><p>注意：DOM树 和 CSSOM编译都是以 Bytes → characters → tokens → nodes → object model. 这样的方式生成最终的数据。</p><img src="images/token.png"/><h4 id="DOM-和-CSSOM-合并后生成-Render树"><a href="#DOM-和-CSSOM-合并后生成-Render树" class="headerlink" title="DOM 和 CSSOM 合并后生成 Render树"></a>DOM 和 CSSOM 合并后生成 Render树</h4><p>合并成render树后，有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系。下一步操作称之为Layout</p><h4 id="布局定位Layout"><a href="#布局定位Layout" class="headerlink" title="布局定位Layout"></a>布局定位Layout</h4><p>顾名思义就是计算出每个节点在屏幕中的位置，然后进行平面合成。具体流程如下：<br>创建布局树：遍历 DOM 树中的所有可见节点，并把这些节点加到布局树中；而不可见的节点会被忽略掉，如 head 标签下面的全部内容，再比如包含 dispaly:none的元素也没有被包进布局树,而 visibility: hidden 则会（所以，如果某个节点最开始是不显示的，设为 display:none 是更优的）。然后进行布局计算，通过已经加载的js和css，计算每个dom元素在页面上的位置。</p><h4 id="绘制（Painting）"><a href="#绘制（Painting）" class="headerlink" title="绘制（Painting）"></a>绘制（Painting）</h4><p>Layout后，浏览器已经知道了哪些节点要显示（which nodes are visible）、每个节点的CSS属性是什么（their computed styles）、每个节点在屏幕中的位置是哪里（geometry）。就进入了最后一步：Painting，按照算出来的规则，通过显卡，把内容画到屏幕上。具体如下步骤：</p><h5 id="图层分层"><a href="#图层分层" class="headerlink" title="图层分层"></a>图层分层</h5><p>页面中有很多复杂的效果，3D变换，页面滚动，定位元素，z-index,文字内容超过容器就会产生剪裁或者出现滚动条等，都会提升为单独图层。</p><p>举个🌰，</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">overflow</span>: auto;<br>&#125;<br>&lt;<span class="hljs-selector-tag">p</span>&gt;<span class="hljs-number">2s</span>dsdfdsfsdfdsfdsffdsfsdfsf&lt;/<span class="hljs-selector-tag">p</span>&gt;<br></code></pre></td></tr></table></figure><p>打开开发者工具，选择Layers，就可以看到页面的分层元素了.控制台可以360度拖动自由变换</p><img src="images/layer.gif"/><h5 id="图层绘制"><a href="#图层绘制" class="headerlink" title="图层绘制"></a>图层绘制</h5><p>对上面生成的每个图层进行绘制。 首先会把图层拆解成一个一个的绘制指令，按照指令顺序生成绘制列表，在上文提到的开发者工具的Layers面板中，双击图层，detail中的profiler可以看到绘制列表（绘制列表是用来记录绘制顺序和绘制指令的）。用过canvas的就可以看出来，和canvas绘制指令比较像。</p><img src="images/profiler.jpg"/><h5 id="栅格化（光栅化）"><a href="#栅格化（光栅化）" class="headerlink" title="栅格化（光栅化）"></a>栅格化（光栅化）</h5><p>至此，<strong>渲染进程的主线程</strong>已经完成了它所有任务，绘制操作是由<strong>渲染进程的合成线程</strong>来完成的。当绘制列表完成，主线程会把绘制列表提交到合成线程，合成线程按照绘制列表将图层分为图块。然后交给GPU进程，gpu进程会开启多个线程将图块快速转换成位图。并且优先处理视口（viewport，用户可以看到的区域）的图块，最后将生成的位图保存到GPU内存中。这就叫栅格化。 所以<strong>栅格化就是将图块生成位图，图块是栅格化的最小单位，</strong>。</p><h5 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h5><p>图块被栅格化后完成后，合成线程会拿到每个层、每个图块的位图，从而生成一个个「指引（quad）」信息。指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。变形发生在合成线程，与渲染主线程无关，这就是 transform 效率高的本质原因。之后，合成线程会将指令-DrawQuad并提交给浏览器主进程。浏览器主进程接收到DrawQuad指令，通知GPU进程然后将位图绘制到内存中，最后由显卡将图像信息传给屏幕。<br>一般，每个显示器都有固定的刷新频率，通常是 60HZ，也就是每秒更新 60 张图片，所以<strong>通常情况下</strong>，显卡的更新频率和显示器的刷新频率是一致的，正常显示器是60帧/s（或者60FPS）。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>现在我们总结下：</p><ol><li>html经过html编译器<strong>解析成dom树</strong></li><li>解析css，<strong>生成CSSOM</strong>（CSS Object Model）</li><li>dom树和cssOM合<strong>并成render树</strong></li><li><strong>布局</strong>，遍历dom树的可见节点，以及根据css和js计算节点位置</li><li><strong>绘制</strong>，通过显卡，把内容画到屏幕上。绘制步骤如下：<ol><li>对于定位、裁剪的元素进行<strong>分（图）层</strong></li><li><strong>绘制图层</strong>（图层拆分为绘制指令，按照指令顺序生成绘制列表交给合成线程）</li><li><strong>栅格化图层</strong>（由合成线程按照绘制列表将图层分为图块，交给gpu进程优先按照视口区域将图块转化成位图即栅格化）</li><li><strong>显示</strong>（合成线程把位图生成quad指引指令交给浏览器主进程，主进程通知gpu进程将位图绘制到位图中，最后由显卡将信息传给屏幕渲染出来）</li></ol></li></ol><h4 id="宏观角度剖析"><a href="#宏观角度剖析" class="headerlink" title="宏观角度剖析"></a>宏观角度剖析</h4><p>上面我们梳理了浏览器如何渲染的，下面我们换个角度。</p><p><strong>浏览器准备解析html时候，主进程先通过预加载扫描器扫描整个文档中的静态资源（link、script、图片，CSS ,JS，字体等资源），然后通知网络进程去请求这些资源，同时通知渲染进程开始渲染。在渲染过程中，如果已有静态资源请求结束就会立刻执行，所以就带来了阻塞性问题。</strong></p><h4 id="问题1-css阻塞，js阻塞？"><a href="#问题1-css阻塞，js阻塞？" class="headerlink" title="问题1-css阻塞，js阻塞？"></a>问题1-css阻塞，js阻塞？</h4><p>我们在以前开发过程中，经常听到，把css代码放头部，js代码放底部。那么到底为啥呢？在这之前，我们先了解document的两个事件，有助于后面的分析。</p><h5 id="DOMContentLoaded-和-load事件"><a href="#DOMContentLoaded-和-load事件" class="headerlink" title="DOMContentLoaded 和 load事件"></a>DOMContentLoaded 和 load事件</h5><ul><li>DOMContentLoaded事件:DOM树已经构建完毕就会触发DOMContentLoaded事件，而无需等待样式表、图像完成加载，此时可以获取到dom节点；</li><li>load事件：load仅用于检测一个页面是否完全加载，当页面的html、css、js、图片等资源都已经加载完之后才会触发 load 事件。</li></ul><h5 id="css阻塞性"><a href="#css阻塞性" class="headerlink" title="css阻塞性"></a>css阻塞性</h5><p>先说结论，<code>css不会阻塞DOM解析，但会阻塞DOM渲染</code></p><p><code>css不会阻塞DOM解析，但会阻塞DOM渲染，js影响dom解析和渲染</code></p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/481622194">https://zhuanlan.zhihu.com/p/481622194</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>手写代码-call、apply、bind</title>
      <link href="/ypf-blog/2023/12/25/%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81/%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81-call%E3%80%81apply%E3%80%81bind/"/>
      <url>/ypf-blog/2023/12/25/%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81/%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81-call%E3%80%81apply%E3%80%81bind/</url>
      
        <content type="html"><![CDATA[<a href="/ypf-blog/2023/05/26/javascript/%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%E6%A5%9A-call%E3%80%81apply%E3%80%81bind/" title="傻傻分不清楚-call、apply、bind">傻傻分不清楚-call、apply、bind</a><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fn1=<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-variable language_">this</span>===<span class="hljs-variable language_">window</span>,a,b) <span class="hljs-comment">// window true 1 2</span><br>&#125;<br><span class="hljs-keyword">const</span> fn2=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br><span class="hljs-title function_">fn1</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><blockquote><p><strong>目的: 让fn1中的this===fn2</strong></p></blockquote><h3 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( fn1.<span class="hljs-title function_">call</span>(fn2,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>) )<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( fn1.<span class="hljs-title function_">apply</span>(fn2,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]) )<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( fn1.<span class="hljs-title function_">bind</span>(fn2,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)() )<br></code></pre></td></tr></table></figure><p>所以,这个三个函数目的就是 <code>被执行函数中的this === 传递过来的第一个参数</code> ,即改变了this的指向</p><h2 id="手写代码"><a href="#手写代码" class="headerlink" title="手写代码"></a>手写代码</h2><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">call1</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">context,...args</span>)&#123;<br>  context=context||<span class="hljs-variable language_">window</span><br>  context.<span class="hljs-property">fn</span>=<span class="hljs-variable language_">this</span><br>  <span class="hljs-keyword">const</span> result=context.<span class="hljs-title function_">fn</span>(...args)<br>  <span class="hljs-keyword">delete</span> context.<span class="hljs-property">fn</span><br>  <span class="hljs-keyword">return</span> result <span class="hljs-comment">// 函数有可能有返回值,返回出来</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">call1</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">context,args=[]</span>)&#123;<br>  context=context||<span class="hljs-variable language_">window</span><br>  context.<span class="hljs-property">fn</span>=<span class="hljs-variable language_">this</span><br>  <span class="hljs-keyword">const</span> result=context.<span class="hljs-title function_">fn</span>(...args)<br>  <span class="hljs-keyword">delete</span> context.<span class="hljs-property">fn</span><br>  <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">bind1</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">context,...args</span>)&#123;<br>  context=context||<span class="hljs-variable language_">window</span><br>  context.<span class="hljs-property">fn</span>=<span class="hljs-variable language_">this</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> context.<span class="hljs-title function_">fn</span>(...args)<br>  &#125;<br>  <span class="hljs-comment">//  无法执行删除了</span><br>  <span class="hljs-keyword">delete</span> context.<span class="hljs-property">fn</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面因为要return函数,无法删除了,多了冗余代码.</p><p>现在我们复盘下上面三个手写函数, 有没有发现什么不足?</p><h2 id="改善点"><a href="#改善点" class="headerlink" title="改善点"></a>改善点</h2><h3 id="context-context-window"><a href="#context-context-window" class="headerlink" title="context=context || window ?"></a>context=context || window ?</h3><p>我们通过<code>context=context || window</code>判断传递过来的this指向, 假如我们这样使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fn1=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-comment">// Number&#123;0&#125; 基本类型包装对象,相当于 new Number(0)</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">0</span>)) <span class="hljs-comment">// Number&#123;0&#125;</span><br>&#125;<br>fn1.<span class="hljs-title function_">call</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><img src="images/number.jpg" width="50%"/><ul><li>context不传，或者传null，undefined， 函数中的this指向window对象</li><li>context为原始值（数字，字符串，布尔值），函数中this指向该原始值的自动包装对象（如 String、Number、Boolean）</li><li>context为一个对象，函数中的this指向这个对象</li><li>context为一个函数名，函数中的this指向该函数</li><li>前四点是默认在非严格模式下，如果在严格模式下，会略有不同。</li></ul><p>所以我们上面判断,传0 ,false 都是使this指向window, 我们需要改下 <code>context=</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (context === <span class="hljs-literal">null</span> || context === <span class="hljs-literal">undefined</span>) &#123;<br>    context = <span class="hljs-variable language_">window</span> <span class="hljs-comment">// 指定为 null 和 undefined 的 this 值会自动指向全局对象(浏览器中为window)</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    context = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(context) <span class="hljs-comment">// 值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的实例对象,new可以省略</span><br>&#125;<br></code></pre></td></tr></table></figure><p>不知道啥意思的,可以看看 <a href="#">Post not found: javascript/傻傻分不清楚-Object()、{}、new Object()、Object.create() 傻傻分不清楚-Object()、{}、new Object()、Object.create()</a></p><h3 id="context-fn"><a href="#context-fn" class="headerlink" title="context.fn?"></a>context.fn?</h3><p>我们在代码里创建了一个临时函数fn并赋值this, 那假如context本来就存在一个名字为fn的属性呢,这样就会被覆盖掉了,所以我们使用<code>Symbol</code>进行改写.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">call1</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context, ...args</span>) &#123;<br>  <span class="hljs-keyword">if</span> (context === <span class="hljs-literal">null</span> || context === <span class="hljs-literal">undefined</span>) &#123;<br>    context = <span class="hljs-variable language_">window</span> <span class="hljs-comment">// 指定为 null 和 undefined 的 this 值会自动指向全局对象(浏览器中为window)</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    context = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(context) <span class="hljs-comment">// 值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的实例对象,new可以省略</span><br>  &#125;<br>  <span class="hljs-keyword">const</span> fn=<span class="hljs-title class_">Symbol</span>()<br>  context[fn] = <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-keyword">const</span> result=context[fn](...args);<br>  <span class="hljs-keyword">delete</span> context[fn];<br>  <span class="hljs-keyword">return</span> result<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="bind-1"><a href="#bind-1" class="headerlink" title="bind"></a>bind</h3><p>上面bind我们发现没发删除fn了,那我们不用fn不就行了,我们改写下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">bind1</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">context,...args</span>)&#123;<br>  <span class="hljs-keyword">if</span>(context===<span class="hljs-literal">null</span> || context===<span class="hljs-literal">undefined</span>)&#123;<br>    context=<span class="hljs-variable language_">window</span><br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    context=<span class="hljs-title class_">Object</span>(context)<br>  &#125;<br>  <span class="hljs-keyword">const</span> that=<span class="hljs-variable language_">this</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>===<span class="hljs-variable language_">window</span>) <span class="hljs-comment">// true, 或者用箭头函数,就不需要用that存了</span><br>    <span class="hljs-keyword">return</span> that.<span class="hljs-title function_">apply</span>(context,args) <span class="hljs-comment">// 必须return,因为函数可能有返回值</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><a href="https://juejin.cn/post/6844903906279964686#heading-17">https://juejin.cn/post/6844903906279964686#heading-17</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 手写代码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2.数据劫持-对象</title>
      <link href="/ypf-blog/2023/12/25/vue2%E6%BA%90%E7%A0%81/2.%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81-%E5%AF%B9%E8%B1%A1/"/>
      <url>/ypf-blog/2023/12/25/vue2%E6%BA%90%E7%A0%81/2.%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81-%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<a href="#">Post not found: vue2源码/1.rollup搭建环境.md 上一篇-vue2源码/1.rollup搭建环境.md</a><h2 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/index<br><span class="hljs-keyword">import</span> &#123; initMixin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./init&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Vue</span>(<span class="hljs-params">options</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_init</span>(options); <span class="hljs-comment">// 初始化参数</span><br>&#125;<br><span class="hljs-title function_">initMixin</span>(<span class="hljs-title class_">Vue</span>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Vue</span>;<br></code></pre></td></tr></table></figure><p>那么上面的<code>_init</code>从哪里来? 我们新建<code>init.js</code>,可以看到我们给vue的原型上绑定了该方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">src/init<br><span class="hljs-keyword">import</span> &#123; initState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./state&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">initMixin</span>(<span class="hljs-params">Vue</span>) &#123;<br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_init</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-keyword">const</span> vm = <span class="hljs-variable language_">this</span>;<br>    vm.<span class="hljs-property">$options</span>=options <span class="hljs-comment">// 将options挂载到实例上</span><br>    <span class="hljs-title function_">initState</span>(vm); <span class="hljs-comment">// 初始化数据</span><br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们新建<code>state.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; observe &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./observer/index&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">initState</span>(<span class="hljs-params">vm</span>) &#123;<br>  <span class="hljs-keyword">const</span> opts = vm.<span class="hljs-property">$options</span>;<br>  <span class="hljs-keyword">if</span> (opts.<span class="hljs-property">props</span>) &#123;<br>    <span class="hljs-title function_">initProps</span>(vm);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (opts.<span class="hljs-property">methods</span>) &#123;<br>    <span class="hljs-title function_">initMethods</span>(vm);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (opts.<span class="hljs-property">data</span>) &#123;<br>    <span class="hljs-title function_">initData</span>(vm);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (opts.<span class="hljs-property">computed</span>) &#123;<br>    <span class="hljs-title function_">initComputed</span>(vm);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (opts.<span class="hljs-property">watch</span>) &#123;<br>    <span class="hljs-title function_">initWatch</span>(vm);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">initData</span>(<span class="hljs-params">vm</span>) &#123;<br>  <span class="hljs-keyword">let</span> data = vm.<span class="hljs-property">$options</span>.<span class="hljs-property">data</span>;<br>  <span class="hljs-comment">//   需要call, 否则 data()&#123; &#125;中的this为window</span><br>  data = vm.<span class="hljs-property">_data</span> = <span class="hljs-keyword">typeof</span> data === <span class="hljs-string">&quot;function&quot;</span> ? data.<span class="hljs-title function_">call</span>(vm) : data;<br>  <span class="hljs-comment">//   数据劫持</span><br>  <span class="hljs-title function_">observe</span>(data);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据劫持"><a href="#数据劫持" class="headerlink" title="数据劫持"></a>数据劫持</h2><p>我们新建<code>observer/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js">observer/index.<span class="hljs-property">js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">observe</span>(<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-comment">// 注意， typeof null 也是object, Object.keys(null)会报错, 不能遍历，所以需要判断直接返回</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> data !== <span class="hljs-string">&quot;object&quot;</span> || data === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> data;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(data);<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">walk</span>(value);<br>  &#125;<br>  <span class="hljs-title function_">walk</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(data).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">defineReactive</span>(data, key, data[key]);<br>    &#125;);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">defineReactive</span>(<span class="hljs-params">obj, key, value</span>) &#123;<br>  <span class="hljs-title function_">observe</span>(value); <span class="hljs-comment">// 对象如果又嵌套对象</span><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, key, &#123;<br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;获取值&quot;</span>);<br>      <span class="hljs-keyword">return</span> value;<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">newValue</span>) &#123;<br>      <span class="hljs-keyword">if</span> (value === newValue) &#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;更新值&quot;</span>);<br>      <span class="hljs-title function_">observe</span>(newValue); <span class="hljs-comment">// 更改属性值为新对象,默认不会劫持,所以需要重新劫持</span><br>      value = newValue;<br>    &#125;,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>目录结构<br><img src="images/dir.jpg" width="50%"/></p><p>我们修改index.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> aa= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>   <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>   <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;        <br>     <span class="hljs-keyword">return</span> &#123;<br>       <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>       <span class="hljs-attr">b</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>       <span class="hljs-attr">c</span>: &#123;<br>         <span class="hljs-attr">key</span>: <span class="hljs-number">1</span>,<br>         <span class="hljs-attr">d</span>:&#123;<br>           <span class="hljs-attr">key</span>:<span class="hljs-number">1</span><br>         &#125;<br>       &#125;,<br>     &#125;;<br>   &#125;,<br> &#125;);<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(aa,aa.<span class="hljs-property">_data</span>);<br> aa.<span class="hljs-property">_data</span>.<span class="hljs-property">a</span>=&#123;<br>   <span class="hljs-attr">c</span>:<span class="hljs-number">2</span><br> &#125;<br><br></code></pre></td></tr></table></figure><img src="images/object.jpg" width="50%"/><p>我们可以发现, 对象都被绑定上get、set函数,修改或者获取对象属性,都会出发get、set方法.至此我们完成了<strong>对象的劫持</strong></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h3 id="更改属性要重新劫持"><a href="#更改属性要重新劫持" class="headerlink" title="更改属性要重新劫持"></a>更改属性要重新劫持</h3><h3 id="data为什么用函数return对象-而不是直接用对象"><a href="#data为什么用函数return对象-而不是直接用对象" class="headerlink" title="data为什么用函数return对象,而不是直接用对象?"></a>data为什么用函数return对象,而不是直接用对象?</h3><ul><li>如果 data 属性是一个简单的对象，那么所有的组件实例都将共享同一个对象，对象属于引用类型，会影响到所有的实例。如果使用函数,每复用一次组件就会返回新的data，类似于给每个组件实例创建一个私有的数据空间，保护各自的数据互不影响。</li><li>如果不考虑组件,那data直接用对象也没问题</li><li>上面源码我们也可以看到,我们还在<code>vm._data</code>绑定了data, 都是指向同一内存地址</li></ul>]]></content>
      
      
      <categories>
          
          <category> vue2源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端安全-CSRF攻击</title>
      <link href="/ypf-blog/2023/12/25/javascript/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8-CSRF%E6%94%BB%E5%87%BB/"/>
      <url>/ypf-blog/2023/12/25/javascript/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8-CSRF%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<a href="/ypf-blog/2023/12/25/javascript/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8-XSS%E6%94%BB%E5%87%BB/" title="上一篇-前端安全-XSS攻击">上一篇-前端安全-XSS攻击</a><h2 id="csrf攻击定义"><a href="#csrf攻击定义" class="headerlink" title="csrf攻击定义"></a>csrf攻击定义</h2><blockquote><p>csrf 全称跨站请求伪造（Cross-site request forgery），指的是攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送请求(利用受害者在被攻击网站已经获取的注册凭证(存放在cookie中))，达到冒充用户对被攻击的网站执行某项操作的目的。</p></blockquote><p>一个典型的CSRF攻击有着如下的流程：</p><ul><li>用户登陆<code>a.com</code>,此时cookie中该域名下有登陆token</li><li>攻击者诱导用户进入<code>b.com</code></li><li>在<code>b.com</code>中,含有自动请求<code>a.com</code>的代码,如 <code>&lt;img src=&quot;http://a.com?a=1&quot;&gt;</code></li><li>我们知道浏览器发送请求会在header自动带上请求域名的cookie</li><li>这样就在b.com完成了a.com的攻击</li></ul><p>关键点:</p><ol><li>登陆信息存在token中</li><li>如何诱导用户进入攻击网站</li><li>浏览器发送请求会在header自动带上请求域名的cookie</li><li>在攻击网站发送受害者网站的请求</li></ol><h2 id="几种常见的攻击类型"><a href="#几种常见的攻击类型" class="headerlink" title="几种常见的攻击类型"></a>几种常见的攻击类型</h2><p>举个例子,用户登陆银行网站进行提取操作, 此时正常触发 <code>http://bank.example/withdraw?amount=10000</code></p><h3 id="GET类型的CSRF"><a href="#GET类型的CSRF" class="headerlink" title="GET类型的CSRF"></a>GET类型的CSRF</h3><p>GET类型的CSRF利用非常简单，只需要一个HTTP请求，一般会这样利用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://bank.example/withdraw?amount=10000&amp;for=hacker&quot;</span> &gt;</span><br></code></pre></td></tr></table></figure><p>在受害者访问含有这个img的攻击页面后，浏览器会自动向<a href="http://bank.example/withdraw?account=xiaoming&amp;amount=10000&amp;for=hacker%E5%8F%91%E5%87%BA%E4%B8%80%E6%AC%A1HTTP%E8%AF%B7%E6%B1%82%E3%80%82bank.example%E5%B0%B1%E4%BC%9A%E6%94%B6%E5%88%B0%E5%8C%85%E5%90%AB%E5%8F%97%E5%AE%B3%E8%80%85%E7%99%BB%E5%BD%95%E4%BF%A1%E6%81%AF%E7%9A%84%E4%B8%80%E6%AC%A1%E8%AF%B7%E6%B1%82%E3%80%82">http://bank.example/withdraw?account=xiaoming&amp;amount=10000&amp;for=hacker发出一次HTTP请求。bank.example就会收到包含受害者登录信息的一次请求。</a></p><h3 id="POST类型的CSRF"><a href="#POST类型的CSRF" class="headerlink" title="POST类型的CSRF"></a>POST类型的CSRF</h3><p>这种类型的CSRF利用起来通常使用的是一个自动提交的表单，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://bank.example/withdraw&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">POST</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;xiaoming&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;amount&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10000&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;for&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hacker&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"> <span class="hljs-variable language_">document</span>.<span class="hljs-property">forms</span>[<span class="hljs-number">0</span>].<span class="hljs-title function_">submit</span>(); </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>用户访问攻击页面后，表单会自动提交，相当于模拟用户完成了一次POST操作。</p><h3 id="链接类型的CSRF"><a href="#链接类型的CSRF" class="headerlink" title="链接类型的CSRF"></a>链接类型的CSRF</h3><p>链接类型的CSRF并不常见，比起其他两种用户打开页面就中招的情况，这种需要用户点击链接才会触发。这种类型通常是在论坛中发布的图片中嵌入恶意链接，或者以广告的形式诱导用户中招，攻击者通常会以比较夸张的词语诱骗用户点击，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://bank.example/withdraw?amount=1000&amp;for=hacker&quot;</span> <span class="hljs-attr">taget</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span><br> 重磅消息！！<br> <span class="hljs-tag">&lt;<span class="hljs-name">a</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="如何防护"><a href="#如何防护" class="headerlink" title="如何防护"></a>如何防护</h2><p>上面我们知道,csrf是在攻击者网站发起攻击,那么我们禁止在外域（或者不受信任的域名）中对我们发起请求,不就可以吗?</p><h3 id="GET接口只用于查询，不要用于任何写入操作"><a href="#GET接口只用于查询，不要用于任何写入操作" class="headerlink" title="GET接口只用于查询，不要用于任何写入操作"></a>GET接口只用于查询，不要用于任何写入操作</h3><p>上面我们讲了通过img标签进行攻击,这是 GET 型 CSRF 攻击的要害，千万不要在 GET 请求中做修改数据库、更新状态等类似操作，只要 GET 请求仅用于查询，即可有效防御此类攻击。</p><h3 id="同源检测"><a href="#同源检测" class="headerlink" title="同源检测"></a>同源检测</h3><p>那么问题来了,我们如何判断请求是否来自外域呢？</p><ul><li>Origin Header</li><li>Referer Header<br>在HTTP协议中，每一个请求都会携带两个Header，用于标记来源域名,这两个Header在浏览器发起请求时，大多数情况会自动带上，并且不能由前端自定义内容。 服务器可以通过解析这两个Header中的域名，确定请求的来源域。从而阻止不受信任的域名.具体这两个的区别,可以看这篇文章<a href="">origin 、referer</a></li></ul><p>当Origin和Referer头文件不存在时该怎么办？</p><h3 id="CSRF-Token-JWT认证"><a href="#CSRF-Token-JWT认证" class="headerlink" title="CSRF Token(JWT认证)"></a>CSRF Token(JWT认证)</h3><p>前面讲到用户信息是存放在cookie中随浏览器请求发出的,那么我们可以要求所有的用户在请求时候,都携带一个的Token单独放到请求参数里面,并在服务器端验证该 token，则能够防御 CSRF 攻击,例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">GET</span> <span class="hljs-attr">http</span>:<span class="hljs-comment">//bank.example/withdraw?amount=1000&amp;csrfToken=xxx</span><br><span class="hljs-variable constant_">POST</span> <span class="hljs-attr">http</span>:<span class="hljs-comment">//bank.example/withdraw</span><br>     将 token 放在 <span class="hljs-title class_">Authorization</span> 头部传递给后端做验证。<br></code></pre></td></tr></table></figure><p>用户登录后，服务端生成 token 并放在 session 中，后面该用户的每个请求都从 session 拿出这个 token，与请求中的 csrfToken 进行比对，若不一致则拒绝请求。<br>Token是一个比较有效的CSRF防护方法，只要页面没有XSS漏洞泄露Token，那么接口的CSRF攻击就无法成功。</p><h3 id="cookie的SameSite属性"><a href="#cookie的SameSite属性" class="headerlink" title="cookie的SameSite属性"></a>cookie的SameSite属性</h3><p><a href="">cookie的SameSite属性</a></p><h2 id="记录下小知识点"><a href="#记录下小知识点" class="headerlink" title="记录下小知识点"></a>记录下小知识点</h2><ol><li>form的action和src、href一样不受同源限制的影响,可跨域</li><li>我们在跨域请求时,浏览器会提示CORS跨域错误,实际上后台已经接收到请求并响应,只不过浏览器拦截掉罢了</li></ol><hr><blockquote><p><a href="https://juejin.cn/post/6844903689702866952">前端安全系列之二：如何防止CSRF攻击？</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端安全-XSS攻击</title>
      <link href="/ypf-blog/2023/12/25/javascript/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8-XSS%E6%94%BB%E5%87%BB/"/>
      <url>/ypf-blog/2023/12/25/javascript/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8-XSS%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="XSS攻击是什么"><a href="#XSS攻击是什么" class="headerlink" title="XSS攻击是什么?"></a>XSS攻击是什么?</h2><h3 id="XSS定义"><a href="#XSS定义" class="headerlink" title="XSS定义"></a>XSS定义</h3><blockquote><p>XSS攻击,中文名叫跨站脚本(Cross Site Script)攻击,缩写应该是 CSS，但是为了和 CSS(Cascading Style Sheet)层叠样式有所区别，所在在安全领域叫做 “XSS”。</p></blockquote><h3 id="XSS分类"><a href="#XSS分类" class="headerlink" title="XSS分类"></a>XSS分类</h3><ul><li>反射型XSS（Reflected XSS）</li><li>存储型XSS（Stored XSS）</li><li>DOM-based XSS</li></ul><p>下面我们来一一介绍</p><h2 id="反射型XSS（Reflected-XSS）"><a href="#反射型XSS（Reflected-XSS）" class="headerlink" title="反射型XSS（Reflected XSS）"></a>反射型XSS（Reflected XSS）</h2><p>顾名思义，反射型 XSS，只是将用户输入的数据“反射”给浏览器。其是一种非持久型xss攻击，依赖于<strong>服务器</strong>对恶意请求的反射,仅对当次的页面访问产生影响<br>常见于通过 URL 传递参数的功能，如网站搜索、跳转等场景。</p><p>攻击步骤如下:</p><ol><li>攻击者构造含有script脚本的恶意链接,诱导用户点击</li><li>用户点击后,服务端取出url上的恶意代码,直接返回前端(前端通过innerHTML直接插入代码),或者以前的jsp模式,后端直接拼接html返回渲染,就会触发反射型XSS</li></ol><p>举个🌰:<br>比如访问链接:<code>https://test.com/index.html?q=&lt;script&gt;alert(1)&lt;/script&gt;</code>,页面里面含有从服务端取出content字段,并且<code>document.getElementById(&quot;seachKeyWords&quot;).innerHTML = content</code>,用来展示当前搜索的内容的逻辑,这样就会触发<strong>反射</strong>.</p><h2 id="存储型-XSS（Stored-XSS）"><a href="#存储型-XSS（Stored-XSS）" class="headerlink" title="存储型 XSS（Stored XSS）"></a>存储型 XSS（Stored XSS）</h2><p>顾名思义，存储型 XSS，就是攻击者的数据已经存储在服务端，比如用户在文本框中输入评论，然后提交保存到后台。然后其他用户浏览评论，导致触发存储型 XSS。其是一种持久型xss,攻击时效将伴随着攻击数据一直存在。<br>常见于带有用户保存数据的网站功能，比如论坛发帖、商品评价、用户私信等场景。</p><p>攻击步骤如下:</p><ol><li>攻击者将恶意代码作为参数提交到目标网站的数据库中</li><li>用户访问页面,页面渲染接口返回的数据触发xss,如果多用户可以访问,都会触发</li></ol><p>举个🌰:<br>比如用户评论某篇文章, 评论内容是<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>,提交到后台,前端通过innerHTML直接渲染到评论区,那么所有用户访问该评论区,都会alert,所以存储型 XSS一旦被发现,影响巨大</p><h2 id="DOM-based-XSS"><a href="#DOM-based-XSS" class="headerlink" title="DOM-based XSS"></a>DOM-based XSS</h2><p>从效果上看,DOM-based XSS其实也属于反射型XSS,但是其区别是, 反射型的xss脚本来自于服务端(如前端提交到后台,后台处理后返回), dom型的xss脚本来自于前端,和服务端没关系,dom型属于前端自身的漏洞,和后端没关系.<br>常见于从URL参数、cookie、LocalStorage中取内容的场景。</p><p>攻击步骤如下:</p><ol><li>前端 JavaScript 取出 URL中的恶意代码</li><li>innerHTML插入代码导致渲染触发xss</li></ol><p>举个🌰:<br>比如访问链接:<code>https://test.com/index.html?q=&lt;script&gt;alert(1)&lt;/script&gt;</code>,页面里面含有直接从url上取出content字段,并且<code>document.getElementById(&quot;seachKeyWords&quot;).innerHTML = content</code>,用来展示当前搜索的内容的逻辑,这样就会触发 DOM-based XSS</p><h2 id="如何触发、危害"><a href="#如何触发、危害" class="headerlink" title="如何触发、危害?"></a>如何触发、危害?</h2><h3 id="如何触发"><a href="#如何触发" class="headerlink" title="如何触发"></a>如何触发</h3><ol><li>反射型和dom型,难点在于构造恶意链接如何让用户去点击,所以常见的方式是通过邮箱、短信等发送给用户,诱导用户点击</li><li>存储型依靠代码漏洞,通过提交恶意数据到数据库来触发</li></ol><h3 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h3><ol><li>窃取用户信息进行违法行为</li><li>引流(嵌入重定向脚本)</li></ol><h2 id="常见XSS代码方式"><a href="#常见XSS代码方式" class="headerlink" title="常见XSS代码方式?"></a>常见XSS代码方式?</h2><!-- <div style="background-url:(javascript:alert(1))" aa="<script>alert(1)</script>">22</div> --><!-- <div style="background:url(javascript:alert(1))">1</div> --><!-- <div class="javascript:alert(1)">1</div> --><!-- <div class="<script>alert(1)</script>">2</div> --><!-- <div class=""><script>alert(1)</script>">2</div> --><!-- <img src="javascript:alert(&lt;p&gt;hello&lt;/p&gt;)"> --><!-- text-size: "expression(alert('XSS'))";  --><!-- <img onclick="alert(1)" onerror="alert('&lt;p&gt;hello&lt;/p&gt;')" src="error.png"> --><!-- <img oNcLiCk="alert(1)" onerror="alert(2)" src="error.png"> --><!-- <script>new Function("alert(1)")</script> --><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"> html<br>// 内联事件监听器中包含恶意代码<br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">oNcLiCk</span>=<span class="hljs-string">&quot;alert(1)&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;alert(2)&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;error.png&quot;</span>&gt;</span><br>// 恶意代码经过htmlEncode编码后 https://tool.chinaz.com/tools/htmlencode.aspx<br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(1)&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">&quot;alert(&#x27;<span class="hljs-symbol">&amp;lt;</span>p<span class="hljs-symbol">&amp;gt;</span>hello<span class="hljs-symbol">&amp;lt;</span>/p<span class="hljs-symbol">&amp;gt;</span>&#x27;)&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;error.png&quot;</span>&gt;</span><br>// 链接内包含恶意代码 <br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>// 大小写、空格/回车/tab等<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;JAvaScript:    alert(1)&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>// 带有脚本代码的svg图片,通过embed标签加载<br><span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://svg.digi.ninja/xss.svg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>// background:url标签/style标签里面使用background:url(谷歌内置拦截器会拦截)<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background:url(javascript:alert(1))&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>// 在属性中增加闭合标签<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&lt;ScRipt&gt;alert(1)&lt;/script&gt;&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>我们在<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">前面增加 &quot;&gt; 代码就变成</span></span><br><span class="language-xml"><span class="language-handlebars"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&quot;&gt;2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>js<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// setTimeout() 中调用恶意代码</span></span><br><span class="language-javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-string">&quot;alert(1)&quot;</span>)</span><br><span class="language-javascript"><span class="hljs-comment">// setInterval() 中调用恶意代码</span></span><br><span class="language-javascript"><span class="hljs-built_in">setInterval</span>(<span class="hljs-string">&quot;console.log(2)&quot;</span>,<span class="hljs-number">1000</span>)</span><br><span class="language-javascript"><span class="hljs-comment">// location 调用恶意代码</span></span><br><span class="language-javascript">location.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;javascript:alert(1)&#x27;</span></span><br><span class="language-javascript"><span class="hljs-comment">// open 调用恶意代码</span></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;javascript:alert(1)&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-comment">// eval() 中调用恶意代码</span></span><br><span class="language-javascript"><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;alert(1)&quot;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>谷歌内置拦截器会拦截background:url标签<br><img src="images/background.jpg" width="50%" height="50%"/></p><p>总结下:</p><ol><li>避免html内联事件绕过:如 onclick、onerror、onload、onmouseover 等,在 JavaScript 中通过 .addEventlistener() 事件绑定会更安全</li><li>在插入html属性要做过滤处理</li><li>a标签的href、img的src、background的url</li><li>svg图片含有js代码</li><li>JavaScript 的 eval()、setTimeout()、setInterval()、location.href、windowopen 等都能把字符串作为代码运行 </li></ol><p><strong>注意:</strong> 谨慎使用.innerHTML、.outerHTML、document.write() ，不要把不可信的数据作为 HTML 插到页面上。如果使用的模版,比如ejs,尽量使用 &lt;%= data %&gt; 而不是 &lt;%- data %&gt;； 如果使用框架(vue),尽量使用<code>&#123;&#123;&#125;&#125;</code>,少使用v-html ;</p><h2 id="如何防御"><a href="#如何防御" class="headerlink" title="如何防御?"></a>如何防御?</h2><p>上面我们讲了常见的xss代码攻击方式,那么我们如何防御呢?<br><strong>1.转义字符</strong><br>对于用户的输入应该是永远不信任的，最普遍的做法就是转义输入输出的内容，对于括号，尖括号，斜杠进行转义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">escape</span>(<span class="hljs-params">str</span>) &#123;<br>  str = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&amp;/g</span>, <span class="hljs-string">&#x27;&amp;amp;&#x27;</span>)<br>  str = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&lt;/g</span>, <span class="hljs-string">&#x27;&amp;lt;&#x27;</span>)<br>  str = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&gt;/g</span>, <span class="hljs-string">&#x27;&amp;gt;&#x27;</span>)<br>  str = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&quot;/g</span>, <span class="hljs-string">&#x27;&amp;quto;&#x27;</span>)<br>  str = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&#x27;/g</span>, <span class="hljs-string">&#x27;&amp;#39;&#x27;</span>)<br>  str = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/`/g</span>, <span class="hljs-string">&#x27;&amp;#96;&#x27;</span>)<br>  str = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\//g</span>, <span class="hljs-string">&#x27;&amp;#x2F;&#x27;</span>)<br>  <span class="hljs-keyword">return</span> str<br>&#125;<br><span class="hljs-comment">// -&gt; &amp;lt;script&amp;gt;alert(1)&amp;lt;&amp;#x2F;script&amp;gt;</span><br><span class="hljs-built_in">escape</span>(<span class="hljs-string">&#x27;&lt;script&gt;alert(1)&lt;/script&gt;&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>实际上,我们需要根据具体场景使用不同的转义规则<br>常用的前端插件有 <a href="https://jsxss.com/zh/index.html">xss.js</a>，<a href="https://github.com/cure53/DOMPurify">DOMPurify</a></p><p><strong>2.设置Cookie httpOnly</strong><br>禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法document.cookie获取cookie</p><p><strong>3.输入内容长度、类型的控制</strong><br>对于不受信任的输入，都应该限定一个合理的长度，并且对输入内容的合法性进行校验（例如输入email的文本框只允许输入格式正确的email，输入手机号码的文本框只允许填入数字且格式需要正确）。虽然无法完全防止 XSS 发生，但可以增加 XSS 攻击的难度。</p><p><strong>4.CSP</strong><br><a href="">内容安全策略(Content-Security-Policy)</a></p><h2 id="vue-XSS"><a href="#vue-XSS" class="headerlink" title="vue XSS?"></a>vue XSS?</h2><img src="images/vue.png" width="50%" height="50%"/>我们在使用vue中,常用的插入内容标签有 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;&#123; &#125;&#125;<br>v-html<br></code></pre></td></tr></table></figure>我们找到双括号源码,发现,vue是通过createTextNode生成文本字符串,所以不会存在xss, 不过v-html是有风险的,需要谨慎使用 .<br/><br/><a href="/ypf-blog/2023/12/25/javascript/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8-CSRF%E6%94%BB%E5%87%BB/" title="下一篇-前端安全-CSRF攻击">下一篇-前端安全-CSRF攻击</a><hr><blockquote><p><a href="https://juejin.cn/post/6844903685122703367">前端安全系列（一）：如何防止XSS攻击？</a><br><a href="https://blog.csdn.net/weixin_55821558/article/details/123534829">xss的绕过方式</a><br><a href="https://juejin.cn/post/6844904122429210638#heading-9">掀起XSS的盖头来</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>图片预加载与懒加载</title>
      <link href="/ypf-blog/2023/12/25/javascript/%E5%9B%BE%E7%89%87%E9%A2%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
      <url>/ypf-blog/2023/12/25/javascript/%E5%9B%BE%E7%89%87%E9%A2%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>预加载和懒加载的字眼总会看到。其实预加载和懒加载不仅仅是用于加载图片资源。其他资源，文字，视频。都可以。但实际工作过程中，我们较常用或较需要使用的场景就是加载图片资源。</p></blockquote><h2 id="什么是图片懒加载"><a href="#什么是图片懒加载" class="headerlink" title="什么是图片懒加载?"></a>什么是图片懒加载?</h2><p>懒加载，也叫延迟加载图片资源，指的是图片在可视范围才进行加载。一般图片较多的电商网站用的比较多。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>所有img标签的src设置loading.gif，真实的url放到自定义属性上，如<code>&lt;img src=&quot;loading.gif&quot; data-src=&quot;1.jpg&quot;/&gt; &lt;img src=&quot;loading.gif&quot; data-src=&quot;2.jpg&quot;/&gt;</code></li><li>监听浏览器滚动事件（window.onscroll），<strong>判断图片的位置（什么时候进入可视范围）</strong>，去除data-src替换loading，并增加一个已经加载的属性标识如 data-lazy=”loaded”,用来后面监听的时候不用又去替换（这个可有可无，因为图片加载过会有浏览器缓存）</li></ol><p><strong>注意：我们还常见很多网站，滚动后加载图片，也就是滚动翻页（当滚到头加载下一页，请求接口生成img插入到文档中），这也可以叫懒加载，只不过是后台分页，我们这里说的是我们已经有所有的图片url，前端进行懒加载</strong></p><h3 id="如何判断可视区域"><a href="#如何判断可视区域" class="headerlink" title="如何判断可视区域"></a>如何判断可视区域</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p><strong>A-document.documentElement.clientHeight 或者 document.body.clientHeight 可视窗口的高度</strong><br><strong>B-element.offsetTop dom相对于文档顶部的距离</strong><br><strong>C-document.documentElement.scrollTop 滚动条滚动的距离</strong><br><strong>B - C &lt;= A 即说明元素在可视区域内</strong></p><h4 id="方法2-getBoundingClientRect"><a href="#方法2-getBoundingClientRect" class="headerlink" title="方法2:getBoundingClientRect"></a>方法2:getBoundingClientRect</h4><p><code>getBoundingClientRect</code>是原生js方法，用户获取某个元素的左，上，右和下分别相对浏览器可视窗口的位置，这个方法没有参数。 主流浏览器都支持,可以放心使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> rectObject = el.<span class="hljs-title function_">getBoundingClientRect</span>(); <br>rectObject.<span class="hljs-property">top</span>：元素上边到视窗上边的距离;相当于第一种方法的 B-C<br>rectObject.<span class="hljs-property">right</span>：元素右边到视窗左边的距离;<br>rectObject.<span class="hljs-property">bottom</span>：元素下边到视窗上边的距离;<br>rectObject.<span class="hljs-property">left</span>：元素左边到视窗左边的距离;<br>rectObject.<span class="hljs-property">width</span>：是元素自身的宽<br>rectObject.<span class="hljs-property">height</span>:是元素自身的高<br></code></pre></td></tr></table></figure><p>所以我们只需要判断rectObject.top&lt;=可视窗口（document.documentElement.clientHeight）即可</p><p><strong>注意</strong></p><ul><li>可视窗口不是分辨率，是浏览器html，body的区域<code>document.documentElement.clientHeight 或者 document.body.clientHeight</code>，分辨率是 <code>widow.screen.width window.screen.height</code></li><li>一般我们提前100px左右就开始加载，不会卡着点，这样页面滚动时候，图片提前加载，用户体验更好，即 B-C-100&lt;=A</li><li>我们监听onscroll事件，一般会用节流，减少触发频率，因为用户会滚动很快。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onscroll</span> = _.<span class="hljs-title function_">throttle</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">111</span>);<br>&#125;, <span class="hljs-number">200</span>);<br></code></pre></td></tr></table></figure></li></ul><p><a href="https://github.com/hilongjw/vue-lazyload">vue-lazyload</a> 封装了vue的懒加载指令，可以自己去研究源码。</p><h2 id="什么是图片预加载"><a href="#什么是图片预加载" class="headerlink" title="什么是图片预加载?"></a>什么是图片预加载?</h2><p>预加载，简单来说就是将所有所需的资源提前在浏览器请求，这样后面在需要用到时就直接从缓存取资源，这样能立马展示出来；<br>那我们是不是可以想到，弄一个隐藏图片，先提前把资源请求过来？</p><h3 id="通过css预加载"><a href="#通过css预加载" class="headerlink" title="通过css预加载"></a>通过css预加载</h3><p>我只在chrome浏览器测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;img src=&quot;img1.jpg&quot; style=&quot;display: none&quot; /&gt;  <br>&lt;img src=&quot;img1.jpg&quot; style=&quot;visible: hidden&quot; /&gt; <br>&lt;img src=&quot;img1.jpg&quot; style=&quot;position:absolute;z-index:-1;&quot; /&gt; <br>&lt;img src=&quot;img1.jpg&quot; style=&quot;width:0;height:0 /&gt; <br>.test1 &#123; background: url(bg1.jpg); display: none; &#125;   <br></code></pre></td></tr></table></figure><p>上面虽然通过css隐藏了元素，但资源也会加载， 这样我们可以通过上面这些css方式进行预加载图片</p><h3 id="通过js预加载"><a href="#通过js预加载" class="headerlink" title="通过js预加载"></a>通过js预加载</h3><p>1.创建dom但不插入文档</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);   <br>el.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;img src=&quot;img1.jpg&quot; /&gt;&#x27;</span>;  <br></code></pre></td></tr></table></figure><p>2.通过<code>Image</code>也不插入文档</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> image = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>()<br>image.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;img1.jpg&quot;</span>  <br></code></pre></td></tr></table></figure><p>上面代码在chrome测试，虽然没有append dom节点，但也会加载图片，这样就可以达到既不插入dom，又预加载了图片。（Opera浏览器貌似必须append节点才会加载图片，没测试）</p><a href="/ypf-blog/2023/12/25/javascript/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8-CSRF%E6%94%BB%E5%87%BB/" title="拓展-预加载静态资源-preload、prefetch、dns-prefetch、defer和async">拓展-预加载静态资源-preload、prefetch、dns-prefetch、defer和async</a>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTP缓存</title>
      <link href="/ypf-blog/2023/12/25/http/http%E7%BC%93%E5%AD%98/"/>
      <url>/ypf-blog/2023/12/25/http/http%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>本片文章从2个方面理解http缓存</p><blockquote><p>1.缓存的分类详解     2.nginx缓存实战</p></blockquote><h2 id="缓存的作用"><a href="#缓存的作用" class="headerlink" title="缓存的作用"></a>缓存的作用</h2><ul><li>节省带宽</li><li>更快的加载页面</li><li>减少服务器负载，避免服务器过载的情况出现。</li></ul><h2 id="缓存的分类"><a href="#缓存的分类" class="headerlink" title="缓存的分类"></a>缓存的分类</h2><p>http缓存分为<strong>强缓存和协商缓存</strong></p><h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><blockquote><p>1.强缓存使用Expires、Cache-Control 两个头字段。<br>2.当命中强缓存的时候，客户端不会再发请求，直接从缓存中读取内容，并返回HTTP状态码200。</p></blockquote><h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h4><p>具体流程如下：<br>当浏览器请求服务器的时候，服务器会返回资源的同时还会带上响应头Expires，表示资源的过期具体时间，设置这个字段之后，就可以告诉浏览器，在未过期之前不需要再次请求，可以直接在缓存里面拿。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Expires</span>: <span class="hljs-title class_">Mon</span>, <span class="hljs-number">30</span> <span class="hljs-title class_">Jan</span> <span class="hljs-number">2023</span> <span class="hljs-number">06</span>:<span class="hljs-number">25</span>:<span class="hljs-number">20</span> <span class="hljs-variable constant_">GMT</span><br></code></pre></td></tr></table></figure><p>上面例子表示缓存在2023-01-30 14:25:20过期，我们在js中可以通过 <code>new Date().toGMTString()</code> 来获取GMT时间</p><blockquote><p>1.它是HTTP/1.0版本中定义缓存的字段<br>2.它表示缓存过期的<strong>绝对</strong>时间，是一个格林尼治(GMT)格式的标准时间。<br>3.由服务端设置，所以它只会出现在响应头中</p></blockquote><p>但其存在一个缺点，</p><ul><li>由于是绝对时间，用户可能会将客户端本地的时间进行修改，而导致浏览器判断缓存失效。此外，即使不考虑用户修改，客户端和服务端时间存在时差或者误差等因素也可能造成客户端与服务端的时间不一致，致使缓存失效。所以http/1.1 版本新增了Cache-Control字段。Expires和Cache-Control同时存在，Cache-Control优先级高</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Cache</span>-<span class="hljs-title class_">Control</span>: max-age=<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>上面例子表示缓存将在10s后过期（服务端第一次返回资源开始10s后）</p><h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h4><blockquote><p>1.它是HTTP/1.1版本中定义缓存的字段<br>2.它可以表示一个相对时间也可以设置其他值<br>3.一般由服务度设置，客户端可以设置，所以它既能出现在请求头又能出现在响应头，代表不同意思</p></blockquote><p>下面是Cache-Control一些常用的属性值：</p><ul><li><strong>max-age</strong>: 决定客户端资源被缓存多久，单位为 <strong>s</strong>, 是一个相对时间。当为0的时候就是不使用强缓存，类似no-cache。</li><li><strong>no-cache</strong>: 表示不使用本地强缓存，需要使用协商缓存。</li><li><strong>no-store</strong>: 表示不缓存，永远从服务端拿</li><li><strong>public</strong>: 表示资源可以被所有的用户缓存，包括终端用户即浏览器和中间代理服务器。</li><li><strong>private</strong>: 只能被终端用户的浏览器缓存，不允许中间缓存代理进行缓存。（默认值）</li><li><strong>s-maxage</strong>: 用于表示 cache 服务器上（比如 cache CDN，缓存代理服务器）的缓存的有效时间的，设置时候需要同时设置public，如 <code>Cache-Control: max-age:3600, s-maxage=3600, public </code></li></ul><p><strong>注意：</strong> Cache-Control的属性值，它们可以组合使用，用逗号隔开，但是no-cache和no-store是一组互斥属性，不能同时使用<br>比如设置了Cache-Control:max-age=1800,即30分钟缓存. 当12:00访问,此时响应头也会有Expires字段,显示的是<code>Thu, 20 Feb 2025 12:30:00 GMT</code>的过期时间。在这中间我们访问都是强缓存, 如果12:31访问,会重新变成304协商缓存看是否更新, 然后再强缓存.</p><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>在强缓存失效（过期等原因，不是不存在）后，客户端会携带缓存标识向服务端发起请求，服务端会根据缓存标识决定是否使用缓存。</p><blockquote><p>协商缓存的标识字段有两组，<code>Last-Modified / If-Modified-Since</code>和<code>Etag / If-None-Match</code>，如果同时存在，Etag / If-None-Match的优先级比Last-Modified / If-Modified-Since高。<br>由服务端设置，下次请求时浏览器携带过去<br>协商缓存生效时，状态码为304，返回的仅仅是一个状态码而已，并没有实际的文件内容，所以请求时间和资源的大小都会极大的减少</p></blockquote><h4 id="Last-Modified-If-Modified-Since"><a href="#Last-Modified-If-Modified-Since" class="headerlink" title="Last-Modified / If-Modified-Since"></a>Last-Modified / If-Modified-Since</h4><p>当客户端第一次请求服务器的时候，服务端会返回一个Last-Modified响应头，该字段是一个GMT标准时间。下次客户端请求服务器的时候会带上If-Modified-Since请求头字段，该字段的值就是服务器上次返回的Last-Modified的值。服务器接收到请求后会比较这两个值是否一样，一样就返回304，让客户端从缓存中读取，不一样就会返回状态码200，并返回新文件给客户端并更新Last-Modified响应头字段的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Last</span>-<span class="hljs-title class_">Modified</span>: <span class="hljs-title class_">Mon</span>, <span class="hljs-number">30</span> <span class="hljs-title class_">Jan</span> <span class="hljs-number">2023</span> <span class="hljs-number">06</span>:<span class="hljs-number">25</span>:<span class="hljs-number">20</span> <span class="hljs-variable constant_">GMT</span><br><span class="hljs-title class_">If</span>-<span class="hljs-title class_">Modified</span>-<span class="hljs-title class_">Since</span>: <span class="hljs-title class_">Mon</span>, <span class="hljs-number">30</span> <span class="hljs-title class_">Jan</span> <span class="hljs-number">2023</span> <span class="hljs-number">06</span>:<span class="hljs-number">25</span>:<span class="hljs-number">20</span> <span class="hljs-variable constant_">GMT</span><br></code></pre></td></tr></table></figure><p>但是存在一个缺点：</p><ul><li>Last-Modified使用GMT只能精确到秒，如果一个文件在1s内进行修改，客户端在1s内进行多次请求，获取到的仍是缓存</li><li>如果只单纯编辑了下文件，如编辑又撤销，并没有更新内容，Last-Modified会被更新，再次请求服务端对比时间，导致缓存失效</li></ul><p>所以为了解决上面问题，又引入了Etag 和 If-None-Match</p><h4 id="Etag-和-If-None-Match"><a href="#Etag-和-If-None-Match" class="headerlink" title="Etag 和 If-None-Match"></a>Etag 和 If-None-Match</h4><p>当客户端第一次请求服务器的时候，服务端会返回一个Etag响应头。客户端请求服务器的时候会带上If-None-Match请求头字段，该字段的值就是服务器返回的Etag的值。服务器接收到请求后会比较这两个值是否一样，一样就返回304，让客户端从缓存中读取，不一样就会返回新文件给客户端并更新Etag响应头字段的值。</p><blockquote><p>Etag 是由文件内容的 hash 值和内容长度计算而成的唯一哈希值，只有当文件文件内容发生变化了Etag的值才会发生变化。</p></blockquote><p>虽然etag解决了上面1s内改动以及文件编辑未更新的问题，但是etag也有缺点</p><ul><li>ETag需要计算文件指纹这样意味着，服务端需要更多的计算开销。如果文件尺寸大，数量多，并且计算频繁，那么ETag的计算就会影响服务器的性能。显然，ETag在这样的场景下就不是很适合。</li><li>ETag有强验证和弱验证，所谓将强验证，ETag生成的哈希码深入到每个字节。哪怕文件中只有一个字节改变了，也会生成不同的哈希值，它可以保证文件内容绝对的不变。但是，强验证非常消耗计算量。ETag还有一个弱验证，弱验证是提取文件的部分属性来生成哈希值。因为不必精确到每个字节，所以他的整体速度会比强验证快，但是准确率不高。会降低协商缓存的有效性。</li></ul><p>所以，不同于cache-control是expires的完全替代方案。ETag并不是用于last-modified的替代方案。而是last-modified的补充方案，项目中到底是用ETag还是last-modified完全取决于业务场景，这两个没有谁更好谁更坏</p><h3 id="缓存到底存在哪？"><a href="#缓存到底存在哪？" class="headerlink" title="缓存到底存在哪？"></a>缓存到底存在哪？</h3><p>上面我们讲了缓存，那么缓存到底存在哪？浏览器？电脑硬盘？<br>实际上，我们可以在浏览器控制台看到缓存的存储方式。</p><img src="images/network.jpg" /><ul><li><strong>memory cache</strong>: 内存中的缓存，按照操作系统的常理：先读内存，再读硬盘。</li><li><strong>disk cache</strong>: 硬盘上的缓存</li><li><strong>Service Worker</strong>: js中的service worker，因为上面2种缓存方式是浏览器自己的行为，浏览器自己控制从内存还是硬盘读取，前端无法控制，service worker给予了我们另外一种更加灵活，可以直接的操作方式，需要手动执行<code>cache.delete(resource)</code>进行清除</li></ul><h2 id="nginx缓存实战"><a href="#nginx缓存实战" class="headerlink" title="nginx缓存实战"></a>nginx缓存实战</h2><p>我们先随便搞个vue项目部署到nginx中，不知道怎么部署，看这篇文章 <a href="/ypf-blog/2023/01/17/nginx/mac%E9%85%8D%E7%BD%AEnginx%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/" title="mac配置nginx以及常用命令">mac配置nginx以及常用命令</a></p><p>我的nginx配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen 8089;<br>    location /test1 &#123;<br>        <span class="hljs-built_in">alias</span>  html/test;<br>        index  index.html index.htm;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>启动nginx，并访问 <code>http://localhost:8089/test1</code>， 此时我们并没有设置缓存，效果如下</p><img src="images/nginx.gif" width="50%" height="50%"/><p>html如下图<br><img src="images/nginx-default-html.jpg" width="50%" height="50%"/></p><p>css如下图<br><img src="images/nginx-default-css.jpg" width="50%" height="50%"/></p><ul><li>我们可以看到，第一次访问，两条请求的状态码都是 200。html和静态资源的响应头都会有 <code>ETag和Last-Modified</code>，这不就是协商缓存的字段嘛， 所以nginx默认开启了缓存。</li><li>我们刷新页面，发现html的状态码是304，其他静态资源是200，来源于缓存，也就是说每一次html文件都是命中了协商缓存，而js文件都是命中了强缓存。</li></ul><p>细心发现，我可以看到，刷新页面后，</p><ul><li>html的请求头里面由原来的<code>Cache-Control: no-cache</code>变成 <code>Cache-Control: max-age=0</code>并且带上了 <code>If-Modified-Since: Tue, 17 Jan 2023 07:17:36 GMT </code>和 <code>If-None-Match: &quot;63c64b90-31d&quot;</code>, 可以看到此时浏览器携带上了协商缓存的相关参数，以此来避免命中强缓存。</li></ul><img src="images/nginx-f5-html.jpg" width="50%" height="50%"/><ul><li>静态资源的请求头如下图（走的缓存看不到具体header信息，浏览器隐藏了，可以抓包看）</li></ul><img src="images/nginx-f5-css.jpg" width="50%" height="50%"/><p>现在我们修改配置</p><h3 id="no-cache"><a href="#no-cache" class="headerlink" title="no-cache"></a>no-cache</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen 8089;<br>    location /test1 &#123;<br>        <span class="hljs-built_in">alias</span>  html/test;<br>        index  index.html index.htm;<br>        add_header Cache-Control no-cache;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果如下：</p><ul><li>html以及静态资源响应头都增加了<code>Cache-Control: no-cache</code>，之前没配置nginx，都没有。</li><li>静态资源都是协商缓存304,请求时候请求头都带上了<code>If-Modified-Since和If-None-Match</code></li><li>html和没配置一样，请求时候请求头仍是<code>Cache-Control: max-age=0</code>并且带上了 <code>If-Modified-Since和If-None-Match</code></li></ul><img src="images/nginx-no-cache-all.jpg" width="50%" height="50%"/><img src="images/nginx-no-cache-html.jpg" width="50%" height="50%"/><img src="images/nginx-no-cache-css.jpg" width="50%" height="50%"/><h3 id="no-store"><a href="#no-store" class="headerlink" title="no-store"></a>no-store</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen 8089;<br>    location /test1 &#123;<br>        <span class="hljs-built_in">alias</span>  html/test;<br>        index  index.html index.htm;<br>        add_header Cache-Control no-store;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果如下：</p><ul><li>html以及静态资源响应头都增加了<code>Cache-Control: no-store</code></li><li>html和静态资源不走缓存，永远取最新的</li><li>静态资源请求头没有了<code>If-Modified-Since和If-None-Match和Cache-Control</code></li><li>html请求头没有<code>If-Modified-Since和If-None-Match</code>，但有<code>Cache-Control: max-age=0</code></li></ul><img src="images/nginx-no-store-all.jpg" width="50%" height="50%"/><img src="images/nginx-no-store-html.jpg" width="50%" height="50%"/><img src="images/nginx-no-store-css.jpg" width="50%" height="50%"/><h3 id="max-age-5"><a href="#max-age-5" class="headerlink" title="max-age=5"></a>max-age=5</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen 8089;<br>    location /test1 &#123;<br>        <span class="hljs-built_in">alias</span>  html/test;<br>        index  index.html index.htm;<br>        add_header Cache-Control max-age=5;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们配置缓存5s,结果如下</p><ul><li>html以及静态资源响应头都增加了<code>Cache-Control: max-age=5</code></li><li>html永远是304(请求时永远都携带<code>Cache-Control: max-age=0</code>以及 <code>If-Modified-Since和If-None-Match</code>)，</li><li>静态资源在5s内一直走强缓存，当失效时， 再次刷新页面， 静态资源带上<code>If-Modified-Since和If-None-Match</code>发起协商缓存304请求，再次刷新页面，静态资源重新变成强缓存</li></ul><img src="images/nginx-max-age-all.gif"/><p>综合上面三种测试，我们发现</p><ul><li>上面三种无论怎么设置，nginx永远对html进行协商缓存，静态资源根据不同配置，不同结果</li></ul><h2 id="缓存场景"><a href="#缓存场景" class="headerlink" title="缓存场景"></a>缓存场景</h2><ul><li>我们现在都是工程化打包，拿vue举例子，打包后的静态资源都有hash值，所以说走强缓存即可</li><li>html走协商缓存或者不缓存，html因为引用静态资源，又没有hash值，所以更新，都要新的</li><li>对于不常变化的静态资源，我们可以单独设置一个很长的max-age，比如<code>max-age=31536000 (一年)</code>,这样1年内走强缓存，连协商缓存的请求都省去了。但是为了解决更新问题，需要在url上加版本号/hash等来控制</li></ul><p>实际中我们可以用类似下面配置进行不同类型判断</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen 8089;<br>    location /test1 &#123;<br>        <span class="hljs-built_in">alias</span>  html/test;<br>        index  index.html index.htm;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$request_filename</span> ~* ^.*[.](html|htm)$) &#123;<br>            <span class="hljs-comment">#html文件不缓存</span><br>            add_header Cache-Control <span class="hljs-string">&quot;no-store&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h2><p>最后， 前端中还有个浏览器缓存，简单描述下</p><ul><li>cookie</li><li>LocalStorage/SessionStorage</li><li>indexedDB</li></ul><ol><li>cookie大小为4KB，每个域名下的cookie数量最多为20个（但很多浏览器厂商在具体实现时支持大于20个）</li><li>cookie的key和value如果里面含有<code>;</code>号，设置都时候就会被截断，因为我们通过<code>document.cookie</code>设置本来就是字符串拼接并分号隔开的，所以需要编码下， 实际上中文等特殊字符我们都最好编码下</li><li>localStorage/sessionStorage大小为5M，我们通过<code>localStorage.setItem(key,value)</code>设置的，所以不会存在截断问题，但是特殊字符啥的最好编码下</li><li>IndexedDB为解决前端无法存储大容量数据而生，它的存储容量非常大，取决与你的硬盘。相当于前端的数据库。主流浏览器都支持，看兼容性，可以上<a href="https://caniuse.com/?search=indexedDB">caniuse查询下</a></li></ol><img src="images/indexedDB.jpg"/>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>傻傻分不清楚-toString()、Object.prototype.toString.call()</title>
      <link href="/ypf-blog/2023/12/25/javascript/%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%E6%A5%9A-toString()%E3%80%81Object-prototype-toString-call()/"/>
      <url>/ypf-blog/2023/12/25/javascript/%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%E6%A5%9A-toString()%E3%80%81Object-prototype-toString-call()/</url>
      
        <content type="html"><![CDATA[<h1 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h1><p>它的作用是:将某一个值转化为字符串<br>我们先看个demo：</p><pre><code>var t1 = &#123;a: 1&#125;;var t2 = [1,2];var t3 = &#39;str&#39;;var t4= 4var t5=trueconsole.log(t1.toString())  //&quot;[object Object]&quot;console.log(t2.toString())  //&quot;1,2&quot;console.log(t3.toString())  // &quot;str&quot;console.log(t4.toString())  // &quot;4&quot;console.log(t5.toString())  // &quot;true&quot;</code></pre><p>在上面的例子中，我们定义了对象、数组、字符串、数值、布尔类型来调用<code>toString</code>方法，但是结果却完全不一样。奇怪？</p><p><strong>从例子上看，</strong></p><ul><li>对象返回的是貌似可以反映出其类型的字符串</li><li>数组返回的是字符串列表</li><li>字符串返回的是字符串副本（即原样输出）</li></ul><p>所以从结果看，貌似不同类型的<code>toString</code>的方法功能不一样（虽然名字都叫toString）。</p><p>了解过<a href="../%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">对象原型</a>以及<a href="#">Post not found: javascript/数据类型 基本包装类型</a>的朋友都知道，上面例子中:</p><ul><li>t1调用的是Object.prototype里的方法</li><li>t2调用的是Array.prototype里的方法</li><li>t3调用的是String.prototype里的方法</li></ul><p>虽然t2也是对象，但其原型链上的第一层<code>Array.prototype就有toString方法</code>，所以就会直接继承，而不会再去找<code>Array.prototype.__proto__即Object.prototype中的toString方法</code>，所以不同类型的原型链式或多或少都 <strong>重写了toString方法</strong>，所以功能用处都不一样。</p><p>接下来，我们再来分析一下不同类型调用toString()方法，返回值有什么不同之处？</p><h2 id="字符串string（即调用-new-String出来的基本包装类型的方法）"><a href="#字符串string（即调用-new-String出来的基本包装类型的方法）" class="headerlink" title="字符串string（即调用 new String出来的基本包装类型的方法）"></a>字符串string（即调用 new String出来的基本包装类型的方法）</h2><blockquote><p>返回字符串的一个副本（即原样输出）</p></blockquote><pre><code>var str = &quot;a&quot;;str.toString(); //&quot;a&quot;String.prototype.toString.call(str) // &quot;a&quot;</code></pre><h2 id="数值number（即调用-new-Number出来的基本包装类型的方法）"><a href="#数值number（即调用-new-Number出来的基本包装类型的方法）" class="headerlink" title="数值number（即调用 new Number出来的基本包装类型的方法）"></a>数值number（即调用 new Number出来的基本包装类型的方法）</h2><blockquote><p>返回字符串形式的数值</p></blockquote><pre><code>var num = 520;num.toString(); //&quot;520&quot;Number.prototype.toString.call(num) // &quot;a&quot;</code></pre><h2 id="布尔值boolean（即调用-new-Boolean出来的基本包装类型的方法）"><a href="#布尔值boolean（即调用-new-Boolean出来的基本包装类型的方法）" class="headerlink" title="布尔值boolean（即调用 new Boolean出来的基本包装类型的方法）"></a>布尔值boolean（即调用 new Boolean出来的基本包装类型的方法）</h2><blockquote><p>返回字符串”true”或”false”</p></blockquote><pre><code>var boo = true;boo.toString(); //&quot;true&quot;Boolean.prototype.toString.call(boo); //&quot;true&quot;</code></pre><h2 id="独一无二值symbol-即调用构造函数Symbol生成的实例方法，注这里调用和一般的构造函数不一样，不需要new，直接调用"><a href="#独一无二值symbol-即调用构造函数Symbol生成的实例方法，注这里调用和一般的构造函数不一样，不需要new，直接调用" class="headerlink" title="独一无二值symbol(即调用构造函数Symbol生成的实例方法，注这里调用和一般的构造函数不一样，不需要new，直接调用)"></a>独一无二值symbol(即调用构造函数Symbol生成的实例方法，注这里调用和一般的构造函数不一样，不需要new，直接调用)</h2><blockquote><p>返回字符串”Symbol()”</p></blockquote><pre><code>var symbol = Symbol();symbol.toString(); //&quot;Symbol()&quot;Symbol.prototype.toString.call(symbol); //&quot;Symbol()&quot;</code></pre><h2 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h2><p>null和undefined没有相应的构造函数，所以它们没有也无法调用toString()方法，也就是说它们不能访问任何属性和方法，只是基本类型而已。</p><h2 id="对象object（即调用Object-prototype的方法）"><a href="#对象object（即调用Object-prototype的方法）" class="headerlink" title="对象object（即调用Object.prototype的方法）"></a>对象object（即调用Object.prototype的方法）</h2><blockquote><p>返回 <code>[object type]</code>，其中type为对象的类型</p></blockquote><pre><code>var t1 = &#123;a: 1&#125;;t1.toString()  //&quot;[object Object]&quot;Object.prototype.toString.call(t1); //&quot;[object Object]&quot;</code></pre><h2 id="数组Array（即调用Array-prototype的方法）"><a href="#数组Array（即调用Array-prototype的方法）" class="headerlink" title="数组Array（即调用Array.prototype的方法）"></a>数组Array（即调用Array.prototype的方法）</h2><blockquote><p>返回由数组中每个值的字符串形式 拼接而成的一个以逗号分隔的字符串</p></blockquote><pre><code>var array = [1, &#39;s&#39;, true, &#123;a: 2&#125;];array.toString();//&quot;1,s,true,[object Object]&quot;Array.prototype.toString.call(array);//&quot;1,s,true,[object Object]&quot;</code></pre><h2 id="函数function（即调用Function-prototype的方法）"><a href="#函数function（即调用Function-prototype的方法）" class="headerlink" title="函数function（即调用Function.prototype的方法）"></a>函数function（即调用Function.prototype的方法）</h2><blockquote><p>返回函数的代码</p></blockquote><pre><code>function foo()&#123;    console.log(1&#39;);&#125;;foo.toString();&lt;!--&quot;function foo()&#123;--&gt;&lt;!--    console.log(1);--&gt;&lt;!--&#125;&quot;--&gt;Function.prototype.toString.call(foo);&lt;!--&quot;function foo()&#123;--&gt;&lt;!--    console.log(1&#39;);--&gt;&lt;!--&#125;&quot;--&gt;</code></pre><p>所以：</p><pre><code>Object.toString();//&quot;function Object() &#123; [native code] &#125;&quot;Function.toString();//&quot;function Function() &#123; [native code] &#125;&quot;Array.toString();//&quot;function Array() &#123; [native code] &#125;&quot;....</code></pre><p>因为</p><pre><code>Array.__proto__===Function.prototype  //trueObject.__proto__===Function.prototype  //trueFunction.__proto__===Function.prototype  //true</code></pre><h2 id="日期Date（即调用Date-prototype的方法）"><a href="#日期Date（即调用Date-prototype的方法）" class="headerlink" title="日期Date（即调用Date.prototype的方法）"></a>日期Date（即调用Date.prototype的方法）</h2><blockquote><p>返回带有时区信息的日期和时间</p></blockquote><pre><code>var date = new Date();date.toString();//&quot;Fri May 11 2018 14:55:43 GMT+0800 (中国标准时间)&quot;Date.prototype.toString.call(date);//&quot;Fri May 11 2018 14:55:43 GMT+0800 (中国标准时间)&quot;</code></pre><h2 id="正则表达式RegExp（即调用RegExp-prototype的方法）"><a href="#正则表达式RegExp（即调用RegExp-prototype的方法）" class="headerlink" title="正则表达式RegExp（即调用RegExp.prototype的方法）"></a>正则表达式RegExp（即调用RegExp.prototype的方法）</h2><blockquote><p>返回正则表达式的字符串形式</p></blockquote><pre><code>var re = /cat/g;re.toString();// &quot;/cat/g&quot;RegExp.prototype.toString.call(re);// &quot;/cat/g&quot;</code></pre><h2 id="全局对象window"><a href="#全局对象window" class="headerlink" title="全局对象window"></a>全局对象window</h2><blockquote><p>返回 <code>[object window]</code></p></blockquote><pre><code>window.toString(); //&quot;[object Window]&quot;Object.prototype.toString.call(window); //&quot;[object Window]&quot;</code></pre><p>window是js中的特殊对象，Window并不是个构造函数，也就是说并没有Window.prototype原型对象上重写toString()方法，它会顺着原型链查找调用Object.prototype.toString()。</p><h1 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call( )"></a>Object.prototype.toString.call( )</h1><p>上面我们通过直接调用和call调用两种方式进行<code>toString</code>方法测试。我们知道对应object返回的结果是<code>[object type]</code>，其中type为对象的类型`，那么我们可以根据其返回对象的功能进行类型判断。</p><pre><code>Object.prototype.toString.call(&#123;&#125;);&lt;!--&quot;[object Object]&quot;--&gt;Object.prototype.toString.call([]);&lt;!--&quot;[object Array]&quot;--&gt;Object.prototype.toString.call(function()&#123;&#125;);&lt;!--&quot;[object Function]&quot;--&gt;Object.prototype.toString.call(&#39;&#39;);&lt;!--&quot;[object String]&quot;--&gt;Object.prototype.toString.call(1);&lt;!--&quot;[object Number]&quot;--&gt;Object.prototype.toString.call(true);&lt;!--&quot;[object Boolean]&quot;--&gt;Object.prototype.toString.call(null);&lt;!--&quot;[object Null]&quot;--&gt;Object.prototype.toString.call(undefined);&lt;!--&quot;[object Undefined]&quot;--&gt;Object.prototype.toString.call();&lt;!--&quot;[object Undefined]&quot;--&gt;Object.prototype.toString.call(new Date());&lt;!--&quot;[object Date]&quot;--&gt;Object.prototype.toString.call(/at/);&lt;!--&quot;[object RegExp]&quot;--&gt;</code></pre><h1 id="直接调用"><a href="#直接调用" class="headerlink" title="直接调用"></a>直接调用</h1><pre><code>toString();&lt;!--&quot;[object Undefined]&quot;--&gt;(function()&#123;    console.log(toString());&#125;)();&lt;!--[object Undefined]--&gt;</code></pre><p>也就是说直接调用toString()方法，等价于</p><pre><code>Object.prototype.toString.call();&lt;!--&quot;[object Undefined]&quot;--&gt;Object.prototype.toString.call(undefined);&lt;!--&quot;[object Undefined]&quot;--&gt;</code></pre><p>即：<strong>直接调用toString()方法这里不可以理解成为全局作用域调用toString()方法，即window.toString()</strong></p><p>所以直接调用toString()应该就是<strong>变相的</strong>undefined.toString()方法（这里说的是相当于，实际undefined并没有方法，调用会报错）。</p><h1 id="toString-call-apply-类型"><a href="#toString-call-apply-类型" class="headerlink" title="toString.call/apply(类型)"></a>toString.call/apply(类型)</h1><p>经常有人用toString.call/apply(类型)去代替Object.prototype.toString.call/apply(类型)使用，其实这样是不严谨的，容易导致一些问题，如下所示</p><pre><code>function toString()&#123;    console.log(1&quot;)&#125;toString();//1toString.call(&#123;&#125;);//1toString.call([]);//1</code></pre><p>我们可以发现，当我们自定义了toString()方法时，直接调用toString()方法，就不会再默认调用Object类的toString()方法，而是会使用我们自定义的方法，这样可能得不到我们想要的结果，所以我们还是应当尽量使用Object.prototype.toString.call/apply(类型)。</p><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><p>类似toString()方法，Object的不同子类型还重写了<code>toLocaleString()、valueOf()等方法</code>，这里我想说的是不管对象子类型怎么<strong>重写</strong>方法，只要我们明白这些方法是<strong>哪里来</strong>的，怎么调用的，就能很好的理解这些方法调用后产生的结果！</p><p>说到底，对JS中对象和原型的理解真的非常非常重要！</p><blockquote><p><a href="">由Object.prototype.toString.call( )引发关于toString( )方法的思考</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
          <category> 傻傻分不清楚 </category>
          
          <category> 待完善 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>11.watcher和dep思路梳理</title>
      <link href="/ypf-blog/2023/11/10/vue2%E6%BA%90%E7%A0%81/11.watcher%E5%92%8Cdep%E6%80%9D%E8%B7%AF%E6%A2%B3%E7%90%86/"/>
      <url>/ypf-blog/2023/11/10/vue2%E6%BA%90%E7%A0%81/11.watcher%E5%92%8Cdep%E6%80%9D%E8%B7%AF%E6%A2%B3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="watcher有几种"><a href="#watcher有几种" class="headerlink" title="watcher有几种"></a>watcher有几种</h2><p>经过前面的学习,答案显而易见,<font color="red"><strong>有3种</strong></font></p><h2 id="watcher定义对比"><a href="#watcher定义对比" class="headerlink" title="watcher定义对比"></a>watcher定义对比</h2><h3 id="渲染watcher"><a href="#渲染watcher" class="headerlink" title="渲染watcher"></a>渲染watcher</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>所谓渲染watcher,就是用来执行 <code>updateComponent</code>,其中第四个参数传true表示是渲染watcher</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">updateComponent</span> = (<span class="hljs-params"></span>) =&gt; &#123;   <br>  vm.<span class="hljs-title function_">_update</span>(vm.<span class="hljs-title function_">_render</span>())<br>&#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Watcher</span>(vm,updateComponent,<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-title function_">callHook</span>(vm, <span class="hljs-string">&quot;updated&quot;</span>);<br>&#125;,<span class="hljs-literal">true</span>) <span class="hljs-comment">// 参数1：实例，参数2：更新函数，参数3：渲染函数，参数4：true表示是渲染watcher</span><br></code></pre></td></tr></table></figure><h4 id="收集依赖"><a href="#收集依赖" class="headerlink" title="收集依赖"></a>收集依赖</h4><img src="images/render-init.jpg" width="70%"/><p>如上图,通过Object.defineProperty触发了<strong>收集依赖</strong></p><h4 id="触发依赖"><a href="#触发依赖" class="headerlink" title="触发依赖"></a>触发依赖</h4><img src="images/render-set1.jpg"  width="70%"/><img src="images/render-set2.jpg"  width="70%"/><img src="images/render-set3.jpg"  width="70%"/><img src="images/render-set4.jpg"  width="70%"/><img src="images/render-set5.jpg"  width="70%"/><p>所谓触发依赖,实际本质原理就是<code>因为每个属性都会有个dep, 本质就是循环dep下面的watcher</code></p><h3 id="watch的watcher-用户watcher"><a href="#watch的watcher-用户watcher" class="headerlink" title="watch的watcher(用户watcher)"></a>watch的watcher(用户watcher)</h3><h4 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h4><p>所谓用户watcher,就是咱们平常用的watch函数,其中第四个参数传<code>user:true</code>即表示是用户watcher</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$watch</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">exprOrFn, handler, options = &#123;&#125;</span>) &#123;<br>  <span class="hljs-comment">// 渲染走渲染的watcher，watch走watch的watcher</span><br>  <span class="hljs-keyword">const</span> watcher = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Watcher</span>(<span class="hljs-variable language_">this</span>, exprOrFn, handler, &#123;<br>    ...options,<br>    <span class="hljs-attr">user</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 标识是用户watcher</span><br>  &#125;);<br>  <span class="hljs-comment">// 如果用户传入了immediate，应该立即执行</span><br>  <span class="hljs-keyword">if</span> (options.<span class="hljs-property">immediate</span>) &#123;<br>    handler.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, watcher.<span class="hljs-property">value</span>);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="收集依赖-1"><a href="#收集依赖-1" class="headerlink" title="收集依赖"></a>收集依赖</h4><p>上面exprOrFn就是data中定义的变量, 此时会触发watcher源码中初始化的getter函数.</p><img src="images/watch-init.jpg" width="70%"/><p>如上面截图,当执行了getter函数,就相当于vm实例上获取值,此时的Dep.target=用户watcher, 然后就会和上面渲染函数收集方式一处代码(Object.defineProperty),触发了<strong>收集依赖</strong>,该属性的dep下subs数组(watcher数组)就会append一个用户watcher</p><h4 id="触发依赖-1"><a href="#触发依赖-1" class="headerlink" title="触发依赖"></a>触发依赖</h4><p>和上面渲染watcher一样,data数据变化就会触发依赖,循环该属性下的subs数组(watcher数组),从而会触发watch回调函数,如下图<br><img src="images/watch-set5.jpg" width="70%"/></p><h3 id="computed的watcher"><a href="#computed的watcher" class="headerlink" title="computed的watcher"></a>computed的watcher</h3><h4 id="初始化-2"><a href="#初始化-2" class="headerlink" title="初始化"></a>初始化</h4><p>所谓computed的watcher,就是computed的get函数,其中第四个参数<code>&#123;lazy:true&#125;</code>即表示是computed的watcher</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">initComputed</span>(<span class="hljs-params">vm</span>) &#123;<br>  <span class="hljs-keyword">let</span> computed = vm.<span class="hljs-property">$options</span>.<span class="hljs-property">computed</span>;<br>  <span class="hljs-comment">// 将计算属性的配置放到vm实例上</span><br>  <span class="hljs-keyword">const</span> watchers = (vm.<span class="hljs-property">_computedWatchers</span> = &#123;&#125;);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> computed) &#123;<br>    <span class="hljs-keyword">const</span> userDef = computed[key];<br>    <span class="hljs-keyword">const</span> getter = <span class="hljs-keyword">typeof</span> userDef === <span class="hljs-string">&quot;function&quot;</span> ? userDef : userDef.<span class="hljs-property">get</span>;<br>    <span class="hljs-comment">// 创建一个watcher实例，这个watcher实例中的lazy为true</span><br>    <span class="hljs-comment">// 每一个属性都有一个watcher,lazy为true表示不会立即执行,只有用到这个属性的时候才会执行</span><br>    watchers[key] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Watcher</span>(vm, getter, <span class="hljs-function">() =&gt;</span> &#123;&#125;, &#123; <span class="hljs-attr">lazy</span>: <span class="hljs-literal">true</span> &#125;);<br>    <span class="hljs-comment">// 将key代理到vm实例上</span><br>    <span class="hljs-title function_">defineComputed</span>(vm, key, userDef);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="收集依赖-2"><a href="#收集依赖-2" class="headerlink" title="收集依赖"></a>收集依赖</h4><p>因为初始化state的劫持只劫持了data中的变量,所以computed需要重新定义Object.defineProperty将computed定义的变量绑定到vm上进行劫持的(注意), get函数就是computed的回调函数.<br><img src="images/computed-set1.jpg" width="70%"/></p><h4 id="触发依赖-2"><a href="#触发依赖-2" class="headerlink" title="触发依赖"></a>触发依赖</h4><p>我们知道computed的变量在</p><ul><li>只有使用的时候才会触发</li><li>只有依赖的变量变化才会触发,不依赖的变量变化不会触发</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">b</span>:<span class="hljs-number">1</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">d</span>:<span class="hljs-number">1</span></span><br><span class="language-javascript">      &#125;;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">c</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&#x27;调用&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;)</span><br><span class="language-javascript"></span><br></code></pre></td></tr></table></figure><p>因为<strong>lazy</strong>的存在,所以只有使用才会触发,<strong>初始化不会触发</strong><br><img src="images/3.jpg" width="70%"/><br>如果直接使用,如<code>vm.c</code>,此时会触发computed自己定义的拦截<br><img src="images/4.jpg" width="70%"/><br><img src="images/5.jpg" width="70%"/><br><img src="images/6.jpg" width="70%"/><br>所以上图也解释了为啥只有computed触发只和依赖的变量变化有关,因为里面该方法里面使用了变量导致拦截,其dep的subs会增加一个computed的watcher.</p>]]></content>
      
      
      <categories>
          
          <category> vue2源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>10.computed</title>
      <link href="/ypf-blog/2023/11/02/vue2%E6%BA%90%E7%A0%81/10.computed/"/>
      <url>/ypf-blog/2023/11/02/vue2%E6%BA%90%E7%A0%81/10.computed/</url>
      
        <content type="html"><![CDATA[<h2 id="computed用法"><a href="#computed用法" class="headerlink" title="computed用法"></a>computed用法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.7.14/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;script src=&quot;./dist/vue.js&quot;&gt;&lt;/script&gt; --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">c</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;调用&#x27;</span>);</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// c:&#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//   get()&#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     return this.a + this.b;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//   &#125;,</span></span><br><span class="language-javascript">        <span class="hljs-comment">//   set(val)&#123;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     this.a = val;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//   &#125;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    vm.<span class="hljs-property">c</span></span><br><span class="language-javascript">    vm.<span class="hljs-property">c</span></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们知道computed有如下特点</p><ol><li>函数形式或者对象形式(get、set)</li><li>多次调用,只会触发一次,具有缓存机制</li><li>只有computed下定义的属性,其依赖的属性变化,才会触发;或者调用computed下定义的属性,才会触发</li></ol><p>我们从上面代码可以看到, 调用了两次<code>vm.c</code>,但computed里面只输出了一次 <strong>调用</strong>.<br>接下来我们来实现computed.</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="初步实现-无缓存"><a href="#初步实现-无缓存" class="headerlink" title="初步实现(无缓存)"></a>初步实现(无缓存)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js">src/state.<span class="hljs-property">js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">initState</span>(<span class="hljs-params">vm</span>) &#123;<br>  <span class="hljs-keyword">const</span> opts = vm.<span class="hljs-property">$options</span>;<br>  ...<br>  <span class="hljs-comment">// 1. 初始化computed</span><br>  <span class="hljs-keyword">if</span> (opts.<span class="hljs-property">computed</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&quot;初始化-computed&quot;</span>);<br>    <span class="hljs-title function_">initComputed</span>(vm);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfoEnd</span>();<br>  &#125;<br>  ...<br>&#125;<br><span class="hljs-comment">// 2. 新增initComputed方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">initComputed</span>(<span class="hljs-params">vm</span>) &#123;<br>  <span class="hljs-keyword">let</span> computed = vm.<span class="hljs-property">$options</span>.<span class="hljs-property">computed</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> computed) &#123;<br>    <span class="hljs-keyword">const</span> userDef = computed[key];<br>    <span class="hljs-keyword">const</span> getter = <span class="hljs-keyword">typeof</span> userDef === <span class="hljs-string">&quot;function&quot;</span> ? userDef : userDef.<span class="hljs-property">get</span>;<br>    <span class="hljs-comment">// 将key代理到vm实例上</span><br>    <span class="hljs-title function_">defineComputed</span>(vm, key, userDef);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">defineComputed</span>(<span class="hljs-params">target, key, userDef</span>) &#123;<br>  <span class="hljs-keyword">const</span> sharedPropertyDefinition = &#123;<br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;,<br>    <span class="hljs-attr">set</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;,<br>  &#125;;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> userDef === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>    sharedPropertyDefinition.<span class="hljs-property">get</span> = userDef;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    sharedPropertyDefinition.<span class="hljs-property">get</span> = userDef.<span class="hljs-property">get</span>;<br>    sharedPropertyDefinition.<span class="hljs-property">set</span> = userDef.<span class="hljs-property">set</span>;<br>  &#125;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(target, key, sharedPropertyDefinition);<br>&#125;<br></code></pre></td></tr></table></figure><p>此时我们执行代码, 是已经实现了computed, 只不过输出了<code>两次调用</code>,说明还没有缓存,现在我们来实现缓存.</p><h3 id="computed有缓存"><a href="#computed有缓存" class="headerlink" title="computed有缓存"></a>computed有缓存</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">defineComputed</span>(<span class="hljs-params">target, key, userDef</span>) &#123;<br>  <span class="hljs-keyword">const</span> sharedPropertyDefinition = &#123;<br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">get</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;,<br>    <span class="hljs-attr">set</span>: <span class="hljs-function">() =&gt;</span> &#123;&#125;,<br>  &#125;;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> userDef === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>    <span class="hljs-comment">// 3.修改为createComputedGetter方法</span><br>    sharedPropertyDefinition.<span class="hljs-property">get</span> = <span class="hljs-title function_">createComputedGetter</span>(key);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    sharedPropertyDefinition.<span class="hljs-property">get</span> = <span class="hljs-title function_">createComputedGetter</span>(key);<br>    sharedPropertyDefinition.<span class="hljs-property">set</span> = userDef.<span class="hljs-property">set</span>;<br>  &#125;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(target, key, sharedPropertyDefinition);<br>&#125;<br><span class="hljs-comment">// 创建计算属性的getter,高阶函数(什么是高阶函数?即函数的返回值是函数或者函数的参数是函数)</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createComputedGetter</span>(<span class="hljs-params">key</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">computedGetter</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 取出watcher</span><br>    <span class="hljs-keyword">const</span> watcher = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_computedWatchers</span>[key];<br>    <span class="hljs-keyword">if</span> (watcher) &#123;<br>      <span class="hljs-comment">// 4.缓存核心点 如果watcher.dirty为true，说明依赖的数据发生了变化，需要重新计算,不变化就不计算,初始化的时候为true,因为其值就是lazy</span><br>      <span class="hljs-keyword">if</span> (watcher.<span class="hljs-property">dirty</span>) &#123;<br>        <span class="hljs-comment">// 在watcher中重新定义evaluate方法，用来计算</span><br>        watcher.<span class="hljs-title function_">evaluate</span>();<br>      &#125;<br>      <span class="hljs-comment">// 如果Dep.target存在,将计算属性watcher添加到渲染watcher的依赖中</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>) &#123;<br>        watcher.<span class="hljs-title function_">depend</span>();<br>      &#125;<br>      <span class="hljs-keyword">return</span> watcher.<span class="hljs-property">value</span>;<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>上面初始化的<code>watcher.dirty=lazy=true</code> ,执行完以后<code>置为false</code>, 后面多次执行就不会触发了.</li><li>只有依赖的data属性变化,才会触发该属性下的subs里的watcher执行.这也是为啥Computed依赖的数据必须在data里面定义,否则依赖改变了,也监听不到,watch也监听不到</li></ul><p>具体总结可以看下一节,对比三种watcher.</p>]]></content>
      
      
      <categories>
          
          <category> vue2源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>9.diff算法(patch)</title>
      <link href="/ypf-blog/2023/09/28/vue2%E6%BA%90%E7%A0%81/9.diff%E7%AE%97%E6%B3%95(patch)/"/>
      <url>/ypf-blog/2023/09/28/vue2%E6%BA%90%E7%A0%81/9.diff%E7%AE%97%E6%B3%95(patch)/</url>
      
        <content type="html"><![CDATA[<h2 id="为何操作dom性能差？"><a href="#为何操作dom性能差？" class="headerlink" title="为何操作dom性能差？"></a>为何操作dom性能差？</h2><p>我们知道vue每次数据变化，在更新dom前都会进行diff对比，再进行操作dom，这极大的提高的页面性能效率，为什么操作dom就浪费性能，操作数据就不浪费？我们来看个案例：</p><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>()<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000000</span>;i++)&#123;<br>    <span class="hljs-keyword">var</span> obj=&#123;&#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>()<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000000</span>;i++)&#123;<br>    <span class="hljs-keyword">var</span> el=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>()<br></code></pre></td></tr></table></figure><p>结果如下：</p><p>上面结果大概相差了16倍。<br><img src="images/demo1.jpg" width="50%"/></p><h3 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>()<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++)&#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span>=i<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>()<br><span class="hljs-keyword">let</span> num=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++)&#123;<br>    num=i<br>&#125;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span>=num<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>()<br></code></pre></td></tr></table></figure><p>结果如下：</p><p>上面结果大概相差了<strong>80倍</strong>，如果涉及到更复杂的dom操作，相差更多。<br><img src="images/demo2.jpg" width="50%"/></p><h2 id="patch比对"><a href="#patch比对" class="headerlink" title="patch比对"></a>patch比对</h2><p>我们先看个案例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.7.14/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;script src=&quot;./dist/vue.js&quot;&gt;&lt;/script&gt; --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag">        <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123;color:&#x27;red&#x27;,&#x27;font-size&#x27;:a===3?&#x27;17px&#x27;:&#x27;12px&#x27;&#125;&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span></span><br><span class="hljs-tag">      &gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;a&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      vm.<span class="hljs-property">a</span> = <span class="hljs-number">3</span>;</span><br><span class="language-javascript">    &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><img src="images/vue.gif" width="50%"/><p>我们更改了样式属性以及data，运行发现，<br><strong>属性只有style变更，dom只有指定节点变更，其他dom都不变。这就是vue diff的强大之处。</strong></p><p>因为我们自己的vue还没有实现模版变量判断等语法，所以我们直接通过下面图例进行<code>vue diff</code>讲解。</p><h3 id="回忆"><a href="#回忆" class="headerlink" title="回忆"></a>回忆</h3><p>我们回忆下之前讲解的，每次数据改变时候，都会触发watcher<code>（vm._update(vm._render())）</code>，我们知道</p><ul><li><code>vm._render()</code>用来生成虚拟dom</li><li><code>vm._update()</code>用来渲染真实dom的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>src/index.<span class="hljs-property">js</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">Vue</span>(<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_init</span>(options);<br>  &#125;<br>src/init.<span class="hljs-property">js</span><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">initMixin</span>(<span class="hljs-params">Vue</span>) &#123;<br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_init</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) &#123;<br>      <span class="hljs-keyword">const</span> vm = <span class="hljs-variable language_">this</span>;<br>      <span class="hljs-comment">// vm.$options = options;</span><br>      <span class="hljs-comment">// 将用户传入的options和全局的options做合并</span><br>      vm.<span class="hljs-property">$options</span> = <span class="hljs-title function_">mergeOptions</span>(vm.<span class="hljs-property">constructor</span>.<span class="hljs-property">options</span>, options);<br>      <span class="hljs-comment">// 说明：初始化生命周期</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;%c生命周期：beforeCreate&quot;</span>, <span class="hljs-string">&quot;color: red&quot;</span>);<br>      <span class="hljs-title function_">callHook</span>(vm, <span class="hljs-string">&quot;beforeCreate&quot;</span>);<br>      <span class="hljs-comment">// 初始化状态</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">&quot;初始化state，包括data、computed、methods、watch等&quot;</span>)<br>      <span class="hljs-title function_">initState</span>(vm);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfoEnd</span>()<br>      <span class="hljs-comment">// 说明：初始化生命周期</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;%c生命周期：created&quot;</span>, <span class="hljs-string">&quot;color: red&quot;</span>);<br>      <span class="hljs-title function_">callHook</span>(vm, <span class="hljs-string">&quot;created&quot;</span>);<br>      <span class="hljs-comment">// 挂载模版</span><br>      <span class="hljs-keyword">if</span> (vm.<span class="hljs-property">$options</span>.<span class="hljs-property">el</span>) &#123;<br>        vm.$mount(vm.<span class="hljs-property">$options</span>.<span class="hljs-property">el</span>);<br>      &#125;<br>    &#125;;<br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$mount</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;<br>      <span class="hljs-keyword">const</span> vm = <span class="hljs-variable language_">this</span>;<br>      <span class="hljs-keyword">const</span> options = vm.<span class="hljs-property">$options</span>;<br>      el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(el);<br>      vm.<span class="hljs-property">$el</span> = el; <span class="hljs-comment">// 存储当前组件的根元素，用于后续的vdom转换真实dom操作</span><br>      <span class="hljs-comment">// 默认先会查找有没有render方法，没有render会采用template，template也没有就用el中的内容</span><br>      <span class="hljs-keyword">if</span> (!options.<span class="hljs-property">render</span>) &#123;<br>        <span class="hljs-comment">// 对模版进行编译</span><br>        <span class="hljs-keyword">let</span> template = options.<span class="hljs-property">template</span>;<br>        <span class="hljs-keyword">if</span> (!template &amp;&amp; el) &#123;<br>          template = el.<span class="hljs-property">outerHTML</span>;<br>        &#125;<br>        <span class="hljs-keyword">const</span> render = <span class="hljs-title function_">compileToFunction</span>(template);<br>        options.<span class="hljs-property">render</span> = render;<br>      &#125;<br>      <span class="hljs-comment">// 挂载组件（主要用到_update和_render方法）</span><br>      <span class="hljs-title function_">mountComponent</span>(vm, el);<br>    &#125;;<br>  &#125;<br>src/lifecycle.<span class="hljs-property">js</span><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">mountComponent</span>(<span class="hljs-params">vm, el</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;%c生命周期：beforeMount&quot;</span>, <span class="hljs-string">&quot;color: red&quot;</span>);<br>    <span class="hljs-title function_">callHook</span>(vm, <span class="hljs-string">&quot;beforeMount&quot;</span>);<br>    <span class="hljs-comment">// render--&gt;vnode--&gt;真实dom</span><br>    <span class="hljs-comment">// 1.调用vm._render函数，生成虚拟dom  2.调用vm._update,将虚拟dom转换成真实dom</span><br>    <span class="hljs-comment">// vm._update(vm._render());</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">updateComponent</span> = (<span class="hljs-params"></span>) =&gt; &#123;   <br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;updateComponent&quot;</span>,vm.<span class="hljs-title function_">_render</span>())         <br>      vm.<span class="hljs-title function_">_update</span>(vm.<span class="hljs-title function_">_render</span>())<br>    &#125;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Watcher</span>(vm,updateComponent,<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;%c生命周期：updated&quot;</span>, <span class="hljs-string">&quot;color: red&quot;</span>);<br>      <span class="hljs-title function_">callHook</span>(vm, <span class="hljs-string">&quot;updated&quot;</span>);<br>    &#125;,<span class="hljs-literal">true</span>) <span class="hljs-comment">// 参数1：实例，参数2：更新函数，参数3：渲染函数，参数4：true表示是渲染watcher</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;%c生命周期：mounted&quot;</span>, <span class="hljs-string">&quot;color: red&quot;</span>);<br>    <span class="hljs-title function_">callHook</span>(vm, <span class="hljs-string">&quot;mounted&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">lifecycleMixin</span>(<span class="hljs-params">Vue</span>) &#123;<br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_update</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">vnode</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vnode, <span class="hljs-string">&quot;vnode&quot;</span>);<br>      <span class="hljs-keyword">const</span> vm = <span class="hljs-variable language_">this</span>;<br>      vm.<span class="hljs-property">$el</span> = <span class="hljs-title function_">patch</span>(vm.<span class="hljs-property">$el</span>, vnode);<br>    &#125;;<br>  &#125;)<br>src/vdom/patch.<span class="hljs-property">js</span><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">patch</span>(<span class="hljs-params">oldVnode, vnode</span>) &#123;<br>    <span class="hljs-comment">// 渲染</span><br>    <span class="hljs-keyword">const</span> oldElm = oldVnode; <span class="hljs-comment">// div id=&quot;app&quot;</span><br>    <span class="hljs-keyword">const</span> parentElm = oldElm.<span class="hljs-property">parentNode</span>; <span class="hljs-comment">// body</span><br>    <span class="hljs-keyword">let</span> el = <span class="hljs-title function_">createElm</span>(vnode); <span class="hljs-comment">// 创建真实dom</span><br>    parentElm.<span class="hljs-title function_">insertBefore</span>(el, oldElm.<span class="hljs-property">nextSibling</span>); <span class="hljs-comment">// 将创建的真实dom插入到老的dom的后面</span><br>    parentElm.<span class="hljs-title function_">removeChild</span>(oldElm); <span class="hljs-comment">// 删除老的dom</span><br>    <span class="hljs-keyword">return</span> el;  <br>  &#125;<br></code></pre></td></tr></table></figure><p>上面我简单抽取了几个文件，直接描述了渲染vdom的流程。</p><ul><li>第一次加载的时候通过$mount,生成了存储当前组件根元素真实的dom节点，<code>vm.$el = el</code>，然后执行<code>mountComponent</code>将组件挂载到el下。</li><li>挂载过程主要初始化了watcher<code>（vm._update(vm._render())）</code></li><li><code>vm._update(）</code>执行了patch方法，里面就是通过<code>createElm(vnode)</code>创建真实dom，同时更新<code>vm.$el = patch(vm.$el, vnode);</code></li><li>后面数据变化会执行watcher队列，重新触发<code>vm._update(vm._render())</code></li></ul><h3 id="第一次渲染"><a href="#第一次渲染" class="headerlink" title="第一次渲染"></a>第一次渲染</h3><ul><li>Vue第一次的渲染，<strong>比单纯创建dom元素要效率低</strong>，因为通过执行了一大堆生成vdom逻辑，才生成了真实的dom(即上面的patch函数中createElm)。</li><li>vue的高效体现在响应式数据变化的虚拟dom对比组件依赖的数据收到响应式数据的影响时，重新调用render函数创建虚拟dom树，用新旧虚拟dom树比较，vue会找到最小更新量，然后更新必要的虚拟dom节点，最后修改对应的真实dom。这样就保证了对真实dom达到最小的变动。所以要改造patch函数，因为现在每次更新都相当于第一次创建。</li></ul><h3 id="更新进行patch对比"><a href="#更新进行patch对比" class="headerlink" title="更新进行patch对比"></a>更新进行patch对比</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/lifecycle.<span class="hljs-property">js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">lifecycleMixin</span>(<span class="hljs-params">Vue</span>) &#123;<br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_update</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">vnode</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vnode, <span class="hljs-string">&quot;vnode&quot;</span>);<br>    <span class="hljs-keyword">const</span> vm = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-comment">// 1.增加判断</span><br>    <span class="hljs-keyword">const</span> prevVnode = vm.<span class="hljs-property">_vnode</span>; <span class="hljs-comment">// 保存上一次的vnode</span><br>    vm.<span class="hljs-property">_vnode</span> = vnode; <span class="hljs-comment">// 保存当前的vnode</span><br>    <span class="hljs-keyword">if</span> (!prevVnode) &#123;<br>      <span class="hljs-comment">// 说明是初次渲染</span><br>      vm.<span class="hljs-property">$el</span> = <span class="hljs-title function_">patch</span>(vm.<span class="hljs-property">$el</span>, vnode); <br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 说明是更新</span><br>      vm.<span class="hljs-property">$el</span> = <span class="hljs-title function_">patch</span>(prevVnode, vnode);<br>    &#125;<br>  &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/vdom/patch.<span class="hljs-property">js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">patch</span>(<span class="hljs-params">oldVnode, vnode</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oldVnode, vnode, <span class="hljs-string">&quot;patch&quot;</span>)<br>  <span class="hljs-comment">// 判断是更新还是第一次渲染，第一次传的是真实的dom节点$el,后面更新传递的是虚拟dom</span><br>  <span class="hljs-keyword">const</span> isRealElement = oldVnode.<span class="hljs-property">nodeType</span>;<br>  <span class="hljs-keyword">if</span> (isRealElement) &#123;<br>    <span class="hljs-comment">// 渲染</span><br>    <span class="hljs-keyword">const</span> oldElm = oldVnode; <span class="hljs-comment">// div id=&quot;app&quot;</span><br>    <span class="hljs-keyword">const</span> parentElm = oldElm.<span class="hljs-property">parentNode</span>; <span class="hljs-comment">// body</span><br>    <span class="hljs-keyword">let</span> el = <span class="hljs-title function_">createElm</span>(vnode); <span class="hljs-comment">// 创建真实dom</span><br>    parentElm.<span class="hljs-title function_">insertBefore</span>(el, oldElm.<span class="hljs-property">nextSibling</span>); <span class="hljs-comment">// 将创建的真实dom插入到老的dom的后面</span><br>    parentElm.<span class="hljs-title function_">removeChild</span>(oldElm); <span class="hljs-comment">// 删除老的dom</span><br>    <span class="hljs-keyword">return</span> el;  <br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 更新</span><br>    <span class="hljs-title function_">patchVnode</span>(oldVnode, vnode);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">patchVnode</span>(<span class="hljs-params">oldVnode, vnode</span>) &#123;<br>  <span class="hljs-comment">// 1.比较标签是否一致</span><br>  <span class="hljs-keyword">if</span> (oldVnode.<span class="hljs-property">tag</span> !== vnode.<span class="hljs-property">tag</span>) &#123;<br>    <span class="hljs-keyword">return</span> oldVnode.<span class="hljs-property">el</span>.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">replaceChild</span>(<span class="hljs-title function_">createElm</span>(vnode), oldVnode.<span class="hljs-property">el</span>);<br>  &#125;<br>  <span class="hljs-comment">// 2.比较文本，此时tag===undefined</span><br>  <span class="hljs-keyword">if</span> (!oldVnode.<span class="hljs-property">tag</span>) &#123;<br>    <span class="hljs-comment">// 文本</span><br>    <span class="hljs-keyword">if</span> (oldVnode.<span class="hljs-property">text</span> !== vnode.<span class="hljs-property">text</span>) &#123;<br>      <span class="hljs-keyword">return</span> (oldVnode.<span class="hljs-property">el</span>.<span class="hljs-property">textContent</span> = vnode.<span class="hljs-property">text</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 3.标签一致且不是文本，比较属性</span><br>  <span class="hljs-keyword">let</span> el = (vnode.<span class="hljs-property">el</span> = oldVnode.<span class="hljs-property">el</span>); <span class="hljs-comment">// 标签一样，直接复制老的节点</span><br>  <span class="hljs-title function_">updateProperties</span>(vnode, oldVnode.<span class="hljs-property">data</span>); <span class="hljs-comment">// 更新属性</span><br>  <span class="hljs-comment">// 4.比较子节点</span><br>  <span class="hljs-keyword">let</span> oldChildren = oldVnode.<span class="hljs-property">children</span> || [];<br>  <span class="hljs-keyword">let</span> newChildren = vnode.<span class="hljs-property">children</span> || [];<br><br>  <span class="hljs-keyword">if</span> (oldChildren.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; newChildren.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 老的有子节点，新的也有子节点</span><br>    <span class="hljs-title function_">updateChildren</span>(el, oldChildren, newChildren);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldChildren.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 老的有子节点，新的没有</span><br>    el.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&quot;</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newChildren.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 新的有子节点，老的没有</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; newChildren.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">let</span> child = newChildren[i];<br>      el.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title function_">createElm</span>(child));<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 比较两个虚拟节点是否一致</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isSameVnode</span>(<span class="hljs-params">oldVnode, newVnode</span>) &#123;<br>  <span class="hljs-keyword">return</span> (oldVnode.<span class="hljs-property">tag</span> === newVnode.<span class="hljs-property">tag</span> &amp;&amp;<br>    oldVnode.<span class="hljs-property">key</span> === newVnode.<span class="hljs-property">key</span> &amp;&amp;<br>    oldVnode.<span class="hljs-property">type</span> === newVnode.<span class="hljs-property">type</span>)<br>&#125;<br><span class="hljs-comment">// 比较子节点，更新子节点，需要用到双指针</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateChildren</span>(<span class="hljs-params">parent, oldChildren, newChildren</span>) &#123;<br>  <span class="hljs-comment">// 1.创建双指针</span><br>  <span class="hljs-keyword">let</span> oldStartIndex = <span class="hljs-number">0</span>; <span class="hljs-comment">// 老的开始索引</span><br>  <span class="hljs-keyword">let</span> oldStartVnode = oldChildren[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 老的开始节点</span><br>  <span class="hljs-keyword">let</span> oldEndIndex = oldChildren.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; <span class="hljs-comment">// 老的结束索引</span><br>  <span class="hljs-keyword">let</span> oldEndVnode = oldChildren[oldEndIndex]; <span class="hljs-comment">// 老的结束节点</span><br><br>  <span class="hljs-keyword">let</span> newStartIndex = <span class="hljs-number">0</span>; <span class="hljs-comment">// 新的开始索引</span><br>  <span class="hljs-keyword">let</span> newStartVnode = newChildren[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 新的开始节点</span><br>  <span class="hljs-keyword">let</span> newEndIndex = newChildren.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; <span class="hljs-comment">// 新的结束索引</span><br>  <span class="hljs-keyword">let</span> newEndVnode = newChildren[newEndIndex]; <span class="hljs-comment">// 新的结束节点</span><br><br>  <span class="hljs-comment">// 2.创建Ovnode映射表</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">makeIndexByKey</span>(<span class="hljs-params">children</span>) &#123;<br>    <span class="hljs-keyword">let</span> map = &#123;&#125;;<br>    children.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">child, index</span>) =&gt;</span> &#123;<br>      map[child.<span class="hljs-property">key</span>] = index;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> map;<br>  &#125;<br>  <span class="hljs-keyword">let</span> map = <span class="hljs-title function_">makeIndexByKey</span>(oldChildren);<br><br>  <span class="hljs-comment">// 3.循环比较</span><br>  <span class="hljs-keyword">while</span> (oldStartIndex &lt;= oldEndIndex &amp;&amp; newStartIndex &lt;= newEndIndex) &#123;<br>    <span class="hljs-comment">// 1.新的开始节点和老的开始节点比较</span><br>    <span class="hljs-keyword">if</span> (!oldStartVnode) &#123;<br>      <span class="hljs-comment">// 老的开始节点不存在，说明已经被移动走了</span><br>      oldStartVnode = oldChildren[++oldStartIndex];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!oldEndVnode) &#123;<br>      <span class="hljs-comment">// 老的结束节点不存在，说明已经被移动走了</span><br>      oldEndVnode = oldChildren[--oldEndIndex];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isSameVnode</span>(oldStartVnode, newStartVnode)) &#123;<br>      <span class="hljs-comment">// 新的开始节点和老的开始节点一样，直接比较属性和子节点</span><br>      <span class="hljs-title function_">patchVnode</span>(oldStartVnode, newStartVnode);<br>      <span class="hljs-comment">// 移动指针</span><br>      oldStartVnode = oldChildren[++oldStartIndex];<br>      newStartVnode = newChildren[++newStartIndex];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isSameVnode</span>(oldEndVnode, newEndVnode)) &#123;<br>      <span class="hljs-comment">// 新的结束节点和老的结束节点一样，直接比较属性和子节点</span><br>      <span class="hljs-title function_">patchVnode</span>(oldEndVnode, newEndVnode);<br>      oldEndVnode = oldChildren[--oldEndIndex];<br>      newEndVnode = newChildren[--newEndIndex];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isSameVnode</span>(oldStartVnode, newEndVnode)) &#123;<br>      <span class="hljs-comment">// 新的结束节点和老的开始节点一样，直接比较属性和子节点</span><br>      <span class="hljs-title function_">patchVnode</span>(oldStartVnode, newEndVnode);<br>      <span class="hljs-comment">// 将老的开始节点移动到老的结束节点的后面</span><br>      parent.<span class="hljs-title function_">insertBefore</span>(oldStartVnode.<span class="hljs-property">el</span>, oldEndVnode.<span class="hljs-property">el</span>.<span class="hljs-property">nextSibling</span>);<br>      oldStartVnode = oldChildren[++oldStartIndex];<br>      newEndVnode = newChildren[--newEndIndex];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isSameVnode</span>(oldEndVnode, newStartVnode)) &#123;<br>      <span class="hljs-comment">// 新的开始节点和老的结束节点一样，直接比较属性和子节点</span><br>      <span class="hljs-title function_">patchVnode</span>(oldEndVnode, newStartVnode);<br>      <span class="hljs-comment">// 将老的结束节点移动到老的开始节点的前面</span><br>      parent.<span class="hljs-title function_">insertBefore</span>(oldEndVnode.<span class="hljs-property">el</span>, oldStartVnode.<span class="hljs-property">el</span>);<br>      oldEndVnode = oldChildren[--oldEndIndex];<br>      newStartVnode = newChildren[++newStartIndex];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 以上四种情况都不满足，需要遍历查找</span><br>      <span class="hljs-comment">// 1.拿到老节点的key和索引的映射表</span><br>      <span class="hljs-keyword">let</span> moveIndex = map[newStartVnode.<span class="hljs-property">key</span>];<br>      <span class="hljs-keyword">if</span> (moveIndex === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-comment">// 说明新的开始节点在老的节点中不存在，直接插入到老的开始节点的前面</span><br>        parent.<span class="hljs-title function_">insertBefore</span>(<span class="hljs-title function_">createElm</span>(newStartVnode), oldStartVnode.<span class="hljs-property">el</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 说明新的开始节点在老的节点中存在，直接移动到老的开始节点的前面</span><br>        <span class="hljs-keyword">let</span> moveVnode = oldChildren[moveIndex];<br>        oldChildren[moveIndex] = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// 将移动的节点置为undefined</span><br>        parent.<span class="hljs-title function_">insertBefore</span>(moveVnode.<span class="hljs-property">el</span>, oldStartVnode.<span class="hljs-property">el</span>);<br>        <span class="hljs-title function_">patchVnode</span>(moveVnode, newStartVnode); <span class="hljs-comment">// 比较属性和子节点</span><br>      &#125;<br>      newStartVnode = newChildren[++newStartIndex];<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 4.循环结束后，老的还有剩余，新的没有，说明需要删除老的节点</span><br>  <span class="hljs-keyword">if</span> (oldStartIndex &lt;= oldEndIndex) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = oldStartIndex; i &lt;= oldEndIndex; i++) &#123;<br>      <span class="hljs-keyword">let</span> child = oldChildren[i];<br>      <span class="hljs-keyword">if</span> (child) &#123;<br>        parent.<span class="hljs-title function_">removeChild</span>(child.<span class="hljs-property">el</span>);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 5.循环结束后，新的还有剩余，老的没有，说明需要新增新的节点</span><br>  <span class="hljs-keyword">if</span> (newStartIndex &lt;= newEndIndex) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = newStartIndex; i &lt;= newEndIndex; i++) &#123;<br>      <span class="hljs-comment">// parent.appendChild(createElm(newChildren[i]));</span><br>      <span class="hljs-comment">// 将新的节点插入到老的结束节点的后面</span><br>      <span class="hljs-keyword">let</span> ele =<br>        newChildren[newEndIndex + <span class="hljs-number">1</span>] == <span class="hljs-literal">null</span><br>          ? <span class="hljs-literal">null</span><br>          : newChildren[newEndIndex + <span class="hljs-number">1</span>].<span class="hljs-property">el</span>;<br>      parent.<span class="hljs-title function_">insertBefore</span>(<span class="hljs-title function_">createElm</span>(newChildren[i]), ele);<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 更新属性</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateProperties</span>(<span class="hljs-params">vnode, oldProps = &#123;&#125;</span>) &#123;<br>  <span class="hljs-keyword">let</span> newProps = vnode.<span class="hljs-property">data</span> || &#123;&#125;;<br>  <span class="hljs-keyword">let</span> el = vnode.<span class="hljs-property">el</span>;<br>  <span class="hljs-comment">// 1.遍历老的属性</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> oldProps) &#123;<br>    <span class="hljs-comment">// 如果老的不存在新的属性，删除</span><br>    <span class="hljs-keyword">if</span> (!newProps[key]) &#123;<br>      el.<span class="hljs-title function_">removeAttribute</span>(key);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 2.样式处理</span><br>  <span class="hljs-keyword">let</span> newStyle = newProps.<span class="hljs-property">style</span> || &#123;&#125;;<br>  <span class="hljs-keyword">let</span> oldStyle = oldProps.<span class="hljs-property">style</span> || &#123;&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> oldStyle) &#123;<br>    <span class="hljs-comment">// 如果老的不存在新的样式，删除</span><br>    <span class="hljs-keyword">if</span> (!newStyle[key]) &#123;<br>      <span class="hljs-comment">// js中删除样式，直接设置为空或者null即可,注意undefined不管用</span><br>      el.<span class="hljs-property">style</span>[key] = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 3.遍历新的属性</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> newProps) &#123;<br>    <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&quot;style&quot;</span>) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> styleName <span class="hljs-keyword">in</span> newProps[key]) &#123;<br>        el.<span class="hljs-property">style</span>[styleName] = newProps[key][styleName];<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&quot;class&quot;</span>) &#123;<br>      el.<span class="hljs-property">className</span> = newProps[key];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      el.<span class="hljs-title function_">setAttribute</span>(key, newProps[key]);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">createElm</span>(<span class="hljs-params">vnode</span>) &#123;<br>  <span class="hljs-keyword">let</span> &#123; tag, children, key, data, text &#125; = vnode;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> tag === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    <span class="hljs-comment">// 元素</span><br>    vnode.<span class="hljs-property">el</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(tag); <span class="hljs-comment">// 创建元素</span><br>    <span class="hljs-title function_">updateProperties</span>(vnode); <span class="hljs-comment">// 更新属性</span><br>    children.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">child</span>) =&gt;</span> &#123;<br>      vnode.<span class="hljs-property">el</span>.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title function_">createElm</span>(child)); <span class="hljs-comment">// 递归渲染子节点</span><br>    &#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 文本</span><br>    vnode.<span class="hljs-property">el</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(text);<br>  &#125;<br>  <span class="hljs-keyword">return</span> vnode.<span class="hljs-property">el</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面那么长的代码，我们来分步剖析。<br><img src="images/diff.jpg" width="50%"/></p><p>vue仅在同级的vnode间做diff，递归地进行同级vnode的diff，最终实现整个DOM树的更新。因为在前端中，很少会跨越层级移动dom。</p><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (oldVnode.<span class="hljs-property">tag</span> !== vnode.<span class="hljs-property">tag</span>) &#123;<br> <span class="hljs-keyword">return</span> oldVnode.<span class="hljs-property">el</span>.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">replaceChild</span>(<span class="hljs-title function_">createElm</span>(vnode), oldVnode.<span class="hljs-property">el</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>先比较tag是否一致，不一致就<code>不会再去比较子节点</code>了，直接将旧节点替换成新节点(<code>createElm(vnode)</code>)</p><h4 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 此时tag===undefined</span><br><span class="hljs-keyword">if</span> (!oldVnode.<span class="hljs-property">tag</span>) &#123;<br>  <span class="hljs-comment">// 文本</span><br>  <span class="hljs-keyword">if</span> (oldVnode.<span class="hljs-property">text</span> !== vnode.<span class="hljs-property">text</span>) &#123;<br>    <span class="hljs-keyword">return</span> (oldVnode.<span class="hljs-property">el</span>.<span class="hljs-property">textContent</span> = vnode.<span class="hljs-property">text</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后没有tag，肯定是文本，判断文本是否一致，<code>不一致再进行更新</code>（<code>直接将旧节点的textContent赋值为vdom的text</code>）</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> el = (vnode.<span class="hljs-property">el</span> = oldVnode.<span class="hljs-property">el</span>); <span class="hljs-comment">// 标签一样，直接复制老的节点,不用重新创建了</span><br><span class="hljs-title function_">updateProperties</span>(vnode, oldVnode.<span class="hljs-property">data</span>); <span class="hljs-comment">// 更新属性</span><br></code></pre></td></tr></table></figure><p>如果标签一致且不是文本，就比较属性。因为标签一致，所以直接复制（<code>vnode.el = oldVnode.el</code>）老的节点,不用重新创建了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 更新属性</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateProperties</span>(<span class="hljs-params">vnode, oldProps = &#123;&#125;</span>) &#123;<br>  <span class="hljs-keyword">let</span> newProps = vnode.<span class="hljs-property">data</span> || &#123;&#125;;<br>  <span class="hljs-keyword">let</span> el = vnode.<span class="hljs-property">el</span>;<br>  <span class="hljs-comment">// 1.遍历老的属性</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> oldProps) &#123;<br>    <span class="hljs-comment">// 如果老的不存在新的属性，删除</span><br>    <span class="hljs-keyword">if</span> (!newProps[key]) &#123;<br>      el.<span class="hljs-title function_">removeAttribute</span>(key);<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 2.样式处理</span><br>  <span class="hljs-keyword">let</span> newStyle = newProps.<span class="hljs-property">style</span> || &#123;&#125;;<br>  <span class="hljs-keyword">let</span> oldStyle = oldProps.<span class="hljs-property">style</span> || &#123;&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> oldStyle) &#123;<br>    <span class="hljs-comment">// 如果老的不存在新的样式，删除</span><br>    <span class="hljs-keyword">if</span> (!newStyle[key]) &#123;<br>      <span class="hljs-comment">// js中删除样式，直接设置为空或者null即可,注意undefined不管用</span><br>      el.<span class="hljs-property">style</span>[key] = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 3.遍历新的属性</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> newProps) &#123;<br>    <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&quot;style&quot;</span>) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> styleName <span class="hljs-keyword">in</span> newProps[key]) &#123;<br>        el.<span class="hljs-property">style</span>[styleName] = newProps[key][styleName];<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key === <span class="hljs-string">&quot;class&quot;</span>) &#123;<br>      el.<span class="hljs-property">className</span> = newProps[key];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      el.<span class="hljs-title function_">setAttribute</span>(key, newProps[key]);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>更新原则就是：</p><ul><li>遍历老的属性，新的不存在就删除</li><li>遍历新的属性，老的不存在就增加</li><li>style也要按上述原则进行遍历</li><li>class直接覆盖<h4 id="子节点children-1"><a href="#子节点children-1" class="headerlink" title="子节点children-1"></a>子节点children-1</h4></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 4.比较子节点</span><br>  <span class="hljs-keyword">let</span> oldChildren = oldVnode.<span class="hljs-property">children</span> || [];<br>  <span class="hljs-keyword">let</span> newChildren = vnode.<span class="hljs-property">children</span> || [];<br><br>  <span class="hljs-keyword">if</span> (oldChildren.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; newChildren.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 老的有子节点，新的也有子节点</span><br>    <span class="hljs-title function_">updateChildren</span>(el, oldChildren, newChildren);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldChildren.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 老的有子节点，新的没有</span><br>    el.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&quot;</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (newChildren.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 新的有子节点，老的没有</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; newChildren.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">let</span> child = newChildren[i];<br>      el.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title function_">createElm</span>(child));<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>最后比较children,比较原则就是：</p><ul><li>老的有子节点，新的也有子节点，执行updateChildren对比（核心，比较复杂，下面单独讲）</li><li>老的有子节点，新的没有，老的直接清空(<code> el.innerHTML = &quot;&quot;</code>)</li><li>新的子节点，老的没有，遍历新的进行新增</li></ul><h4 id="子节点children-2-updateChildren"><a href="#子节点children-2-updateChildren" class="headerlink" title="子节点children-2(updateChildren)"></a>子节点children-2(updateChildren)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 比较两个虚拟节点是否一致</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isSameVnode</span>(<span class="hljs-params">oldVnode, newVnode</span>) &#123;<br>  <span class="hljs-keyword">return</span> oldVnode.<span class="hljs-property">tag</span> === newVnode.<span class="hljs-property">tag</span> &amp;&amp; oldVnode.<span class="hljs-property">key</span> === newVnode.<span class="hljs-property">key</span> &amp;&amp; oldVnode.<span class="hljs-property">type</span> === newVnode.<span class="hljs-property">type</span>;<br>&#125;<br><span class="hljs-comment">// 比较子节点，更新子节点，需要用到双指针</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateChildren</span>(<span class="hljs-params">parent, oldChildren, newChildren</span>) &#123;<br>  <span class="hljs-comment">// 1.创建双指针</span><br>  <span class="hljs-keyword">let</span> oldStartIndex = <span class="hljs-number">0</span>; <span class="hljs-comment">// 老的开始索引</span><br>  <span class="hljs-keyword">let</span> oldStartVnode = oldChildren[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 老的开始节点</span><br>  <span class="hljs-keyword">let</span> oldEndIndex = oldChildren.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; <span class="hljs-comment">// 老的结束索引</span><br>  <span class="hljs-keyword">let</span> oldEndVnode = oldChildren[oldEndIndex]; <span class="hljs-comment">// 老的结束节点</span><br><br>  <span class="hljs-keyword">let</span> newStartIndex = <span class="hljs-number">0</span>; <span class="hljs-comment">// 新的开始索引</span><br>  <span class="hljs-keyword">let</span> newStartVnode = newChildren[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 新的开始节点</span><br>  <span class="hljs-keyword">let</span> newEndIndex = newChildren.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; <span class="hljs-comment">// 新的结束索引</span><br>  <span class="hljs-keyword">let</span> newEndVnode = newChildren[newEndIndex]; <span class="hljs-comment">// 新的结束节点</span><br><br>  <span class="hljs-comment">// 2.创建Ovnode映射表</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">makeIndexByKey</span>(<span class="hljs-params">children</span>) &#123;<br>    <span class="hljs-keyword">let</span> map = &#123;&#125;;<br>    children.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">child, index</span>) =&gt;</span> &#123;<br>      map[child.<span class="hljs-property">key</span>] = index;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> map;<br>  &#125;<br>  <span class="hljs-keyword">let</span> map = <span class="hljs-title function_">makeIndexByKey</span>(oldChildren);<br><br>  <span class="hljs-comment">// 3.循环比较</span><br>  <span class="hljs-keyword">while</span> (oldStartIndex &lt;= oldEndIndex &amp;&amp; newStartIndex &lt;= newEndIndex) &#123;<br>    <span class="hljs-comment">// 1.新的开始节点和老的开始节点比较</span><br>    <span class="hljs-keyword">if</span> (!oldStartVnode) &#123;<br>      <span class="hljs-comment">// 老的开始节点不存在，说明已经被移动走了</span><br>      oldStartVnode = oldChildren[++oldStartIndex];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!oldEndVnode) &#123;<br>      <span class="hljs-comment">// 老的结束节点不存在，说明已经被移动走了</span><br>      oldEndVnode = oldChildren[--oldEndIndex];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isSameVnode</span>(oldStartVnode, newStartVnode)) &#123;<br>      <span class="hljs-comment">// 新的开始节点和老的开始节点一样，直接比较属性和子节点</span><br>      <span class="hljs-title function_">patchVnode</span>(oldStartVnode, newStartVnode);<br>      <span class="hljs-comment">// 移动指针</span><br>      oldStartVnode = oldChildren[++oldStartIndex];<br>      newStartVnode = newChildren[++newStartIndex];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isSameVnode</span>(oldEndVnode, newEndVnode)) &#123;<br>      <span class="hljs-comment">// 新的结束节点和老的结束节点一样，直接比较属性和子节点</span><br>      <span class="hljs-title function_">patchVnode</span>(oldEndVnode, newEndVnode);<br>      oldEndVnode = oldChildren[--oldEndIndex];<br>      newEndVnode = newChildren[--newEndIndex];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isSameVnode</span>(oldStartVnode, newEndVnode)) &#123;<br>      <span class="hljs-comment">// 新的结束节点和老的开始节点一样，直接比较属性和子节点</span><br>      <span class="hljs-title function_">patchVnode</span>(oldStartVnode, newEndVnode);<br>      <span class="hljs-comment">// 将老的开始节点移动到老的结束节点的后面</span><br>      parent.<span class="hljs-title function_">insertBefore</span>(oldStartVnode.<span class="hljs-property">el</span>, oldEndVnode.<span class="hljs-property">el</span>.<span class="hljs-property">nextSibling</span>);<br>      oldStartVnode = oldChildren[++oldStartIndex];<br>      newEndVnode = newChildren[--newEndIndex];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isSameVnode</span>(oldEndVnode, newStartVnode)) &#123;<br>      <span class="hljs-comment">// 新的开始节点和老的结束节点一样，直接比较属性和子节点</span><br>      <span class="hljs-title function_">patchVnode</span>(oldEndVnode, newStartVnode);<br>      <span class="hljs-comment">// 将老的结束节点移动到老的开始节点的前面</span><br>      parent.<span class="hljs-title function_">insertBefore</span>(oldEndVnode.<span class="hljs-property">el</span>, oldStartVnode.<span class="hljs-property">el</span>);<br>      oldEndVnode = oldChildren[--oldEndIndex];<br>      newStartVnode = newChildren[++newStartIndex];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 以上四种情况都不满足，需要暴力比对遍历查找</span><br>      <span class="hljs-comment">// 1.拿到老节点的key和索引的映射表</span><br>      <span class="hljs-keyword">let</span> moveIndex = map[newStartVnode.<span class="hljs-property">key</span>];<br>      <span class="hljs-keyword">if</span> (moveIndex === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-comment">// 说明新的开始节点在老的节点中不存在，直接插入到老的开始节点的前面</span><br>        parent.<span class="hljs-title function_">insertBefore</span>(<span class="hljs-title function_">createElm</span>(newStartVnode), oldStartVnode.<span class="hljs-property">el</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 说明新的开始节点在老的节点中存在，直接移动到老的开始节点的前面</span><br>        <span class="hljs-keyword">let</span> moveVnode = oldChildren[moveIndex];<br>        oldChildren[moveIndex] = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// 将移动的节点置为undefined</span><br>        parent.<span class="hljs-title function_">insertBefore</span>(moveVnode.<span class="hljs-property">el</span>, oldStartVnode.<span class="hljs-property">el</span>);<br>        <span class="hljs-title function_">patchVnode</span>(moveVnode, newStartVnode); <span class="hljs-comment">// 比较属性和子节点</span><br>      &#125;<br>      newStartVnode = newChildren[++newStartIndex];<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 4.循环结束后，老的还有剩余，新的没有，说明需要删除老的节点</span><br>  <span class="hljs-keyword">if</span> (oldStartIndex &lt;= oldEndIndex) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = oldStartIndex; i &lt;= oldEndIndex; i++) &#123;<br>      <span class="hljs-keyword">let</span> child = oldChildren[i];<br>      <span class="hljs-keyword">if</span> (child) &#123;<br>        parent.<span class="hljs-title function_">removeChild</span>(child.<span class="hljs-property">el</span>);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 5.循环结束后，新的还有剩余，老的没有，说明需要新增新的节点</span><br>  <span class="hljs-keyword">if</span> (newStartIndex &lt;= newEndIndex) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = newStartIndex; i &lt;= newEndIndex; i++) &#123;<br>      <span class="hljs-comment">// parent.appendChild(createElm(newChildren[i]));</span><br>      <span class="hljs-comment">// 将新的节点插入到老的结束节点的后面</span><br>      <span class="hljs-keyword">let</span> ele =<br>        newChildren[newEndIndex + <span class="hljs-number">1</span>] == <span class="hljs-literal">null</span><br>          ? <span class="hljs-literal">null</span><br>          : newChildren[newEndIndex + <span class="hljs-number">1</span>].<span class="hljs-property">el</span>;<br>      parent.<span class="hljs-title function_">insertBefore</span>(<span class="hljs-title function_">createElm</span>(newChildren[i]), ele);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在讲解之前，先学习下上面代码中的<code>isSameVnode</code></p><h6 id="isSameVnode"><a href="#isSameVnode" class="headerlink" title="isSameVnode"></a>isSameVnode</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 比较两个虚拟节点是否一致</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isSameVnode</span>(<span class="hljs-params">oldVnode, newVnode</span>) &#123;<br>  <span class="hljs-keyword">return</span> oldVnode.<span class="hljs-property">tag</span> === newVnode.<span class="hljs-property">tag</span> &amp;&amp; oldVnode.<span class="hljs-property">key</span> === newVnode.<span class="hljs-property">key</span> &amp;&amp; oldVnode.<span class="hljs-property">type</span> === newVnode.<span class="hljs-property">type</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此方法用来比较两个虚拟节点是否一致。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 不一致，tag不一样 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <br><span class="hljs-comment">&lt;!-- 一致，tag一样、key都为undefined,undefined===undefined --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br><span class="hljs-comment">&lt;!-- 不一致，tag一样、key不一样 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 不一致，tag一样、key一样、但type不一样 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span> <br><span class="hljs-comment">&lt;!-- 一致，tag一样、key一样、type一样 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="insertBefore语法"><a href="#insertBefore语法" class="headerlink" title="insertBefore语法"></a>insertBefore语法</h6><p>详见<a href="https://www.w3school.com.cn/jsref/met_node_insertbefore.asp">w3c文档-insertBefore</a></p><p><code>Node.inserBefore(a,b)</code></p><ul><li>表示在Node的子节点b前面，如果a节点是通过<code>document.createElement</code>新创建的，此时表示<strong>插入</strong>a节点到b节点前面。</li><li>如果a节点不是新创建的，本来就是Node的子节点，此时表示<strong>移动</strong>a节点到b节点前面。</li><li>如果b为null，表示a插入/移动到末尾。</li></ul><h5 id="updateChildren"><a href="#updateChildren" class="headerlink" title="updateChildren"></a>updateChildren</h5><p>上面<code>updateChildren</code>方法比较复杂，我们来举个例子配合在网上找的图进行讲解：</p><p>假设我们现在的dom是 <code>a b c d e f</code>,所以对应的vdom也是<code>a b c d e f</code>，更新后的vdom是 <code>b f g</code>，此时我们要进行比对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a b c d e f<br>b f g<br></code></pre></td></tr></table></figure><h6 id="第1步"><a href="#第1步" class="headerlink" title="第1步"></a>第1步</h6><img src="images/patch1-1.jpg" width="50%"/><ul><li>该方法采用双指针模式进行新旧vdom比对，首先定义4个变量，Ovdom头尾双指针index以及指针对应的头尾vdom；定义4个变量，Nvdom头尾双指针index以及指针对应的头尾vdom</li><li>第一步：进行<code>isSameVnode</code>比对，即有<code>4种对比，头头(a与b)，尾尾(f与g)，头尾(a与g)，尾头(f与b)</code>,发现不相等，继续</li><li>第二步：将Ovode遍历，生成一个对象映射表（key:index）,<br>判断<code>newStartVnode.key</code>在映射表中有，说明在旧节点找到了，此时就开始操作真实dom了<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">let</span> moveVnode = oldChildren[moveIndex];<br>    oldChildren[moveIndex] = <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// 将vdom移动过的节点置为undefined</span><br>    parent.<span class="hljs-title function_">insertBefore</span>(moveVnode.<span class="hljs-property">el</span>, oldStartVnode.<span class="hljs-property">el</span>); <span class="hljs-comment">// 移动dom到Ovdom开始指针对应的节点前面</span><br>    <span class="hljs-title function_">patchVnode</span>(moveVnode, newStartVnode); <span class="hljs-comment">// 比较属性和子节点</span><br>&#125;<br> newStartVnode = newChildren[++newStartIndex]; <span class="hljs-comment">// Nvdom第一个节点已经结束，将Nvdom指针往后移动，然后重复循环前面步骤</span><br></code></pre></td></tr></table></figure>此时结果如下<img src="images/patch1-2.jpg" width="50%"/><img src="images/patch1-3.jpg" width="50%"/></li></ul><h6 id="第2步"><a href="#第2步" class="headerlink" title="第2步"></a>第2步</h6><img src="images/patch2-1.jpg" width="50%"/><h6 id="第3步"><a href="#第3步" class="headerlink" title="第3步"></a>第3步</h6><img src="images/dom5.webp" width="50%"/><h6 id="第4步"><a href="#第4步" class="headerlink" title="第4步"></a>第4步</h6><img src="images/dom7.webp" width="50%"/><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="通过映射表对比进行移动过后，Ovdom为什么要设置为undefined，而前4种对比进行移动不需要"><a href="#通过映射表对比进行移动过后，Ovdom为什么要设置为undefined，而前4种对比进行移动不需要" class="headerlink" title="通过映射表对比进行移动过后，Ovdom为什么要设置为undefined，而前4种对比进行移动不需要?"></a>通过映射表对比进行移动过后，Ovdom为什么要设置为undefined，而前4种对比进行移动不需要?</h3><p>因为对比主要依靠双指针进行移动收缩范围，<strong>映射表对比要设置为undefined</strong>，是因为此时OvdomIndex指针并没有移动，后面循环还会从这里开始，所以改为undefined,会判断不存在直接跳过。<br><strong>前四种不需要</strong>，是因为此时OvdomIndex指针会进行移动，范围就会收缩，后面循环只会在指针内进行，所以设不设置已经无意义，反正不会走进去了（<code>while(oldStartIndex &lt;= oldEndIndex &amp;&amp; newStartIndex &lt;= newEndIndex)</code>）。</p><h3 id="为什要加key"><a href="#为什要加key" class="headerlink" title="为什要加key?"></a>为什要加key?</h3><h4 id="key的作用"><a href="#key的作用" class="headerlink" title="key的作用"></a>key的作用</h4><p>经常上面的理解,我们可以知道vue更新时候,使用key，diff算法能更加准确和快捷(最小化元素移动的算法).如果不使用key,vue就会<strong>就地更新选择复用节点</strong>,可能会产生一些bug.<br>举个例子:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.7.14/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span>1:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else</span>&gt;</span>2:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;a=false&quot;</span>&gt;</span>切换<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">a</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>我们在input上输入内容,切换按钮,发现input的内容并未清除.原因很简单,因为没有key, vue判断标签一样,所以自然不会更新.</p><img src="images/key1.gif" /><h4 id="使用index作为key产生的问题"><a href="#使用index作为key产生的问题" class="headerlink" title="使用index作为key产生的问题"></a>使用index作为key产生的问题</h4><p>从代码的规范性来讲：基本不会考虑用index 做为key；但在实际业务开发过程，也没法强制要求后端同事返回的列表元素携带唯一的id值。</p><ul><li>对于一些数据，仅用于渲染表展示的，使用index作为key一般是没有任何问题的</li><li>如果在列表中存在输入类的表单dom这种，可能就会产生错误DOM更新，界面也会有问题</li><li>有新增，删除，插入，排序等破坏顺序的情况，因为用的index作为key, index变化,导致key也变化, 最终会产生没有必要的对比,降低效率,甚至产生一些问题.</li><li>如果列表中是纯文本节点不会有问题,因为也会对比替换,只不过和上面第三点描述的一样, 产生了没有必要的对比.</li><li>在使用非文本节点的组件，只要你的组件在遍历渲染时候没有依赖于响应式的props，那么此时对于列表的删除操作会导致视图错乱,有依赖响应式的props，用key做index就不会有问题.</li><li>可不可以使用随机数作为key呢？答案自然是不能够。因为key值无论是删除还是反转，根本就不能找到相同的key，diff算法就毫无意义了，压根没有复用性可言。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.7.14/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in data&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;change&quot;</span>&gt;</span>change<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">item</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">template</span>: <span class="hljs-string">`&lt;div&gt;&#123;&#123;window.Math.random()&#125;&#125;&lt;/div&gt;`</span>,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">data</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>],</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//删除数据</span></span><br><span class="language-javascript">        <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>上面代码是删除的第一项,但发现每次都是最后一个被删掉.</p><img src="images/key2.gif" /><p>TODO: 后面学习到组件对比会讲解.</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/225105999">https://zhuanlan.zhihu.com/p/225105999</a>  </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue2源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>8.watch</title>
      <link href="/ypf-blog/2023/08/04/vue2%E6%BA%90%E7%A0%81/8.watch/"/>
      <url>/ypf-blog/2023/08/04/vue2%E6%BA%90%E7%A0%81/8.watch/</url>
      
        <content type="html"><![CDATA[<h2 id="watch的用法"><a href="#watch的用法" class="headerlink" title="watch的用法"></a>watch的用法</h2><p>我们先看下watch的几种用法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.7.14/vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;script src=&quot;./dist/vue.js&quot;&gt;&lt;/script&gt;  --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 12px; color: red&quot;</span>&gt;</span>&#123;&#123;a&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">a</span>: &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">handler</span>(<span class="hljs-params">newValue, oldValue</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;watch: 对象调用：&quot;</span>, newValue, oldValue);</span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      vm.<span class="hljs-property">a</span> = <span class="hljs-number">2</span>;</span><br><span class="language-javascript">    &#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>我们通常使用对象形式监听数据变化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-attr">watch</span>: &#123;<br>      <span class="hljs-attr">a</span>: &#123;<br>        <span class="hljs-title function_">handler</span>(<span class="hljs-params">newValue, oldValue</span>) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;watch: 对象调用：&quot;</span>, newValue, oldValue);<br>        &#125;,<br>      &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><p>如果不需要immediate等属性，可以改成如下形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>: &#123;<br> <span class="hljs-title function_">a</span>(<span class="hljs-params">newValue, oldValue</span>) &#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;watch: 方法调用：&quot;</span>, newValue, oldValue);<br> &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>我们也可以使用数组的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-attr">a</span>: [<br>      <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;watch: 数组调用：&quot;</span>, newValue, oldValue);<br>      &#125;,<br>      <span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;watch: 数组调用：&quot;</span>, newValue, oldValue);<br>      &#125;,<br>    ],<br>&#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">watch</span>: &#123;<br>      <span class="hljs-attr">a</span>: [<br>          &#123;<br>            <span class="hljs-title function_">handler</span>(<span class="hljs-params">newValue, oldValue</span>) &#123;<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;watch: 对象调用：&quot;</span>, newValue, oldValue);<br>            &#125;,<br>            <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>,<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title function_">handler</span>(<span class="hljs-params">newValue, oldValue</span>) &#123;<br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;watch: 对象调用：&quot;</span>, newValue, oldValue);<br>            &#125;,<br>            <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>,<br>          &#125;,<br>      ],<br>&#125;<br></code></pre></td></tr></table></figure><p>数据变化时，上面数组里面的监听方法会依次同时执行。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br>   <span class="hljs-title function_">aa</span>(<span class="hljs-params">newValue, oldValue</span>) &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;watch: methods方法调用：&quot;</span>, newValue, oldValue);<br>   &#125;,<br> &#125;,<br> <span class="hljs-attr">watch</span>: &#123;<br>   <span class="hljs-attr">a</span>: <span class="hljs-string">&quot;aa&quot;</span>,<br> &#125;,<br></code></pre></td></tr></table></figure><p>我们也可以把函数放到methods中来监听，但是此种写法不能配置immediate等属性，所以一般不用。</p><h3 id="实例监听"><a href="#实例监听" class="headerlink" title="实例监听"></a>实例监听</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    &#125;;<br>  &#125;,<br>&#125;)<br>vm.$watch(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">newValue, oldValue</span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newValue, oldValue,<span class="hljs-number">1</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>我们可以直接通过实例原型上的$watch方法监听。</p><h2 id="watch实现原理"><a href="#watch实现原理" class="headerlink" title="watch实现原理"></a>watch实现原理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs js">src/state.<span class="hljs-property">js</span><br><span class="hljs-keyword">import</span> &#123; observe &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./observer/index&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; nextTick &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./utils/next-tick&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Watcher</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./observer/watcher&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">initState</span>(<span class="hljs-params">vm</span>) &#123;<br>  <span class="hljs-keyword">const</span> opts = vm.<span class="hljs-property">$options</span>;<br>  <span class="hljs-keyword">if</span> (opts.<span class="hljs-property">props</span>) &#123;<br>    <span class="hljs-title function_">initProps</span>(vm);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (opts.<span class="hljs-property">methods</span>) &#123;<br>    <span class="hljs-title function_">initMethods</span>(vm);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (opts.<span class="hljs-property">data</span>) &#123;<br>    <span class="hljs-title function_">initData</span>(vm);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (opts.<span class="hljs-property">computed</span>) &#123;<br>    <span class="hljs-title function_">initComputed</span>(vm);<br>  &#125;<br>  <span class="hljs-comment">// 1.增加初始化watch</span><br>  <span class="hljs-keyword">if</span> (opts.<span class="hljs-property">watch</span>) &#123;<br>    <span class="hljs-title function_">initWatch</span>(vm);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 2.增加watch方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">initWatch</span>(<span class="hljs-params">vm</span>) &#123;<br>  <span class="hljs-keyword">let</span> watch = vm.<span class="hljs-property">$options</span>.<span class="hljs-property">watch</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> watch) &#123;<br>    <span class="hljs-keyword">const</span> handler = watch[key]; <span class="hljs-comment">// handler可能是数组，字符串，对象，函数</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(handler)) &#123;<br>      <span class="hljs-comment">// 数组,[handler1,handler2,...]</span><br>      handler.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">handle</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">createWatcher</span>(vm, key, handle);<br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 字符串，对象，函数</span><br>      <span class="hljs-comment">// 创建一个方法处理handler</span><br>      <span class="hljs-title function_">createWatcher</span>(vm, key, handler);<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 3.增加watcher生成器</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createWatcher</span>(<span class="hljs-params">vm, exprOrFn, handler, options</span>) &#123;<br>  <span class="hljs-comment">// 如果是对象，取出handler</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> handler === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>    options = handler; <span class="hljs-comment">// 因为是对象，所以直接赋值给options配置</span><br>    handler = handler.<span class="hljs-property">handler</span>;<br>  &#125;<br>  <span class="hljs-comment">// 如果是字符串，取出handler</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> handler === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    handler = vm[handler];<br>  &#125;<br>  <span class="hljs-comment">// 函数，最终调用$watch方法来实现</span><br>  <span class="hljs-keyword">return</span> vm.$watch(exprOrFn, handler, options);<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">stateMixin</span>(<span class="hljs-params">Vue</span>) &#123;<br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$nextTick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">cb</span>) &#123;<br>    <span class="hljs-title function_">nextTick</span>(cb);<br>  &#125;;<br>  <span class="hljs-comment">// 4.Vue实例绑定$watch方法</span><br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$watch</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">exprOrFn, handler, options = &#123;&#125;</span>) &#123;<br>    <span class="hljs-comment">// 渲染走的是watcher，只不过此时目的是渲染，watch也走watcher，只不过此时目的是监听</span><br>    <span class="hljs-comment">// 数据应该依赖这个watcher，数据变化后应该让watcher从新执行</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(exprOrFn,<span class="hljs-keyword">typeof</span> exprOrFn,<span class="hljs-string">&#x27;exprOrFn&#x27;</span>);<br>    <br>    <span class="hljs-keyword">const</span> watcher = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Watcher</span>(<span class="hljs-variable language_">this</span>, exprOrFn, handler, &#123;<br>      ...options,<br>      <span class="hljs-attr">user</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 标识是用户watcher</span><br>    &#125;);<br>    <span class="hljs-comment">// 如果用户传入了immediate，应该立即执行</span><br>    <span class="hljs-keyword">if</span> (options.<span class="hljs-property">immediate</span>) &#123;<br>      <span class="hljs-comment">// handler.call(this);</span><br>      handler.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, watcher.<span class="hljs-property">value</span>);<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js">src/observer/watcher.<span class="hljs-property">js</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Watcher</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">vm, exprOrFn, cb, options</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span> = vm; <span class="hljs-comment">// vm实例</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">exprOrFn</span> = exprOrFn; <span class="hljs-comment">// vm._update(vm._render())  渲染函数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span> = cb; <span class="hljs-comment">// 回调函数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = options;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> = options.<span class="hljs-property">user</span>; <span class="hljs-comment">// 标识是用户watcher</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">deps</span> = []; <span class="hljs-comment">// watcher记录有多少dep依赖</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">depsId</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(); <span class="hljs-comment">// dep去重</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = id++; <span class="hljs-comment">// 每次产生一个watcher都有一个唯一标识，即new Watcher的次数</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> exprOrFn === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">getter</span> = exprOrFn; <span class="hljs-comment">// 用来更新视图</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 5.exprOrFn此时是watch的监听key</span><br>      <span class="hljs-comment">// 字符串变成函数</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">getter</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 当去当前实例上取值时，才会触发依赖收集</span><br>        <span class="hljs-keyword">let</span> path = exprOrFn.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;.&quot;</span>); <span class="hljs-comment">// b.b.b</span><br>        <span class="hljs-keyword">let</span> obj = vm;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; path.<span class="hljs-property">length</span>; i++) &#123;<br>          obj = obj[path[i]];<br>        &#125;<br>        <span class="hljs-keyword">return</span> obj;<br>      &#125;;<br>    &#125;<br>    <span class="hljs-comment">// this.get();</span><br>    <span class="hljs-comment">// 6.this.value存储当前值</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>(); <span class="hljs-comment">// 保存watcher的上一次结果</span><br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">pushTarget</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// 给dep添加watcher</span><br>      <span class="hljs-keyword">const</span> value = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getter</span>(); <span class="hljs-comment">// 渲染页面 vm._update(vm._render())</span><br>      <span class="hljs-title function_">popTarget</span>(); <span class="hljs-comment">// 给dep移除watcher</span><br>      <span class="hljs-keyword">return</span> value; <span class="hljs-comment">// 7.将当前值返回出去</span><br>    &#125;<br>    ...<br>    <br>    <span class="hljs-comment">// 7.在数据更新时会走到这里</span><br>    <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// this.get();</span><br>      <span class="hljs-keyword">let</span> value = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>(); <span class="hljs-comment">// 新值</span><br>      <span class="hljs-keyword">let</span> oldValue = <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>; <span class="hljs-comment">// 旧值</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value; <span class="hljs-comment">// 更新旧值</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>) &#123;<br>        <span class="hljs-comment">// 用户handler</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span>, value, oldValue);<br>      &#125;<br>    &#125;<br>  &#125;<br><br></code></pre></td></tr></table></figure><p>此时我们就完成了watch。接下来我们总结下流程</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>我们在initState进行initWatch,该方法里面判断是数组，就遍历然后调用<code>createWatcher</code>，不是数组直接调用<code>createWatcher进行格式化</code>。</li><li>createWatcher方法的目的是取出data、handler、options，最终调用<code>vm.$watch(exprOrFn, handler, options)</code>,所以<code>createWatcher</code>判断了<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createWatcher</span>(<span class="hljs-params">vm, exprOrFn, handler, options</span>) &#123;<br>  <span class="hljs-comment">// 如果是对象，取出handler</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> handler === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>    options = handler; <span class="hljs-comment">// 因为是对象，所以直接赋值给options配置</span><br>    handler = handler.<span class="hljs-property">handler</span>;<br>  &#125;<br>  <span class="hljs-comment">// 如果是字符串，取出handler</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> handler === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>    handler = vm[handler];<br>  &#125;<br>  <span class="hljs-comment">// 函数，最终调用$watch方法来实现</span><br>  <span class="hljs-keyword">return</span> vm.$watch(exprOrFn, handler, options);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>在vue原型上绑定$watch方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">stateMixin</span>(<span class="hljs-params">Vue</span>) &#123;<br>  ...<br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$watch</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">exprOrFn, handler, options = &#123;&#125;</span>) &#123;<br>    <span class="hljs-comment">// 渲染走渲染的watcher，watch走watch的watcher</span><br>    <span class="hljs-comment">// 数据应该依赖这个watcher，数据变化后应该让watcher从新执行</span><br>    <span class="hljs-keyword">const</span> watcher = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Watcher</span>(<span class="hljs-variable language_">this</span>, exprOrFn, handler, &#123;<br>      ...options,<br>      <span class="hljs-attr">user</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 标识是用户watcher</span><br>    &#125;);<br>    <span class="hljs-comment">// 如果用户传入了immediate，应该立即执行</span><br>    <span class="hljs-keyword">if</span> (options.<span class="hljs-property">immediate</span>) &#123;<br>      handler.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, watcher.<span class="hljs-property">value</span>);<br>    &#125;<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.watch中接收了exprOrFn，之前对数据进行收集时，该字段是函数，即updateComponent，此时这里是data，因为data有可能会很多层，如<code>a.b.c</code>，所以进行split切割成数组循环。通过<code>this.value = this.get()存储当前值</code>。get方法中会执行<code>pushTarget(this)</code>将<code>Dep.target = watcher</code>,然后紧接着执行了<code>const value = this.getter()</code>,因为该方法里面获取了vm上的属性,从而<strong>触发了拦截.</strong><br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">constructor</span>(<span class="hljs-params">vm, exprOrFn, cb, options</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span> = vm; <span class="hljs-comment">// vm实例</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">exprOrFn</span> = exprOrFn; <span class="hljs-comment">// vm._update(vm._render())  渲染函数</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span> = cb; <span class="hljs-comment">// 回调函数</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = options;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> = options.<span class="hljs-property">user</span>; <span class="hljs-comment">// 标识是用户watcher</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">deps</span> = []; <span class="hljs-comment">// watcher记录有多少dep依赖</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">depsId</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(); <span class="hljs-comment">// dep去重</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = id++; <span class="hljs-comment">// 每次产生一个watcher都有一个唯一标识，即new Watcher的次数</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> exprOrFn === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">getter</span> = exprOrFn; <span class="hljs-comment">// 用来更新视图</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 字符串变成函数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">getter</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 当去当前实例上取值时，才会触发依赖收集</span><br>      <span class="hljs-keyword">let</span> path = exprOrFn.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;.&quot;</span>); <span class="hljs-comment">// b.b.b</span><br>      <span class="hljs-keyword">let</span> obj = vm;<br><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; path.<span class="hljs-property">length</span>; i++) &#123;<br>        obj = obj[path[i]];<br>      &#125;<br>      <span class="hljs-keyword">return</span> obj;<br>    &#125;;<br>  &#125;<br>  <span class="hljs-comment">// 初始化更新视图</span><br>  <span class="hljs-comment">// this.get();</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>(); <span class="hljs-comment">// 保存watcher的上一次结果</span><br>&#125;<br><span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">pushTarget</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// 给dep添加watcher</span><br>  <span class="hljs-keyword">const</span> value = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getter</span>(); <span class="hljs-comment">// 此时该方法获取了vm上的属性会触发拦截</span><br>  <span class="hljs-title function_">popTarget</span>(); <span class="hljs-comment">// 给dep移除watcher</span><br>  <span class="hljs-keyword">return</span> value;<br>&#125;<br><span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// this.get();</span><br>  <span class="hljs-keyword">let</span> value = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>(); <span class="hljs-comment">// 新值</span><br>  <span class="hljs-keyword">let</span> oldValue = <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>; <span class="hljs-comment">// 旧值</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value; <span class="hljs-comment">// 更新旧值</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>) &#123;<br>    <span class="hljs-comment">// 用户watcher</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span>, value, oldValue);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>此时<code>defineReactive中Dep.target是watch</code>,因为每个属性都有一个dep,所以,此时该属性dep通过<code>dep.depend</code>收集了watcher的依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">defineReactive</span>(<span class="hljs-params">obj, key, value</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfo</span>(<span class="hljs-string">`劫持对象`</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj, key, value, <span class="hljs-string">&quot;obj, key, value&quot;</span>);<br>  <span class="hljs-comment">// 每个实例都会有dep属性</span><br>  <span class="hljs-keyword">let</span> childDep = <span class="hljs-title function_">observe</span>(value); <span class="hljs-comment">// 对象又嵌套对象</span><br>  <span class="hljs-keyword">let</span> dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dep</span>(); <span class="hljs-comment">// 每个属性都有一个dep</span><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, key, &#123;<br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 依赖收集(即使用vm.属性)</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;获取值&quot;</span>,key,<span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>);<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>) &#123;<br>        <span class="hljs-comment">// Dep.target此时是watche</span><br>        dep.<span class="hljs-title function_">depend</span>(); <span class="hljs-comment">// 收集依赖</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dep, <span class="hljs-string">&quot;dep&quot;</span>);<br>        <span class="hljs-keyword">if</span> (childDep.<span class="hljs-property">dep</span>) &#123;<br>          childDep.<span class="hljs-property">dep</span>.<span class="hljs-title function_">depend</span>(); <span class="hljs-comment">// 收集数组依赖，这样对应的构造函数中的dep就会绑定watcher</span><br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(childDep.<span class="hljs-property">dep</span>, <span class="hljs-string">&quot;childDep.dep&quot;</span>);<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> value;<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">newValue</span>) &#123;<br>      <span class="hljs-keyword">if</span> (value === newValue) &#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;更新值&quot;</span>);<br>      value = newValue;<br>      <span class="hljs-title function_">observe</span>(newValue); <span class="hljs-comment">// 更改已经属性的值为新对象,也需要劫持</span><br>      dep.<span class="hljs-title function_">notify</span>(); <span class="hljs-comment">// 通知依赖更新</span><br>    &#125;,<br>  &#125;);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupInfoEnd</span>();<br>&#125;<br></code></pre></td></tr></table></figure><img src="images/1.jpg" width="70%"/><img src="images/2.jpg" width="70%"/><p>注意:上图打印的结果是基于下面的html,所以dep只会有个watch的依赖,如果使用了属性,就会有2个,一个watch一个updateComponent</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 12px; color: red&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">      &#125;;</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    <span class="hljs-attr">watch</span>: &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">a</span>: &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">handler</span>(<span class="hljs-params">newValue, oldValue</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&quot;watch: 对象调用：&quot;</span>, newValue, oldValue);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// immediate: true,</span></span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当数据更新时候,就会触发<code>dep.notify()</code>,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dep</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = id++;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span> = [];<br>  &#125;<br>  <span class="hljs-comment">// 收集watcher</span><br>  <span class="hljs-title function_">depend</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 我希望watcher也可以存储dep</span><br>    <span class="hljs-comment">// 双向记忆</span><br>    <span class="hljs-comment">// this.subs.push(Dep.target);</span><br>    <span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>.<span class="hljs-title function_">addDep</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// 让watcher存储dep,实现双向记忆    </span><br>  &#125;<br>  <span class="hljs-comment">// 绑定watcher，因为我们去掉了原来的dep里面push watcher，所以dep下面没有watcher了，所以需要定义该方法来接收watcher</span><br>  <span class="hljs-title function_">addSub</span>(<span class="hljs-params">watcher</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>.<span class="hljs-title function_">push</span>(watcher);<br>  &#125;<br>  <span class="hljs-comment">// 更新</span><br>  <span class="hljs-title function_">notify</span>(<span class="hljs-params"></span>) &#123;    <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">watcher</span>) =&gt;</span> watcher.<span class="hljs-title function_">update</span>());<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后执行 <code>watcher.update()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">queueWatcher</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// 将watcher存储起来</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">queueWatcher</span>(<span class="hljs-params">watcher</span>) &#123;<br>  <span class="hljs-keyword">const</span> id = watcher.<span class="hljs-property">id</span>;<br>  <span class="hljs-keyword">if</span> (has[id] == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 如果没有就添加到队列中，去重，防止重复更新，类似防抖</span><br>    has[id] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 表示已经存在</span><br>    queue.<span class="hljs-title function_">push</span>(watcher); <span class="hljs-comment">// 将watcher存储到队列中</span><br>    <span class="hljs-comment">// 延迟清空队列</span><br>    <span class="hljs-keyword">if</span> (!pending) &#123;<br>      pending = <span class="hljs-literal">true</span>;<br>      <span class="hljs-title function_">nextTick</span>(flushQueue); <span class="hljs-comment">// 相当于定时器，异步更新</span><br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 清空队列 flush:冲洗</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flushQueue</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(queue, <span class="hljs-string">&quot;queue&quot;</span>);<br>  queue.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">watcher</span>) =&gt;</span> &#123;<br>    watcher.<span class="hljs-title function_">run</span>();<br>  &#125;); <span class="hljs-comment">// 执行watcher的更新方法</span><br>  has = &#123;&#125;;<br>  queue = [];<br>  pending = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> value = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>(); <span class="hljs-comment">// 新值</span><br>  <span class="hljs-keyword">let</span> oldValue = <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>; <span class="hljs-comment">// 旧值</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value; <span class="hljs-comment">// 更新旧值</span><br>  <span class="hljs-comment">// if (this.user) &#123;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span>, value, oldValue);<br>  <span class="hljs-comment">// &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最后执行<code>run，进行触发this.get</code>，将<code>新值(this.get())和旧值（this.value）``通过cb(watch回调函数)传出去</code>。</p>]]></content>
      
      
      <categories>
          
          <category> vue2源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7.nextTick和生命周期updated</title>
      <link href="/ypf-blog/2023/07/26/vue2%E6%BA%90%E7%A0%81/7.nextTick%E5%92%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9Fupdated/"/>
      <url>/ypf-blog/2023/07/26/vue2%E6%BA%90%E7%A0%81/7.nextTick%E5%92%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9Fupdated/</url>
      
        <content type="html"><![CDATA[<h2 id="修改数据，重复调用vm-update-vm-render-？"><a href="#修改数据，重复调用vm-update-vm-render-？" class="headerlink" title="修改数据，重复调用vm._update(vm._render)？"></a>修改数据，重复调用vm._update(vm._render)？</h2><p>我们看一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">c</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>    &#125;;<br>  &#125;,<br>&#125;);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  vm.<span class="hljs-property">a</span> = <span class="hljs-number">2</span>;<br>  vm.<span class="hljs-property">c</span>.<span class="hljs-title function_">push</span>(<span class="hljs-number">4</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vm.<span class="hljs-property">$el</span>, <span class="hljs-string">&quot;vm&quot;</span>); &lt;div&gt;<span class="hljs-number">2</span>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]&lt;div&gt;<br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><p>我们上面更改了2次数据，就会走2次<code>vm._update(vm._render)</code>,这样肯定会浪费性能（每次都要生成虚拟dom，更新真实dom）.<br><img src="images/update.jpg" width="50%"/></p><p>实际我们只需要更新一次就行。现在我们来实现下。</p><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>多次执行，我们很容易想到防抖函数，只执行一次即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/observer/watcher.<span class="hljs-property">js</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Watcher</span> &#123;<br>  ...<br>  <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) &#123;    <br>    <span class="hljs-comment">// this.get()  // 1.去掉直接更新</span><br>    <span class="hljs-title function_">queueWatcher</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// 2.将watcher存储起来</span><br>  &#125;<br>  <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>();<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 4.清空队列 flush:冲洗</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flushQueue</span>(<span class="hljs-params"></span>) &#123;<br>  queue.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">watcher</span>) =&gt;</span> watcher.<span class="hljs-title function_">run</span>()); <span class="hljs-comment">// 执行watcher的更新方法</span><br>  has = &#123;&#125;;<br>  queue = [];<br>  pending = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">let</span> has = &#123;&#125;; <span class="hljs-comment">// 用来存储watcher的id，防止重复更新</span><br><span class="hljs-keyword">let</span> queue = []; <span class="hljs-comment">// 将需要批量更新的watcher存储到一个队列中，稍后让watcher执行</span><br><span class="hljs-keyword">let</span> pending = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 默认没有等待更新</span><br><span class="hljs-comment">// 3. 定义防抖函数，等待所有同步代码执行完毕后再执行，防止重复更新</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">queueWatcher</span>(<span class="hljs-params">watcher</span>) &#123;<br>  <span class="hljs-keyword">const</span> id = watcher.<span class="hljs-property">id</span>; <br>  <span class="hljs-keyword">if</span> (has[id] == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 如果没有就添加到队列中</span><br>    has[id] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 表示已经存在</span><br>    queue.<span class="hljs-title function_">push</span>(watcher); <span class="hljs-comment">// 将watcher存储到队列中</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(queue, <span class="hljs-string">&quot;queue&quot;</span>);<br>    <span class="hljs-comment">// 延迟清空队列</span><br>    <span class="hljs-keyword">if</span> (!pending) &#123;<br>      pending = <span class="hljs-literal">true</span>;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">flushQueue</span>();<br>      &#125;, <span class="hljs-number">0</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码很容易看懂，先不执行watcher，而是存起来（根据id去重，所以保留了第一次），等主线程结束，执行。这样就只会执行一次了。</p><img src="images/update1.jpg" width="50%"/><p>上图很明显可以看出只执行一次。但是打印的dom不是最新的了。<br><strong>我们由此可以知道，vue更新Dom是异步更新。</strong></p><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><blockquote><p>官方对其定义为：在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后使用这个方法，才可以获取更新后的 DOM</p></blockquote><p>现在我们结合上面讲解的理解下。<br>我们上面更改数据后，打印了<code>console.log(vm.$el, &quot;vm&quot;)</code>。</p><ul><li>第一次，没有防抖（多次更新），可以直接拿到最新节点，数据也是最新的</li><li>第二次，加上防抖，无法拿到最新节点，但数据是新的，很容易理解，我们是在主线程结束后，才进行的更新。<br>所以我们来实现<code>nextTick</code>方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vm.<span class="hljs-property">$el</span>, <span class="hljs-string">&quot;vm&quot;</span>) <span class="hljs-comment">// 不是最新的</span><br>vm.<span class="hljs-title function_">nextTick</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vm.<span class="hljs-property">$el</span>, <span class="hljs-string">&quot;vm&quot;</span>) <span class="hljs-comment">// 是最新的</span><br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/observer/watcher.<span class="hljs-property">js</span><br><span class="hljs-comment">// 定义防抖函数，等待所有同步代码执行完毕后再执行，防止重复更新</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">queueWatcher</span>(<span class="hljs-params">watcher</span>) &#123;<br>  <span class="hljs-keyword">const</span> id = watcher.<span class="hljs-property">id</span>; <br>  <span class="hljs-keyword">if</span> (has[id] == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 如果没有就添加到队列中</span><br>    has[id] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 表示已经存在</span><br>    queue.<span class="hljs-title function_">push</span>(watcher); <span class="hljs-comment">// 将watcher存储到队列中</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(queue, <span class="hljs-string">&quot;queue&quot;</span>);<br>    <span class="hljs-comment">// 延迟清空队列</span><br>    <span class="hljs-keyword">if</span> (!pending) &#123;<br>      pending = <span class="hljs-literal">true</span>;<br>      <span class="hljs-comment">// 1.去除定时器</span><br>      <span class="hljs-comment">// setTimeout(() =&gt; &#123;</span><br>      <span class="hljs-comment">//   flushQueue();</span><br>      <span class="hljs-comment">// &#125;, 0);</span><br>      <span class="hljs-comment">// 2.改成nextTick调用</span><br>      <span class="hljs-title function_">nextTick</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-title function_">flushQueue</span>();<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js">新增src/utils/next-tick.<span class="hljs-property">js</span><br><span class="hljs-keyword">let</span> callbacks = []; <span class="hljs-comment">// 4. 用来存储nexttick回调函数</span><br><span class="hljs-keyword">let</span> pending = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 7.循环执行回调</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flushCallbacks</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callbacks&quot;</span>, callbacks);<br>  callbacks.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">cb</span>) =&gt;</span> <span class="hljs-title function_">cb</span>());<br>  pending = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">let</span> timerFunc;<br><span class="hljs-comment">// 优雅降级，兼容性处理</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title class_">Promise</span>) &#123;<br>  timerFunc = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>().<span class="hljs-title function_">then</span>(flushCallbacks); <span class="hljs-comment">// 异步处理更新</span><br>  &#125;;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title class_">MutationObserver</span>) &#123;<br>  <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutationObserver</span>(flushCallbacks); <span class="hljs-comment">// H5的api，监控dom变化，监控完毕后会执行回调，兼容性，ie11以上</span><br>  <span class="hljs-keyword">const</span> textNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(<span class="hljs-number">1</span>);<br>  observer.<span class="hljs-title function_">observe</span>(textNode, &#123; <span class="hljs-attr">characterData</span>: <span class="hljs-literal">true</span> &#125;); <span class="hljs-comment">// 观测文本节点，当文本节点内容发生变化时，会触发回调，处于异步线程，主线程的vm.update早已经执行完毕</span><br>  timerFunc = <span class="hljs-function">() =&gt;</span> &#123;<br>    textNode.<span class="hljs-property">textContent</span> = <span class="hljs-number">2</span>; <br>  &#125;;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setImmediate) &#123; <span class="hljs-comment">// 性能最好，兼容性最差，只有IE支持</span><br>  timerFunc = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setImmediate</span>(flushCallbacks);<br>  &#125;;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  timerFunc = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(flushCallbacks, <span class="hljs-number">0</span>);<br>  &#125;;<br>&#125;<br><span class="hljs-comment">// 3.定义nextTick</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">nextTick</span>(<span class="hljs-params">cb</span>) &#123;<br>  callbacks.<span class="hljs-title function_">push</span>(cb);<br>  <span class="hljs-comment">// 5.多个nextTick只异步执行第一次</span><br>  <span class="hljs-keyword">if</span> (!pending) &#123;<br>    pending = <span class="hljs-literal">true</span>;<br>    <span class="hljs-comment">// 6.执行异步函数（优雅降级）</span><br>    <span class="hljs-title function_">timerFunc</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码很容易理解，就是兼容不同浏览器，进行优雅降级。</p><h3 id="MutationObserver"><a href="#MutationObserver" class="headerlink" title="MutationObserver"></a>MutationObserver</h3><h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h4><img src="images/mutationObserver.jpg" width="50%"/><ul><li>兼容性-ie11及以上</li><li>微任务</li></ul><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><blockquote><p>MutationObserver 是一个可以监听DOM结构(属性、子节点等)变化的接口。<br>我们来实现一个最简单的demo</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;img&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 1.定义要监听的dom</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> targetNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;img&quot;</span>); </span><br><span class="language-javascript">    <span class="hljs-comment">// 2.创建一个observer实例</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutationObserver</span>(<span class="hljs-function">(<span class="hljs-params">mutations</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mutations, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    <span class="hljs-comment">// 3.监听dom变化（属性必填，至少写一个）</span></span><br><span class="language-javascript">    observer.<span class="hljs-title function_">observe</span>(targetNode, &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">attributes</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 属性变动</span></span><br><span class="language-javascript">      <span class="hljs-attr">characterData</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 节点内容或节点文本的变动</span></span><br><span class="language-javascript">      <span class="hljs-attr">childList</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 子节点的变动</span></span><br><span class="language-javascript">      <span class="hljs-attr">subtree</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 表示是否将观察器应用于该节点的所有后代节点</span></span><br><span class="language-javascript">      <span class="hljs-attr">attributeOldValue</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 表示观察 attributes 变动时，是否需要记录变动前的属性值</span></span><br><span class="language-javascript">      <span class="hljs-attr">characterDataOldValue</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 表示观察 characterData 变动时，是否需要记录变动前的值</span></span><br><span class="language-javascript">      <span class="hljs-attr">attributeFilter</span>: [<span class="hljs-string">&quot;src&quot;</span>] <span class="hljs-comment">// 数组，表示需要观察的特定属性 （比如： [&quot;class&quot;, &quot;src&quot;]）,默认不写，所有属性生效，此处写了src，只对src生效</span></span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    <span class="hljs-comment">// 4.测试，我们更改属性，可以看到上面第二步可以打印</span></span><br><span class="language-javascript">    targetNode.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;https://www.baidu.com/img/flexible/logo/pc/result.png&quot;</span>;</span><br><span class="language-javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      targetNode.<span class="hljs-property">style</span>.<span class="hljs-property">width</span>=<span class="hljs-string">&quot;100px&quot;</span></span><br><span class="language-javascript">    &#125;, <span class="hljs-number">0</span>);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们打印监听的变化，MutationRecord，会打印两次，如下图，是个数组：<br><img src="images/mutationRecord.jpg" width="50%"/></p><ul><li>注意，如果去掉定时器，相当于初始化就改了2个属性，只会打印一次，只不过数组里面是2个MutationRecord</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 停止观察， 调用该方法后，DOM 再发生变动，也不会触发观察器</span><br>observer.<span class="hljs-title function_">disconnect</span>();<br><span class="hljs-comment">// 清除变动记录，即不再处理未处理的变动，改方法返回变动记录的数组。</span><br>observer.<span class="hljs-title function_">takeRecords</span>();<br><br><span class="hljs-comment">// 保存所有没有被观察器处理的变动</span><br><span class="hljs-keyword">var</span> changes = observer.<span class="hljs-title function_">takeRecords</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(changes, <span class="hljs-string">&quot;changes&quot;</span>);<br><span class="hljs-comment">// 停止观察</span><br>observer.<span class="hljs-title function_">disconnect</span>();<br><br><span class="hljs-title class_">MutationRecord</span> 对象<br>type： 观察的变动类型<br>target：发生变动的<span class="hljs-variable constant_">DOM</span>节点<br>addedNodes：新增的<span class="hljs-variable constant_">DOM</span>节点<br>removeNodes：删除的<span class="hljs-variable constant_">DOM</span>节点<br>previousSibling：前一个同级节点，如果没有则返回<span class="hljs-literal">null</span><br>nextSibling：下一个同级节点，如果没有则返回<span class="hljs-literal">null</span><br>attributeName：发生变动的属性。如果这只了 attributeFilter，则只返回预先指定的属性<br>oldValue：变动前的值。这个属性只对 attribute和characterData变动有效，如果发生childList变动，则返回<span class="hljs-literal">null</span><br><br></code></pre></td></tr></table></figure><h3 id="setImmediate"><a href="#setImmediate" class="headerlink" title="setImmediate"></a>setImmediate</h3><img src="images/setImmediate.jpg" width="50%"/><ul><li>只有ie10及以上兼容和node</li><li>语法为<code>setImmediate（func，[ param1，param2，...]</code></li><li>setImmediate表示事件循环结束后立即执行，是宏任务,setTimeout/setInterval也是宏任务。</li><li>setImmediate类似于<code>setTimeout(fn,0)</code>,<strong>正常情况下</strong>setImmediate比setTimeout先执行。因为 setImmediate(fn) 并不像 setTimeout(fn, 0) 由event loop检测系统时间是否到点然后向事件队列插入一个事件，然后调用事件的回调方法fn。而是监控UI线程的调用栈，一旦调用栈为空则将handler压栈。但有时候setTimeout(fn,0)比先setImmediate先执行</li></ul><p>那为什么两者都代表主线程完成后立即执行，其执行结果是不确定的。我们在node中执行下下面代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-title function_">setImmediate</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>执行上面代码，大部分输出的是<code>1 2</code> ,有时候会输出 <code>2 1</code>。<br>因为：</p><ul><li>node.js里面setTimeout(fn, 0)会被强制改为setTimeout(fn, 1),这在官方文档中有说明。(说到这里顺便提下，HTML 5里面setTimeout最小的时间限制是4ms)。</li><li>我们发现关键就在这个1毫秒，如果同步代码执行时间较长，进入Event Loop的时候1毫秒已经过了，setTimeout执行，如果1毫秒还没到，就先执行了setImmediate。</li></ul><h3 id="实现vm-nextTick"><a href="#实现vm-nextTick" class="headerlink" title="实现vm.$nextTick"></a>实现vm.$nextTick</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/state.<span class="hljs-property">js</span><br><span class="hljs-comment">// 1.新增mixin</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">stateMixin</span>(<span class="hljs-params">Vue</span>) &#123;<br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$nextTick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">cb</span>) &#123;<br>    <span class="hljs-title function_">nextTick</span>(cb);<br>  &#125;;<br>&#125;<br>修改src/index.<span class="hljs-property">js</span><br><span class="hljs-keyword">import</span> &#123; initMixin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./init&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; lifecycleMixin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./lifecycle&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; renderMixin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./vdom/index&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; initGlobalAPI &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./global-api/index&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; stateMixin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./state&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Vue</span>(<span class="hljs-params">options</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_init</span>(options);<br>&#125;<br><span class="hljs-title function_">initMixin</span>(<span class="hljs-title class_">Vue</span>)<br><span class="hljs-title function_">lifecycleMixin</span>(<span class="hljs-title class_">Vue</span>) <span class="hljs-comment">// 添加生命周期</span><br><span class="hljs-title function_">renderMixin</span>(<span class="hljs-title class_">Vue</span>) <span class="hljs-comment">// 添加render</span><br><span class="hljs-title function_">initGlobalAPI</span>(<span class="hljs-title class_">Vue</span>) <span class="hljs-comment">// 添加全局api</span><br><span class="hljs-comment">// 2.引入</span><br><span class="hljs-title function_">stateMixin</span>(<span class="hljs-title class_">Vue</span>) <span class="hljs-comment">// 添加状态</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Vue</span>;<br></code></pre></td></tr></table></figure><p>此时我们就可以使用vm.$nextTick访问最新的dom了。<br><img src="images/nextTick.jpg" width="50%"/></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>nextTick是用来解决多次<code>vm._update(vm._render())</code>,该方法里面进行了优雅降级。 <code>promise&gt;MutationObserver&gt;setImmediate&gt;setTimeout</code>。</li><li>vue在观察到数据变化后，会先定义<code>let queue=[]存储watcher队列</code>,定义<code>let has=&#123;&#125;存储watcher.id</code>,定义<code>let pending=false控制只执行一次更新</code>，当多个watcher过来的时候,判断没有id添加进去，同时pending置为true防止多次执行nextTick,等主线程结束后，执行异步nextTick进行更新，将队列清空、pending还原：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (has[id] == <span class="hljs-literal">null</span>) &#123;<br>   has[id] = <span class="hljs-literal">true</span>;<br>   queue.<span class="hljs-title function_">push</span>(watcher); <span class="hljs-comment">// 将watcher存储到队列中</span><br>   <span class="hljs-comment">// 延迟清空队列</span><br>   <span class="hljs-keyword">if</span> (!pending) &#123;<br>     pending = <span class="hljs-literal">true</span>;<br>     <span class="hljs-title function_">nextTick</span>(flushQueue); <span class="hljs-comment">// 相当于定时器，异步更新</span><br>     <span class="hljs-comment">// setTimeout(() =&gt; &#123;</span><br>     <span class="hljs-comment">//   flushQueue();</span><br>     <span class="hljs-comment">// &#125;, 0);</span><br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><ul><li>只更新一次，是因为pending开始为false，先一直添加队列。 将pending直接修改为true，这样只添加一次。</li><li>因为是异步线程，所以同步执行完（在下次 DOM 更新循环结束之后）才会nextTick拿到最新dom。</li><li>vue是异步更新dom</li></ul><h2 id="生命周期updated"><a href="#生命周期updated" class="headerlink" title="生命周期updated"></a>生命周期updated</h2><p>上面我们执行了<code>合并更新</code>，那都更新了，肯定到update钩子函数了。我们来实现下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/lifecycle.<span class="hljs-property">js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">mountComponent</span>(<span class="hljs-params">vm, el</span>) &#123;<br>  <span class="hljs-title function_">callHook</span>(vm, <span class="hljs-string">&quot;beforeMount&quot;</span>);<br>  <span class="hljs-comment">// render--&gt;vnode--&gt;真实dom</span><br>  <span class="hljs-comment">// 1.调用vm._render函数，生成虚拟dom  2.调用vm._update,将虚拟dom转换成真实dom</span><br>  <span class="hljs-comment">// vm._update(vm._render());</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">updateComponent</span> = (<span class="hljs-params"></span>) =&gt; &#123;   <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;updateComponent&quot;</span>)         <br>    vm.<span class="hljs-title function_">_update</span>(vm.<span class="hljs-title function_">_render</span>())<br>  &#125;<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Watcher</span>(vm,updateComponent,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-title function_">callHook</span>(vm, <span class="hljs-string">&quot;updated&quot;</span>); <span class="hljs-comment">// 1.增加第三个参数：回调函数，此时走的updated钩子</span><br>  &#125;,<span class="hljs-literal">true</span>) <span class="hljs-comment">// 参数1：实例，参数2：更新函数，参数3：渲染函数，参数4：true表示是渲染watcher</span><br>  <span class="hljs-title function_">callHook</span>(vm, <span class="hljs-string">&quot;mounted&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/observer/watcher.<span class="hljs-property">js</span><br><span class="hljs-comment">// 清空队列 flush:冲洗</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flushQueue</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(queue, <span class="hljs-string">&quot;queue&quot;</span>);<br>  queue.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">watcher</span>) =&gt;</span> &#123;<br>    watcher.<span class="hljs-title function_">run</span>()<br>    watcher.<span class="hljs-title function_">cb</span>() <span class="hljs-comment">// 2.增加调用cb方法</span><br>  &#125;); <br>  has = &#123;&#125;;<br>  queue = [];<br>  pending = <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们就完成了<code>updated</code>,即vue是在<code>new watcher回调函数中传递updated钩子函数，在异步执行flushQueue清空watcher队列函数里面，循环调用watcher的update同时调用传过来的回调，从而触发updated的</code></p><blockquote><p><a href="https://juejin.cn/post/6844904100195205133?searchId=20230801164819BBB58747D441190201B6#heading-0">setTimeout和setImmediate到底谁先执行，本文让你彻底理解Event Loop</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> vue2源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>6.页面更新之watcher和Dep</title>
      <link href="/ypf-blog/2023/07/21/vue2%E6%BA%90%E7%A0%81/6.%E9%A1%B5%E9%9D%A2%E6%9B%B4%E6%96%B0%E4%B9%8Bwatcher%E5%92%8CDep/"/>
      <url>/ypf-blog/2023/07/21/vue2%E6%BA%90%E7%A0%81/6.%E9%A1%B5%E9%9D%A2%E6%9B%B4%E6%96%B0%E4%B9%8Bwatcher%E5%92%8CDep/</url>
      
        <content type="html"><![CDATA[<h2 id="修改数据，页面如何更新？"><a href="#修改数据，页面如何更新？" class="headerlink" title="修改数据，页面如何更新？"></a>修改数据，页面如何更新？</h2><p>在讲解watcher和dep之前，我们先看下面例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html">修改index.html<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 12px; color: red&quot;</span>&gt;</span><br>    测试&#123;&#123;a&#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    &#123;&#123;a&#125;&#125;<br>    &#123;&#123;a&#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"> </span><br><span class="language-javascript">     <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      vm.<span class="hljs-property">a</span>=<span class="hljs-number">2</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vm, <span class="hljs-string">&quot;vm&quot;</span>);</span><br><span class="language-javascript">    &#125;, <span class="hljs-number">1000</span>);  </span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们执行上上面代码，发现视图并没有更新，但数据是变化了。原来我们初始化的时候在下面js中调用了<code>vm._update(vm._render())</code>进行了页面更新，<br>但修改数据又没有调用该方法，所以必然不可能更新视图。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">src/lifecycle.<span class="hljs-property">js</span><br><span class="hljs-comment">// 挂载组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">mountComponent</span>(<span class="hljs-params">vm, el</span>) &#123;<br>  <span class="hljs-title function_">callHook</span>(vm, <span class="hljs-string">&quot;beforeMount&quot;</span>);<br>  <span class="hljs-comment">// render--&gt;vnode--&gt;真实dom</span><br>  <span class="hljs-comment">// 1.调用vm._render函数，生成虚拟dom  2.调用vm._update,将虚拟dom转换成真实dom</span><br>  vm.<span class="hljs-title function_">_update</span>(vm.<span class="hljs-title function_">_render</span>());<br>  <span class="hljs-title function_">callHook</span>(vm, <span class="hljs-string">&quot;mounted&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们修改下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html">index.html<br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"> </span><br><span class="language-javascript">     <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      vm.<span class="hljs-property">a</span>=<span class="hljs-number">2</span></span><br><span class="language-javascript">      vm.<span class="hljs-title function_">_update</span>(vm.<span class="hljs-title function_">_render</span>()) <span class="hljs-comment">// 主动触发下刷新即可</span></span><br><span class="language-javascript">    &#125;, <span class="hljs-number">1000</span>);  </span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们很容易想到，主动触发下属性即可。图我就不截了，答案肯定是可以的，视图会刷新。但实际项目中，不可能每改一个数据，就要调一遍刷新方法吧。所以接下来我们通过<strong>js设计模式之发布订阅模式</strong>来解决这个问题，实现修改数据自动刷新视图。</p><h2 id="js设计模式之发布订阅模式"><a href="#js设计模式之发布订阅模式" class="headerlink" title="js设计模式之发布订阅模式"></a>js设计模式之发布订阅模式</h2><p>我们通过一个简单的demo来实现发布订阅模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 从订阅杂志角度举例说明发布订阅模式</span><br>  <span class="hljs-comment">// 1. 创建一个杂志社</span><br>  <span class="hljs-keyword">const</span> magazine = &#123;<br>    <span class="hljs-attr">subscribers</span>: [], <span class="hljs-comment">// 存储订阅者信息</span><br>    <span class="hljs-comment">//   订阅者</span><br>    <span class="hljs-attr">subscribe</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">subscriber</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">subscribers</span>.<span class="hljs-title function_">push</span>(subscriber);<br>    &#125;,<br>    <span class="hljs-comment">//   发布者</span><br>    <span class="hljs-attr">publish</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">message</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">subscribers</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">callback</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">callback</span>(message); <span class="hljs-comment">// 执行订阅者的回调函数</span><br>      &#125;);<br>    &#125;,<br>  &#125;;<br>  <span class="hljs-comment">// 2. 创建订阅者</span><br>  <span class="hljs-keyword">const</span> subscriber1 = <span class="hljs-keyword">function</span> (<span class="hljs-params">message</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;subscriber1&quot;</span>, message);<br>  &#125;;<br>  <span class="hljs-keyword">const</span> subscriber2 = <span class="hljs-keyword">function</span> (<span class="hljs-params">message</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;subscriber2&quot;</span>, message);<br>  &#125;;<br>  <span class="hljs-keyword">const</span> subscriber3 = <span class="hljs-keyword">function</span> (<span class="hljs-params">message</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;subscriber3&quot;</span>, message);<br>  &#125;;<br>  <span class="hljs-comment">// 3. 订阅杂志</span><br>  magazine.<span class="hljs-title function_">subscribe</span>(subscriber1);<br>  magazine.<span class="hljs-title function_">subscribe</span>(subscriber2);<br>  magazine.<span class="hljs-title function_">subscribe</span>(subscriber3);<br>  <span class="hljs-comment">// 4. 发布杂志</span><br>  magazine.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&quot;hello, magazine&quot;</span>);<br>  magazine.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&quot;hello, magazine1&quot;</span>);<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="images/demo.jpg" width="50%"/></p><p>我们来理一下流程：订阅者<code>subscriber1、2、3</code>向杂志社<code>magazine</code>订阅杂志,那么杂志到了杂志社如何通知订阅者呢？<br>很明显，<strong>订阅者相当于回调函数–&gt;传给杂志社–&gt;杂志社通过数组存起来–&gt;循环调用触发回调函数</strong>，这样就完成了一个简单的发布订阅模式。</p><ul><li>观察者模式(Observer Patterns) 也称订阅/发布（subscriber/publisher）模式,这里的订阅者称为观察者，收集订阅者称为发布者</li><li>当一个事件发生，发布者会发布通知所有订阅者，并常常以事件对象形式传递消息.所有浏览器事件（鼠标悬停，按键等事件）都是该模式的例子。</li></ul><h2 id="vue通过发布订阅模式更新视图"><a href="#vue通过发布订阅模式更新视图" class="headerlink" title="vue通过发布订阅模式更新视图"></a>vue通过发布订阅模式更新视图</h2><p>理解了上面的发布订阅模式，那么我们从vue的角度思考，谁是订阅/观察者，谁是发布者？</p><ul><li>订阅者：watcher-即 <code>vm._update(vm._render())</code></li><li>发布者：Dep</li></ul><p>什么时候订阅？</p><blockquote><p>很容易想到，在数据监听中的get方法订阅即注册</p></blockquote><p>发布者什么时候<strong>通知</strong>订阅者（触发更新）？</p><blockquote><p>很容易想到，在数据监听中的set方法通知。</p></blockquote><p>现在我们在vue上实现：</p><h3 id="创建订阅者"><a href="#创建订阅者" class="headerlink" title="创建订阅者"></a>创建订阅者</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js">新建src/observer/watcher.<span class="hljs-property">js</span><br><span class="hljs-keyword">import</span> &#123; pushTarget, popTarget &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./dep&quot;</span>;<br><span class="hljs-comment">// 通过watcher类实现更新</span><br><span class="hljs-comment">// 1.创建观察/订阅者</span><br><span class="hljs-keyword">let</span> id = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Watcher</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">vm, exprOrFn, cb, options</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span> = vm; <span class="hljs-comment">// vm实例</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">exprOrFn</span> = exprOrFn; <span class="hljs-comment">// vm._update(vm._render())  渲染函数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span> = cb; <span class="hljs-comment">// 回调函数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = options;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = id++; <span class="hljs-comment">// 每次产生一个watcher都有一个唯一标识，即new Watcher的次数</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> exprOrFn === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">getter</span> = exprOrFn; <span class="hljs-comment">// 用来更新视图</span><br>    &#125;<br>    <span class="hljs-comment">// 初始化第一次更新视图</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>();<br>  &#125;<br>  <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;    <br>    <span class="hljs-title function_">pushTarget</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// 给dep添加watcher</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getter</span>(); <span class="hljs-comment">// 渲染页面 vm._update(vm._render())</span><br>    <span class="hljs-title function_">popTarget</span>(); <span class="hljs-comment">// 给dep移除watcher (多组件绑定不同的watcher，所以需要清除)</span><br>  &#125;<br>  <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>()<br>  &#125;<br> <br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Watcher</span>;<br></code></pre></td></tr></table></figure><h3 id="创建发布者"><a href="#创建发布者" class="headerlink" title="创建发布者"></a>创建发布者</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js">新建src/observer/dep.<span class="hljs-property">js</span><br><span class="hljs-comment">// 2.创建一个Dep类，用来管理watcher</span><br><span class="hljs-comment">// Dep相当于发布订阅模式中的发布者，watcher相当于订阅者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dep</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span> = [];<br>  &#125;<br>  <span class="hljs-comment">// 收集watcher</span><br>  <span class="hljs-title function_">depend</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>);<br>  &#125;<br>  <span class="hljs-comment">// 更新</span><br>  <span class="hljs-title function_">notify</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">watcher</span>) =&gt;</span> watcher.<span class="hljs-title function_">update</span>());<br>  &#125;<br>&#125;<br><span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span> = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 添加一个静态属性，用来接收订阅者传递过来的回调函数（watcher），</span><br><span class="hljs-comment">// 添加watcher</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">pushTarget</span>(<span class="hljs-params">watcher</span>) &#123;<br>  <span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span> = watcher;<br>&#125;<br><span class="hljs-comment">// 移除watcher</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">popTarget</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span> = <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Dep</span>;<br><br></code></pre></td></tr></table></figure><p>上面订阅/发布两个函数定义完了，我们开始实现初始化订阅方法：</p><h3 id="初始化订阅方法"><a href="#初始化订阅方法" class="headerlink" title="初始化订阅方法"></a>初始化订阅方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/lifecycle.<span class="hljs-property">js</span><br><span class="hljs-keyword">import</span> &#123; patch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./vdom/patch&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Watcher</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./observer/watcher&quot;</span>;<br><span class="hljs-comment">// 挂载组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">mountComponent</span>(<span class="hljs-params">vm, el</span>) &#123;<br>  <span class="hljs-title function_">callHook</span>(vm, <span class="hljs-string">&quot;beforeMount&quot;</span>);<br>  <span class="hljs-comment">// render--&gt;vnode--&gt;真实dom</span><br>  <span class="hljs-comment">// 调用vm._render函数，生成虚拟dom , 调用vm._update,将虚拟dom转换成真实dom</span><br><br>  <span class="hljs-comment">// vm._update(vm._render()); // 3.注释直接调用的更新方法</span><br>  <span class="hljs-comment">// 4.将更新方法封装成函数</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">updateComponent</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    vm.<span class="hljs-title function_">_update</span>(vm.<span class="hljs-title function_">_render</span>())<br>  &#125;<br>  <span class="hljs-comment">// 5.初始化订阅/观察函数（主要会进行pushTarget，将组件的watch绑定到发布者，</span><br>  <span class="hljs-comment">// vue没有用上面讲解的，订阅时候才传参给发布者，而是组件初始化就绑定，一个组件对应一个vm._update(vm._render())）</span><br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Watcher</span>(vm,updateComponent) <span class="hljs-comment">// 参数1：实例，参数2：更新函数</span><br>  <span class="hljs-title function_">callHook</span>(vm, <span class="hljs-string">&quot;mounted&quot;</span>);<br>&#125;<br>...<br></code></pre></td></tr></table></figure><ul><li>这里初始化订阅的目的，主要为了将组件的watch绑定到发布者，而不是上面讲解的订阅时传入。</li><li>一个组件只对应一个vm._update(vm._render())，所以组件初始化就绑定给了发布者，不用订阅时传入。</li></ul><h3 id="开始进行订阅发布"><a href="#开始进行订阅发布" class="headerlink" title="开始进行订阅发布"></a>开始进行订阅发布</h3><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/oberver/index.<span class="hljs-property">js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">defineReactive</span>(<span class="hljs-params">obj, key, value</span>) &#123;<br>  <span class="hljs-title function_">observe</span>(value); <span class="hljs-comment">// 对象又嵌套对象</span><br>  <span class="hljs-keyword">let</span> dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dep</span>(); <span class="hljs-comment">// 每个属性都有一个dep</span><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, key, &#123;<br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 依赖收集(即使用vm.属性)</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;获取值&quot;</span>);<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>) &#123; <span class="hljs-comment">// 需要判断，因为每个组件初始化给发布者绑定后，就会清除</span><br>        dep.<span class="hljs-title function_">depend</span>(); <span class="hljs-comment">// 6.开始订阅（收集依赖），模版中用几次，就会有几次watcher,是个数组</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dep, <span class="hljs-string">&quot;dep&quot;</span>); <span class="hljs-comment">// 打印如下图</span><br>      &#125;<br>      <span class="hljs-keyword">return</span> value;<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">newValue</span>) &#123;<br>      <span class="hljs-keyword">if</span> (value === newValue) &#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;更新值&quot;</span>);<br>      value = newValue;<br>      <span class="hljs-title function_">observe</span>(newValue); <span class="hljs-comment">// 更改已经属性的值为新对象,也需要劫持</span><br>      dep.<span class="hljs-title function_">notify</span>(); <span class="hljs-comment">// 7.通知发布者依赖更新 </span><br>    &#125;,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，我们就完成了自动更新。我们去除上面index.html的手动更新方法，也是可以正常更新的。</p><p>注意：</p><ul><li>一个组件都只有一个watcher类，id是唯一的，因为只在初始化new一次watcher，即一个dep发布者对应一个Dep.target</li><li>data中一个属性，对应一个dep发布者。 一个属性在模版中用几次，就有几个watcher订阅者，因为get中监听几次（即在模板中用几次，这个用就是前面讲的转换render函数，通过with(this)会取到变量值从而触发get方法），就有几个watcher，所以dep和wather是一对多关系。</li><li>所以一个属性等于一个dep发布者，里面会get时候绑定多个订阅者watcher。</li></ul><p>我们可以看下，watcher是个数组，上面index.html中，a属性在页面中用了3处，所以订阅了3次，有三个watcher；</p><img src="images/watcher.jpg" width="50%"/><p>上面我们index.html只是在对象的拦截做了订阅发布，数组变化，页面是不生效的，我们执行下面index.html可以看到不会生效。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html">修改index.html<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 12px; color: red&quot;</span>&gt;</span><br>    测试&#123;&#123;a&#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    &#123;&#123;b&#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"> </span><br><span class="language-javascript">     <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">          <span class="hljs-attr">b</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">      vm.<span class="hljs-property">a</span>=<span class="hljs-number">2</span></span><br><span class="language-javascript">      vm.<span class="hljs-property">b</span>.<span class="hljs-title function_">push</span>(<span class="hljs-number">3</span>) <span class="hljs-comment">// 不生效，页面还是显示 [1,2]</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vm, <span class="hljs-string">&quot;vm&quot;</span>);</span><br><span class="language-javascript">    &#125;, <span class="hljs-number">1000</span>);  </span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>上面我们完成了对象的订阅发布，那么数组如何处理呢？<br>很容易想到，是在数组的拦截（walkArray函数）方法里面处理。那么肯定需要绑定dep来接收watcher。<br>我们对象是给每个属性都绑定了dep,但是在defineReactive方法中定义的局部变量，walkArray是无法访问的，那么应该如何绑定？我们想下，每个对象数组都通过了<code>new Observer</code>处理的，我们可以在 Observer添加dep，这样每个对象或数组通过 <code>new Observer</code>时都会有dep，这样我们就可以访问到了。</p><p>我们修改代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/observer/index.<span class="hljs-property">js</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-comment">// 1. 给每个数组或对象绑定dep    </span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dep</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dep</span>(); <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(value)) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">walkArray</span>(value);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">walkArrayObj</span>(value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">walk</span>(value);<br>    &#125;<br>  &#125;<br>  ...<br>  <span class="hljs-title function_">walkArray</span>(<span class="hljs-params">data</span>) &#123;<br>        ...<br>        <span class="hljs-keyword">if</span> (inserted) &#123;<br>          <span class="hljs-comment">// 用上面存储的this，调用walkArrayObj方法，对插入的数组进行劫持， 因为这里面的this指向的是实例，即aa._data.b</span><br>          that.<span class="hljs-title function_">walkArrayObj</span>(inserted);<br>        &#125;<br>       <br>        <span class="hljs-keyword">const</span> result=<span class="hljs-title class_">ArrayProto</span>[key].<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>        <span class="hljs-comment">// 4.通知依赖更新(注意，必须在result下面，因为上面执行完，data才会更新)</span><br>        that.<span class="hljs-property">dep</span>.<span class="hljs-title function_">notify</span>();<br>        <span class="hljs-keyword">return</span> result;<br>      &#125;;<br>    &#125;);<br>  &#125;<br>  ...<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">defineReactive</span>(<span class="hljs-params">obj, key, value</span>) &#123;<br>  <span class="hljs-comment">// 2.每个实例都会有dep属性</span><br>  <span class="hljs-keyword">let</span> childDep = <span class="hljs-title function_">observe</span>(value); <span class="hljs-comment">// 对象又嵌套对象</span><br>  <span class="hljs-keyword">let</span> dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dep</span>(); <span class="hljs-comment">// 每个属性都有一个dep  </span><br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, key, &#123;<br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 依赖收集(即使用vm.属性)</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;获取值&quot;</span>);<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>) &#123;<br>        <span class="hljs-comment">// Dep.target是一个watcher类</span><br>        dep.<span class="hljs-title function_">depend</span>(); <span class="hljs-comment">// 收集依赖</span><br>        <span class="hljs-comment">// 3.收集数组依赖，这样对应的构造函数中的dep就会绑定watcher</span><br>        <span class="hljs-keyword">if</span> (childDep.<span class="hljs-property">dep</span>) &#123;<br>          childDep.<span class="hljs-property">dep</span>.<span class="hljs-title function_">depend</span>(); <br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> value;<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">newValue</span>) &#123;<br>      <span class="hljs-keyword">if</span> (value === newValue) &#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;更新值&quot;</span>);<br>      value = newValue;<br>      <span class="hljs-title function_">observe</span>(newValue); <span class="hljs-comment">// 更改已经属性的值为新对象,也需要劫持</span><br>      dep.<span class="hljs-title function_">notify</span>(); <span class="hljs-comment">// 通知依赖更新</span><br>    &#125;,<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们就完成了数组的订阅发布，页面会更新为[1,2,3]</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>先在生命周期初始化watcher</p><ul><li>对象是给每个属性绑定dep，在get拦截中进行收集watcher，set中发布</li><li>数组是在每次new Observer里面，在this绑定dep， 在get中（因为value也可能对象类型）拿到new Observer的实例，取出dep进行收集watcher，在数组拦截方法进行发布</li></ul><p><strong>注意</strong></p><ul><li>直接通过修改下标<code>arr[index]=xx</code>这种，页面不会更新， 正式的vue也不会更新，因为只是对数组方法进行拦截，没有对下标拦截，可以通过<code>$set(arr,index,value)</code>这种来更新，后面会实现该方法。</li></ul><h3 id="Dep和watcher双向绑定"><a href="#Dep和watcher双向绑定" class="headerlink" title="Dep和watcher双向绑定"></a>Dep和watcher双向绑定</h3><p>上面我们实际已经完成了策略发布更新视图，但是目前存在1个问题：</p><blockquote><p>watcher重复添加<br>因为我们初始化，get会添加一遍watcher，但是在更新数据的时候，触发_render函数，因为要重新生成虚拟dom，（with函数会重新触发get，导致再次dep.depend），所以会重复添加。并且一个属性用几次，就有几个watcher也不合理，因为都是一样的watcher，浪费性能。应该一个属性在组件中无论用几次，都绑定一个watcher。如果不同组件，实际测试，直接有新dep了。</p></blockquote><p>基于上面1个问题，以及后面要讲到的computed，我们需要实现Dep和watcher双向绑定。</p><h4 id="什么是双向绑定？"><a href="#什么是双向绑定？" class="headerlink" title="什么是双向绑定？"></a>什么是双向绑定？</h4><p>因为现在一个属性对应一个dep，一个dep绑定多个watcher, 我们只知道，dep下面subs存储watcher， <strong>但是watcher下面没有存储是哪个dep，如果实现了这层，就实现了双向绑定</strong>。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>理一下思路：<br>我们先把dep绑定watcher去掉，使得dep下的watcher关系也不存在，这样双方目前都没关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/oberver/dep.<span class="hljs-property">js</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dep</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span> = [];<br>  &#125;<br>  <span class="hljs-comment">// 收集watcher</span><br>  <span class="hljs-title function_">depend</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// this.subs.push(Dep.target); // 1.去掉直接push操作，此时dep下面没有watcher了，也没有依赖关系    </span><br>  &#125;<br>  ...<br></code></pre></td></tr></table></figure><p>要实现双向绑定：相当于dep里面定义addSub方法接收watcher， watcher定义addDep方法接收dep，也就是说dep里面添加watcher，watcher里面添加dep，最后收集依赖的时候执行这两个方法。</p><h5 id="dep定义addSub接收watcher"><a href="#dep定义addSub接收watcher" class="headerlink" title="dep定义addSub接收watcher"></a>dep定义addSub接收watcher</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/oberver/dep.<span class="hljs-property">js</span><br><br><span class="hljs-keyword">let</span> id = <span class="hljs-number">0</span>; <span class="hljs-comment">// 4. 存入watcher前增加id唯一标识用来去重</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dep</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = id++;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span> = [];<br>  &#125;<br>  <span class="hljs-comment">// 收集watcher</span><br>  <span class="hljs-title function_">depend</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 我希望watcher也可以存储dep</span><br>    <span class="hljs-comment">// 双向记忆</span><br>    <span class="hljs-comment">// this.subs.push(Dep.target); // 去掉直接push操作，此时dep下面没有watcher了</span><br>    <span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>.<span class="hljs-title function_">addDep</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// 4.开始执行双向绑定，Dep.target就是watcher，相当于watcher.addDep,将当前dep存入watcher</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Dep</span>);<br>    <br>  &#125;<br>  <span class="hljs-comment">// 2. 定义该方法来接收watcher</span><br>  <span class="hljs-title function_">addSub</span>(<span class="hljs-params">watcher</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>.<span class="hljs-title function_">push</span>(watcher);<br>  &#125;<br></code></pre></td></tr></table></figure><p>此时我们修改watcher</p><h5 id="watcher定义addDep接收dep"><a href="#watcher定义addDep接收dep" class="headerlink" title="watcher定义addDep接收dep"></a>watcher定义addDep接收dep</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Watcher</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">vm, exprOrFn, cb, options</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span> = vm; <span class="hljs-comment">// vm实例</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">exprOrFn</span> = exprOrFn; <span class="hljs-comment">// vm._update(vm._render())  渲染函数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span> = cb; <span class="hljs-comment">// 回调函数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = options;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">deps</span> = []; <span class="hljs-comment">// 5.用来存储dep依赖</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">depsId</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(); <span class="hljs-comment">// 6.用来存储dep依赖的id，去重</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = id++; <span class="hljs-comment">// 每次产生一个watcher都有一个唯一标识，即new Watcher的次数</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> exprOrFn === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">getter</span> = exprOrFn; <span class="hljs-comment">// 用来更新视图</span><br>    &#125;<br>    <span class="hljs-comment">// 初始化更新视图</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>();<br>  &#125;<br>  <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">pushTarget</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// 给dep添加watcher</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getter</span>(); <span class="hljs-comment">// 渲染页面 vm._update(vm._render())</span><br>    <span class="hljs-title function_">popTarget</span>(); <span class="hljs-comment">// 给dep移除watcher</span><br>  &#125;<br>  <span class="hljs-comment">// 3.定义该方法来接收dep</span><br>  <span class="hljs-title function_">addDep</span>(<span class="hljs-params">dep</span>) &#123;<br>    <span class="hljs-keyword">let</span> id = dep.<span class="hljs-property">id</span>;<br>    <span class="hljs-comment">// 7. 没有，增加进去</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">depsId</span>.<span class="hljs-title function_">has</span>(id)) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">depsId</span>.<span class="hljs-title function_">add</span>(id);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">deps</span>.<span class="hljs-title function_">push</span>(dep);<br>      <span class="hljs-comment">// 8.watcher绑定了dep的同时，做dep绑定watcher处理，将watcher传给dep</span><br>      dep.<span class="hljs-title function_">addSub</span>(<span class="hljs-variable language_">this</span>);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>至此我们完成了双向绑定，并且解决了重复添加问题。</p><p>理一下思路：<br>因为是在depend里面触发更新，<code>push(watcher)</code>是直接dep绑定watcher的，但是为了给watcher绑定dep，所以需要在dep里面，从<code>Dep.target.addDep(this)</code>来触发watcher绑定dep，addDep方法主要逻辑是，判断dep.id是否存在，存在说明已经添加过了，不存在的话，通过<code>this.deps.push(dep)存储</code>，接着执行<code>dep.addSub(this)</code>将watcher传给dep。相当于每执行一次<code>Dep.target.addDep(this)</code>就执行一次`dep.addSub(this)。</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ol><li>为了实现修改数据自动调用<code>vm._update(vm._render())</code>，需要用到订阅发布模式。（<code>vm._update(vm._render())</code>相当于订阅者）。</li><li>创建订阅者Watcher.js和发布者Dep.js</li><li>因为初始化我们在lifecycle执行了<code>vm._update(vm._render())</code>，所以我们也把第一次也改成通过订阅发布执行。即将<code>const updateComponent = () =&gt; &#123;vm._update(vm._render())&#125;</code>,放到updateComponent函数中，不直接执行，而是放到watcher里面执行，执行<code>new Watcher(vm, updateComponent)</code>，Watcher就在自己类中初始化（constructor）就执行了<code>updateComponent以及调用dep里面的pushTarget方法，将Watcher类存储到dep.target</code>。</li><li>订阅数据以及双向绑定：怎样做到数据有更新就调用updateComponent呢？那肯定要先订阅数据，所以在<strong>对象</strong>的每一个key拦截中<code>Object.defineProperty的get</code>都绑定一个dep<code>let dep = new Dep()</code>，然后调用<code>dep.depend</code>进行订阅，dep.depend里面的逻辑是执行<code>Dep.target.addDep(this)</code>来触发watcher绑定dep，addDep方法主要逻辑是，判断dep.id是否存在，存在说明已经添加过了，不存在的话，通过<code>this.deps.push(dep)存储</code>，接着执行<code>dep.addSub(this)</code>将watcher传给dep。相当于每执行一次<code>Dep.target.addDep(this)</code>就执行一次<code>dep.addSub(this)</code>,里面的逻辑是<code>this.subs.push(watcher);</code>。</li><li>发布：当拦截到数据更新时，在set进行发布（执行dep里面的notify，实际就是循环subs执行watcher的update方法）</li><li>数组订阅和发布:前面订阅是给每个属性绑定dep，但是数组也需要绑定，所以在Observer类（typeof是对象）绑定了dep（this.dep = new Dep()），在<code>Object.defineProperty的get</code>中执行<code>let childDep = observe(value);childDep.dep.depend()</code>进行订阅，再在拦截push等等操作里面进行发布更新。</li></ol><p>注意：</p><ul><li>完成双向绑定后，一个属性对应一个dep，也就是有个唯一的depId,因为有判断去重，所以，一个属性在一个组件里面用了无论多少次，都会只有一个watcher，因为depId一样，不是上面讲的一个属性用几次就有几个watcher，那样太浪费性能了。如果不同组件，通过props使用了同一个属性，但实际测试，直接有新dep存自己的watcher，new watcher都是新执行的。 </li></ul>]]></content>
      
      
      <categories>
          
          <category> vue2源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>5.生命周期和vue.mixin</title>
      <link href="/ypf-blog/2023/07/19/vue2%E6%BA%90%E7%A0%81/5.%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8Cvue.mixin/"/>
      <url>/ypf-blog/2023/07/19/vue2%E6%BA%90%E7%A0%81/5.%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8Cvue.mixin/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-mixin"><a href="#Vue-mixin" class="headerlink" title="Vue.mixin"></a>Vue.mixin</h2><p>在学习生命周期之前，我们先看下vue.mixin是如何实现的，因为生命周期用到了<code>Vue.mixin所用到的mergeOptions方法</code>，所以先讲<code>Vue.mixin</code></p><h3 id="全局混入Vue-mixin"><a href="#全局混入Vue-mixin" class="headerlink" title="全局混入Vue.mixin"></a>全局混入<code>Vue.mixin</code></h3><p>这里先讲下全局混入，局部混入后面再讲。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">修改 index.<span class="hljs-property">html</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">mixin</span>(&#123;<br>      <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;全局混入created-1&quot;</span>);<br>      &#125;,<br>    &#125;);<br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">mixin</span>(&#123;<br>      <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;全局混入created-2&quot;</span>);<br>      &#125;,<br>    &#125;);<br>    <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>      <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>        &#125;;<br>      &#125;,<br>      <span class="hljs-attr">created</span>: <span class="hljs-keyword">function</span> <span class="hljs-title function_">e</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;组件created&#x27;</span>);<br>      &#125;,<br>    &#125;);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vm, <span class="hljs-string">&quot;vm&quot;</span>);<br></code></pre></td></tr></table></figure><p>上面代码，在正常vue中，打印顺序为 <strong>全局混入created-1、全局混入created-2、组件created</strong>，现在我们来实现下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span>新建<span class="hljs-variable language_">global</span>-api/index.<span class="hljs-property">js</span><br><span class="hljs-keyword">import</span> &#123; mergeOptions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../utils/index&quot;</span>;<br><span class="hljs-comment">// 说明：全局api</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">initGlobalAPI</span>(<span class="hljs-params">Vue</span>) &#123;<br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">options</span> = &#123;&#125;; <span class="hljs-comment">// 1.Vue定义空options对象，为了在下面vue.mixin中通过this访问到</span><br>  <span class="hljs-comment">// 2.定义mixin方法</span><br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property">mixin</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">mixin</span>) &#123;    <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = <span class="hljs-title function_">mergeOptions</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>, mixin); <span class="hljs-comment">// 合并options赋值給this.options,下次再调用Vue.mixin时，this.options就是上次合并后的结果</span><br>  &#125;;<br>&#125;<br><span class="hljs-number">2.</span> 修改src/index.<span class="hljs-property">js</span><br>...<br><span class="hljs-keyword">import</span> &#123; initGlobalAPI &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./global-api/index&quot;</span>;<br>...<br><span class="hljs-title function_">initMixin</span>(<span class="hljs-title class_">Vue</span>)<br><span class="hljs-title function_">lifecycleMixin</span>(<span class="hljs-title class_">Vue</span>) <span class="hljs-comment">// 添加生命周期</span><br><span class="hljs-title function_">renderMixin</span>(<span class="hljs-title class_">Vue</span>) <span class="hljs-comment">// 添加render</span><br><span class="hljs-comment">// 3.引入上面创建的全局api</span><br><span class="hljs-title function_">initGlobalAPI</span>(<span class="hljs-title class_">Vue</span>) <span class="hljs-comment">// 添加全局api</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Vue</span>;<br><br><span class="hljs-number">3.</span>新增src/utils/index.<span class="hljs-property">js</span><br><span class="hljs-keyword">let</span> strats = &#123;&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">Hooks</span> = [<br>  <span class="hljs-string">&quot;beforeCreate&quot;</span>,<br>  <span class="hljs-string">&quot;created&quot;</span>,<br>  <span class="hljs-string">&quot;beforeMount&quot;</span>,<br>  <span class="hljs-string">&quot;mounted&quot;</span>,<br>  <span class="hljs-string">&quot;beforeUpdate&quot;</span>,<br>  <span class="hljs-string">&quot;updated&quot;</span>,<br>  <span class="hljs-string">&quot;beforeDestroy&quot;</span>,<br>  <span class="hljs-string">&quot;destroyed&quot;</span>,<br>];<br><span class="hljs-comment">// 遍历生命周期</span><br><span class="hljs-title class_">Hooks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">hook</span>) =&gt;</span> &#123;<br>  strats[hook] = mergeHook;<br>&#125;);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mergeHook</span>(<span class="hljs-params">parentVal, childVal</span>) &#123;<br>  <span class="hljs-keyword">if</span> (childVal) &#123;<br>    <span class="hljs-keyword">if</span> (parentVal) &#123;<br>      <span class="hljs-keyword">return</span> parentVal.<span class="hljs-title function_">concat</span>(childVal); <span class="hljs-comment">// 父子合并成一个数组 [parentVal,childVal]</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> [childVal]; <span class="hljs-comment">// 只有子，返回数组</span><br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> parentVal; <span class="hljs-comment">// 只有父，返回父</span><br>  &#125;<br>&#125;<br><span class="hljs-comment">// 4. 新增合并options方法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">mergeOptions</span>(<span class="hljs-params">parent, child</span>) &#123;<br>  <span class="hljs-keyword">const</span> options = &#123;&#125;;<br>  <span class="hljs-comment">// parent有，但是child中没有的key</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> parent) &#123;<br>    <span class="hljs-title function_">mergeField</span>(key);<br>  &#125;<br>  <span class="hljs-comment">// child中有，但是parent中没有的key</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> child) &#123;<br>    <span class="hljs-title function_">mergeField</span>(key);<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">mergeField</span>(<span class="hljs-params">key</span>) &#123;<br>    <span class="hljs-comment">// 根据key不同，采用不同的合并策略（策略模式）</span><br>    <span class="hljs-keyword">if</span> (strats[key]) &#123;<br>      options[key] = strats[key](parent[key], child[key]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      options[key] = child[key] || parent[key];<br>    &#125;<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(options)<br>  <span class="hljs-keyword">return</span> options;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们执行下，如下图<br><img src="images/mixin1.jpg" width="50%"/></p><p>我们发现只打印了全局混入的，组件的还没有打印。我们接着修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/init.<span class="hljs-property">js</span><br><span class="hljs-keyword">import</span> &#123; mergeOptions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./utils/index&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">initMixin</span>(<span class="hljs-params">Vue</span>) &#123;<br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_init</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-keyword">const</span> vm = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-comment">// vm.$options = options;  // 5.去除</span><br>    <span class="hljs-comment">// 6.修改为将用户传入的options和全局的options做合并    </span><br>    vm.<span class="hljs-property">$options</span>=<span class="hljs-title function_">mergeOptions</span>(vm.<span class="hljs-property">constructor</span>.<span class="hljs-property">options</span>,options)<br>    <span class="hljs-comment">// 初始化状态</span><br>    <span class="hljs-title function_">initState</span>(vm);<br>    ...<br>  &#125;;<br></code></pre></td></tr></table></figure><p>我们执行下，如下图，可以看到合并的数组为3个<br><img src="images/mixin2.jpg" width="50%"/><br>我们也可以在html中打印<code>vm.options</code>也可以看到。<br>现在我们options是合并到一起了，但是并未执行，接下来我们在讲解生命周期的时候来触发。</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>我们先想下，触发上面的方法，相当于触发数组的三个函数。所以我们定义一个函数，里面循环执行不就可以了，现在我们试下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/liftcycle.<span class="hljs-property">js</span><br>...<br><span class="hljs-comment">// 7.新增生命周期调用方法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">callHook</span>(<span class="hljs-params">vm, hook</span>) &#123;<br>  <span class="hljs-keyword">const</span> handlers = vm.<span class="hljs-property">$options</span>[hook]; <br>  <span class="hljs-keyword">if</span> (handlers) &#123;<br>    handlers.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">handler</span>) =&gt;</span> &#123;<br>      handler.<span class="hljs-title function_">call</span>(vm);<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码很容易理解，定义callHook方法，里面取出上面已经合并的options进行执行即可。那我们在哪里执行呢？</p><h3 id="执行生命周期"><a href="#执行生命周期" class="headerlink" title="执行生命周期"></a>执行生命周期</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span>修改src/init.<span class="hljs-property">js</span><br>  ...<br>  <span class="hljs-keyword">import</span> &#123; mountComponent,callHook &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./lifecycle&quot;</span>;<br>  <span class="hljs-keyword">import</span> &#123; mergeOptions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./utils/index&quot;</span>;<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">initMixin</span>(<span class="hljs-params">Vue</span>) &#123;<br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_init</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) &#123;<br>      <span class="hljs-keyword">const</span> vm = <span class="hljs-variable language_">this</span>;<br>      vm.<span class="hljs-property">$options</span>=<span class="hljs-title function_">mergeOptions</span>(vm.<span class="hljs-property">constructor</span>.<span class="hljs-property">options</span>,options)<br>      <span class="hljs-comment">// 8.初始化生命周期-beforeCreate</span><br>      <span class="hljs-title function_">callHook</span>(vm, <span class="hljs-string">&quot;beforeCreate&quot;</span>);<br>      <span class="hljs-comment">// 初始化状态</span><br>      <span class="hljs-title function_">initState</span>(vm);<br>      <span class="hljs-comment">// 9.初始化生命周期-created</span><br>      <span class="hljs-title function_">callHook</span>(vm, <span class="hljs-string">&quot;created&quot;</span>);<br>      <span class="hljs-comment">// 挂载模版</span><br>      <span class="hljs-keyword">if</span> (vm.<span class="hljs-property">$options</span>.<span class="hljs-property">el</span>) &#123;<br>        vm.$mount(vm.<span class="hljs-property">$options</span>.<span class="hljs-property">el</span>);<br>      &#125;<br>    &#125;;<br>    ...<br><span class="hljs-number">2.</span>修改src/liftcycle.<span class="hljs-property">js</span><br>...<br><span class="hljs-comment">// 挂载组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">mountComponent</span>(<span class="hljs-params">vm, el</span>) &#123;<br>  <span class="hljs-comment">// 10.初始化生命周期-beforeMount</span><br>  <span class="hljs-title function_">callHook</span>(vm, <span class="hljs-string">&quot;beforeMount&quot;</span>);<br>  <span class="hljs-comment">// render--&gt;vnode--&gt;真实dom</span><br>  <span class="hljs-comment">// 1.调用vm._render函数，生成虚拟dom 2.调用vm._update,将虚拟dom转换成真实dom</span><br>  vm.<span class="hljs-title function_">_update</span>(vm.<span class="hljs-title function_">_render</span>());<br>  <span class="hljs-comment">// 11.初始化生命周期-mounted</span><br>  <span class="hljs-title function_">callHook</span>(vm, <span class="hljs-string">&quot;mounted&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>至此上面我们已经完成了<code>beforeCreate--&gt;created--&gt;beforeMount--&gt;mounted</code>。查看控制台，可以看到上面定义的三个created已经执行<br><img src="images/mixin3.jpg" width="50%"/></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>vue的生命周期就是一个函数调用(<code>callHook</code>),调用vm.$options上对应的钩子函数<strong>数组</strong></li><li>这个数组是通过mergeOptions合并过来的（循环parent和child两个options，接受传过来的hook和已有的hook进行合并）</li><li><code>vue.mixin</code>会优先执行，然后执行组件的。 因为实际使用中，我们是在main.js定义，会最先执行。如果在index.html使用，<code>也要放到new Vue前面，否则不会被合并到数组执行</code>。</li><li>后面会讲：如果组件有mixin,也是混入的先执行，组件的后执行。还有data、methods、computed定义的组件会直接覆盖混入的。watch是混入先执行，组件后执行。</li></ul>]]></content>
      
      
      <categories>
          
          <category> vue2源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>4.模版编译</title>
      <link href="/ypf-blog/2023/07/11/vue2%E6%BA%90%E7%A0%81/4.%E6%A8%A1%E7%89%88%E7%BC%96%E8%AF%91/"/>
      <url>/ypf-blog/2023/07/11/vue2%E6%BA%90%E7%A0%81/4.%E6%A8%A1%E7%89%88%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<p>我们前面讲了vue初始化的时候会进行数据劫持，下面我们开始讲vue的模版编译，在这之前我们先看下官网的生命周期</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><img src="images/lifecycle.png" width="50%"/><p><a href="https://v2.cn.vuejs.org/v2/guide/instance.html">vue2官网-生命周期</a></p><h3 id="vue大致渲染流程"><a href="#vue大致渲染流程" class="headerlink" title="vue大致渲染流程"></a>vue大致渲染流程</h3><p>vue初次渲染（ new vue() ）-&gt;初始化数据(initState)-&gt;<strong>模版编译</strong>-&gt;将template变成render-&gt;生成虚拟dom-&gt;变成真实dom-&gt;放到页面</p><h3 id="本节要讲的模版编译的流程"><a href="#本节要讲的模版编译的流程" class="headerlink" title="本节要讲的模版编译的流程"></a>本节要讲的模版编译的流程</h3><p>首先el必须要有<br>        -&gt;有render直接生成虚拟dom<br>        -&gt;没有render，判断option中有没有template选项，有的话将template-&gt;变成render-&gt;生成虚拟dom<br>                       -&gt; 没有template，直接将<code>el.outerHTML</code>作为模版-&gt;变成render-&gt;生成虚拟dom</p><p>所以优先级是：el节点必须要有-render-template-el.outerHTML</p><p><strong>注意：el.outerHTML()和el.innerHTML()的区别是， outerHTML包含本层，innerHTML只包含子节点</strong></p><h2 id="获取template"><a href="#获取template" class="headerlink" title="获取template"></a>获取template</h2><p>现在我们根据上面模版编译的流程，开始通过代码获取模版</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/init.<span class="hljs-property">js</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">initMixin</span>(<span class="hljs-params">Vue</span>) &#123;<br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_init</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-keyword">const</span> vm = <span class="hljs-variable language_">this</span>;<br>    vm.<span class="hljs-property">$options</span> = options;<br>    <span class="hljs-title function_">initState</span>(vm);<br>    <span class="hljs-comment">// 1. 从options中取出el进行挂载</span><br>    <span class="hljs-keyword">if</span> (vm.<span class="hljs-property">$options</span>.<span class="hljs-property">el</span>) &#123;<br>      vm.$mount(vm.<span class="hljs-property">$options</span>.<span class="hljs-property">el</span>);<br>    &#125;<br>  &#125;;<br>  <span class="hljs-comment">// 2. 原型上定义$mount方法</span><br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$mount</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;<br>    <span class="hljs-keyword">const</span> vm = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">const</span> options = vm.<span class="hljs-property">$options</span>;<br>    el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(el);<br>    <span class="hljs-comment">// 默认先会查找有没有render方法，没有render会采用template，template也没有就用el中的内容</span><br>    <span class="hljs-keyword">if</span> (!options.<span class="hljs-property">render</span>) &#123;<br>      <span class="hljs-comment">// 对模版进行编译</span><br>      <span class="hljs-keyword">let</span> template = options.<span class="hljs-property">template</span>;<br>      <span class="hljs-keyword">if</span> (!template &amp;&amp; el) &#123;<br>        template = el.<span class="hljs-property">outerHTML</span>;<br>      &#125;<br>      <span class="hljs-comment">// 我们可以自己测试下，在option传template会用options的，没有用el.outerHTML()</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(template);<br>      <span class="hljs-comment">//  &lt;div id=&quot;app&quot;&gt;</span><br>      <span class="hljs-comment">//测试&#123;&#123;a&#125;&#125;</span><br>    <span class="hljs-comment">//&lt;/div&gt;</span><br>    &#125;<br>  &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>至此我们已经拿到了template，我们这里直接不传template，直接在body里面写,方便</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html">修改index.html<br>...<br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>      测试&#123;&#123;a&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> aa = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      <span class="hljs-comment">// template: &quot;&lt;div&gt;测试1&#123;&#123;a&#125;&#125;&lt;/div&gt;&quot;,</span></span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">    ...</span><br></code></pre></td></tr></table></figure><p>运行如下：</p><img src="images/template-str.jpg" width="50%"/><h2 id="template变成render"><a href="#template变成render" class="headerlink" title="template变成render"></a>template变成render</h2><p>大致流程如下：template-&gt;ast语法树-&gt;render字符串-&gt;render函数</p><h3 id="template变成ast"><a href="#template变成ast" class="headerlink" title="template变成ast"></a>template变成ast</h3><p>上面我们已经获取到template字符串了， 那么如何转换成ast?</p><h4 id="vue-template-compiler包"><a href="#vue-template-compiler包" class="headerlink" title="vue-template-compiler包"></a>vue-template-compiler包</h4><p>实际上，我们可以通过<a href="https://github.com/vuejs/vue/tree/main/packages/template-compiler">vue-template-compiler</a>快速把template转换成ast。随便找个文件夹测试下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> compiler = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vue-template-compiler&#x27;</span>)<br><span class="hljs-keyword">const</span> ast=compiler.<span class="hljs-title function_">compile</span>(<span class="hljs-string">&#x27;&lt;div id=&quot;app&quot;&gt;test&#123;a&#125;&lt;/div&gt;&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ast)<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><img src="images/compiler.jpg" width="50%"/> <h4 id="astexplorer"><a href="#astexplorer" class="headerlink" title="astexplorer"></a>astexplorer</h4><p>我们也可以访问<a href="https://astexplorer.net/">astexplorer</a>快速查看对应的ast</p><img src="images/ast.jpg" width="50%"/><h4 id="自己编写"><a href="#自己编写" class="headerlink" title="自己编写"></a>自己编写</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span>修改src/init.<span class="hljs-property">js</span><br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$mount</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;<br>      ...<br>      <span class="hljs-keyword">if</span> (!template &amp;&amp; el) &#123;<br>        template = el.<span class="hljs-property">outerHTML</span>;<br>      &#125;<br>      <span class="hljs-comment">// 1.增加编译模版方法</span><br>      <span class="hljs-title function_">compileToFunction</span>(template)<br>    &#125;<br>  &#125;;<br><span class="hljs-number">2.</span>新建src/compiler/index.<span class="hljs-property">js</span><br><span class="hljs-keyword">import</span> &#123; parseHTML &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./parseAst.js&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">compileToFunction</span>(<span class="hljs-params">template</span>) &#123;<br>  <span class="hljs-comment">// 2.将模版转换成ast语法树</span><br>  <span class="hljs-keyword">let</span> ast = <span class="hljs-title function_">parseHTML</span>(template);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ast, <span class="hljs-string">&quot;ast&quot;</span>);<br>&#125;<br><span class="hljs-number">3.</span> 新建src/compiler/parseAst.<span class="hljs-property">js</span>，定义转换ast的方法<br><span class="hljs-comment">// Regular Expressions for parsing tags and attributes</span><br><span class="hljs-keyword">const</span> ncname = <span class="hljs-string">`[a-zA-Z_][\\-\\.0-9_a-zA-Z]*`</span>; <span class="hljs-comment">// 匹配标签名 div、p、span等等</span><br><span class="hljs-keyword">const</span> qnameCapture = <span class="hljs-string">`((?:<span class="hljs-subst">$&#123;ncname&#125;</span>\\:)?<span class="hljs-subst">$&#123;ncname&#125;</span>)`</span>; <span class="hljs-comment">// 匹配特殊标签名，比如：my:xx</span><br><span class="hljs-keyword">const</span> attribute =<br>  <span class="hljs-regexp">/^\s*([^\s&quot;&#x27;&lt;&gt;\/=]+)(?:\s*(=)\s*(?:&quot;([^&quot;]*)&quot;+|&#x27;([^&#x27;]*)&#x27;+|([^\s&quot;&#x27;=&lt;&gt;`]+)))?/</span>; <span class="hljs-comment">// 匹配属性</span><br><span class="hljs-keyword">const</span> dynamicArgAttribute =<br>  <span class="hljs-regexp">/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+?\][^\s&quot;&#x27;&lt;&gt;\/=]*)(?:\s*(=)\s*(?:&quot;([^&quot;]*)&quot;+|&#x27;([^&#x27;]*)&#x27;+|([^\s&quot;&#x27;=&lt;&gt;`]+)))?/</span>; <span class="hljs-comment">// 匹配动态参数</span><br><span class="hljs-keyword">const</span> startTagOpen = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">`^&lt;<span class="hljs-subst">$&#123;qnameCapture&#125;</span>`</span>); <span class="hljs-comment">// 标签开头的正则，捕获的内容是标签名</span><br><span class="hljs-keyword">const</span> startTagClose = <span class="hljs-regexp">/^\s*(\/?)&gt;/</span>; <span class="hljs-comment">// 匹配标签结束的 &gt;</span><br><span class="hljs-keyword">const</span> endTag = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">`^&lt;\\/<span class="hljs-subst">$&#123;qnameCapture&#125;</span>[^&gt;]*&gt;`</span>); <span class="hljs-comment">// 匹配结尾标签 &lt;/div&gt;</span><br><span class="hljs-keyword">const</span> defaultTagRE = <span class="hljs-regexp">/\&#123;\&#123;((?:.|\r?\n)+?)\&#125;\&#125;/g</span>; <span class="hljs-comment">// 匹配双括号</span><br><span class="hljs-comment">// 构造ast语法树结构</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createASTElement</span>(<span class="hljs-params">tagName, attrs</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">tag</span>: tagName, <span class="hljs-comment">// 标签名</span><br>    <span class="hljs-attr">type</span>: <span class="hljs-number">1</span>, <span class="hljs-comment">// 节点类型（js中的node.nodeType, 1 Element 2 Attribute 3 Text 4 CDATA Section 5 Entity Reference 6 Entity 7 Processing Instrucion 8 Comment 9 Document 10 Document Type 11 Document Fragment 12 Notation）</span><br>    <span class="hljs-attr">children</span>: [], <span class="hljs-comment">// 子节点</span><br>    attrs, <span class="hljs-comment">// 属性集合</span><br>    <span class="hljs-attr">parent</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// 是否有父节点</span><br>  &#125;;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">parseHTML</span>(<span class="hljs-params">html</span>) &#123;<br>  <span class="hljs-comment">// &lt;div id=&quot;app&quot;&gt;测试&#123;&#123;a&#125;&#125;&lt;/div&gt;</span><br>  <span class="hljs-comment">// console.log(html);</span><br>  <span class="hljs-keyword">let</span> root = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 根节点</span><br>  <span class="hljs-keyword">let</span> stack = []; <span class="hljs-comment">// 栈结构（先进后出），开始标签一个个入栈，结束标签一个个出栈</span><br>  <span class="hljs-keyword">let</span> currentParent; <span class="hljs-comment">// 当前父节点</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">tagName, attrs</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tagName, attrs, <span class="hljs-string">&quot;开始标签&quot;</span>);<br>    <span class="hljs-keyword">let</span> element = <span class="hljs-title function_">createASTElement</span>(tagName, attrs);<br>    <span class="hljs-keyword">if</span> (!root) &#123;<br>      root = element;<br>    &#125;<br>    currentParent = element;<br>    stack.<span class="hljs-title function_">push</span>(element);<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">end</span>(<span class="hljs-params">tagName</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tagName, <span class="hljs-string">&quot;结束标签&quot;</span>);<br>    <span class="hljs-keyword">let</span> element = stack.<span class="hljs-title function_">pop</span>(); <span class="hljs-comment">// 取出栈中最后一个，前一个就是当前的父节点</span><br>    currentParent = stack[stack.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]; <span class="hljs-comment">// 当前父节点</span><br>    <span class="hljs-keyword">if</span> (currentParent) &#123;<br>      <span class="hljs-comment">// 在闭合时可以知道这个标签的父亲是谁</span><br>      element.<span class="hljs-property">parent</span> = currentParent;<br>      currentParent.<span class="hljs-property">children</span>.<span class="hljs-title function_">push</span>(element); <span class="hljs-comment">// 实现一个树的父子关系</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">chars</span>(<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text, <span class="hljs-string">&quot;文本&quot;</span>);<br>    text = text.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\s/g</span>, <span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">// 去除空格</span><br>    <span class="hljs-keyword">if</span> (text) &#123;<br>      currentParent.<span class="hljs-property">children</span>.<span class="hljs-title function_">push</span>(&#123;<br>        <span class="hljs-comment">// 文本没有标签，直接放到父节点的children中</span><br>        <span class="hljs-attr">type</span>: <span class="hljs-number">3</span>,<br>        text,<br>      &#125;);<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// html为空结束循环</span><br>  <span class="hljs-keyword">while</span> (html) &#123;<br>    <span class="hljs-keyword">let</span> textEnd = html.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;&lt;&quot;</span>); <span class="hljs-comment">// 查找&lt;的索引</span><br>    <span class="hljs-comment">// 如果当前索引为0，肯定是一个标签，开始标签&lt;或结束标签&lt;/中的 &lt;</span><br>    <span class="hljs-keyword">if</span> (textEnd == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// (1）开始标签</span><br>      <span class="hljs-keyword">let</span> startTagMatch = <span class="hljs-title function_">parseStartTag</span>(); <span class="hljs-comment">// 将开始标签转换成对应的ast语法树</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(startTagMatch, <span class="hljs-string">&quot;startTagMatch&quot;</span>);<br>      <span class="hljs-comment">//    &#123;</span><br>      <span class="hljs-comment">//     &quot;tagName&quot;: &quot;div&quot;,</span><br>      <span class="hljs-comment">//     &quot;attrs&quot;: [</span><br>      <span class="hljs-comment">//         &#123;</span><br>      <span class="hljs-comment">//             &quot;name&quot;: &quot;id&quot;,</span><br>      <span class="hljs-comment">//             &quot;value&quot;: &quot;app&quot;</span><br>      <span class="hljs-comment">//             &#125;</span><br>      <span class="hljs-comment">//         ]</span><br>      <span class="hljs-comment">//    &#125;</span><br>      <span class="hljs-keyword">if</span> (startTagMatch) &#123;<br>        <span class="hljs-title function_">start</span>(startTagMatch.<span class="hljs-property">tagName</span>, startTagMatch.<span class="hljs-property">attrs</span>); <span class="hljs-comment">// 解析开始标签</span><br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      <span class="hljs-comment">// (2）结束标签</span><br>      <span class="hljs-keyword">let</span> endTagMatch = html.<span class="hljs-title function_">match</span>(endTag);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(endTagMatch, <span class="hljs-string">&quot;endTagMatch&quot;</span>); <span class="hljs-comment">// [&#x27;&lt;/div&gt;&#x27;, &#x27;div&#x27;, index: 0, input: &#x27;&lt;/div&gt;&#x27;, groups: undefined]</span><br>      <span class="hljs-keyword">if</span> (endTagMatch) &#123;<br>        <span class="hljs-title function_">advance</span>(endTagMatch[<span class="hljs-number">0</span>].<span class="hljs-property">length</span>); <span class="hljs-comment">// 删除结束标签</span><br>        <span class="hljs-title function_">end</span>(endTagMatch[<span class="hljs-number">1</span>]); <span class="hljs-comment">//  处理结束标签</span><br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 如果索引大于0，肯定是文本</span><br>    <span class="hljs-keyword">let</span> text;<br>    <span class="hljs-keyword">if</span> (textEnd &gt; <span class="hljs-number">0</span>) &#123;<br>      text = html.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, textEnd); <span class="hljs-comment">// 获取文本</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (text) &#123;<br>      <span class="hljs-title function_">advance</span>(text.<span class="hljs-property">length</span>); <span class="hljs-comment">// 删除文本</span><br>      <span class="hljs-title function_">chars</span>(text); <span class="hljs-comment">// 处理文本</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 将开始标签转换成对应的ast语法树 &#123;&quot;tagName&quot;: &quot;div&quot;,&quot;attrs&quot;: [&#123;&quot;name&quot;: &quot;id&quot;,&quot;value&quot;: &quot;app&quot;&#125;]&#125;</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">parseStartTag</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> start = html.<span class="hljs-title function_">match</span>(startTagOpen); <span class="hljs-comment">// 匹配开始标签 结果：[&quot;&lt;div&quot;,&quot;div&quot;,groups: undefined,index:0,input:&quot;&lt;div id=\&quot;app\&quot;&gt;测试&#123;&#123;a&#125;&#125;&lt;/div&gt;&quot;,length:2] 或者false</span><br>    <span class="hljs-keyword">if</span> (start) &#123;<br>      <span class="hljs-keyword">const</span> match = &#123;<br>        <span class="hljs-attr">tagName</span>: start[<span class="hljs-number">1</span>], <span class="hljs-comment">// 标签名</span><br>        <span class="hljs-attr">attrs</span>: [], <span class="hljs-comment">// 属性</span><br>      &#125;;<br>      <span class="hljs-title function_">advance</span>(start[<span class="hljs-number">0</span>].<span class="hljs-property">length</span>); <span class="hljs-comment">// 删除开始标签</span><br>      <span class="hljs-comment">//  匹配属性（注意：多个属性、&gt;结束）</span><br>      <span class="hljs-keyword">let</span> end, attr;<br>      <span class="hljs-comment">// 如果没有遇到标签结尾就不停的解析</span><br>      <span class="hljs-comment">// console.log(html.match(startTagClose),1); // 匹配到了&gt; 结果：[&quot;&gt;&quot;,groups: undefined,index: 0,input: &quot;&lt;div id=\&quot;app\&quot;&gt;测试&#123;&#123;a&#125;&#125;&lt;/div&gt;&quot;,length: 1]</span><br>      <span class="hljs-comment">// console.log(html.match(attribute),2); // 匹配到了属性 结果：[&quot;id=\&quot;app\&quot;&quot;,&quot;id&quot;,&quot;=&quot;,&quot;app&quot;,undefined,undefined,index: 0,input: &quot;&lt;div id=\&quot;app\&quot;&gt;测试&#123;&#123;a&#125;&#125;&lt;/div&gt;&quot;,length: 2]</span><br>      <span class="hljs-keyword">while</span> (<br>        <span class="hljs-comment">// 没有遇到标签结尾</span><br>        !(end = html.<span class="hljs-title function_">match</span>(startTagClose)) &amp;&amp;<br>        <span class="hljs-comment">// 匹配到了动态参数属性或者匹配到了普通属性</span><br>        (attr = html.<span class="hljs-title function_">match</span>(dynamicArgAttribute) || html.<span class="hljs-title function_">match</span>(attribute))<br>      ) &#123;<br>        match.<span class="hljs-property">attrs</span>.<span class="hljs-title function_">push</span>(&#123;<br>          <span class="hljs-attr">name</span>: attr[<span class="hljs-number">1</span>],<br>          <span class="hljs-attr">value</span>: attr[<span class="hljs-number">3</span>] || attr[<span class="hljs-number">4</span>] || attr[<span class="hljs-number">5</span>],<br>        &#125;); <span class="hljs-comment">// 将属性放到match.attrs中</span><br>        <span class="hljs-title function_">advance</span>(attr[<span class="hljs-number">0</span>].<span class="hljs-property">length</span>); <span class="hljs-comment">//  删除属性</span><br>        attr.<span class="hljs-property">start</span> = html.<span class="hljs-property">length</span>; <span class="hljs-comment">// 属性开始的索引</span><br>        attr.<span class="hljs-property">end</span> = html.<span class="hljs-property">length</span>; <span class="hljs-comment">// 属性结束的索引</span><br>      &#125;<br>      <span class="hljs-keyword">if</span> (end) &#123;<br>        <span class="hljs-title function_">advance</span>(end[<span class="hljs-number">0</span>].<span class="hljs-property">length</span>); <span class="hljs-comment">// 删除开始标签</span><br>        <span class="hljs-keyword">return</span> match;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 删除匹配到的内容</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">advance</span>(<span class="hljs-params">n</span>) &#123;<br>    html = html.<span class="hljs-title function_">substring</span>(n); <span class="hljs-comment">// 删除n个字符</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(html, <span class="hljs-string">&quot;html&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> root;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上面的代码在index.html用如下模版测试下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    测试&#123;&#123;a&#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们打印下<br><img src="images/template-ast.jpg" width="50%"/></p><h4 id="梳理下流程"><a href="#梳理下流程" class="headerlink" title="梳理下流程"></a>梳理下流程</h4><p>以上面的模版为例，大致流程如下</p><p>while循环模版字符串，匹配完一个标签或节点，删除掉，然后继续匹配，直到字符串为空结束<br>1.从左至右，先判断&lt; 开头，说明是开头标签或者结束标签，</p><ul><li>通过正则判断是开头标签，<strong>删除掉开头标签</strong>，解析开头标签的tagName和属性attr，变成对象结构 <code>&#123;&quot;tagName&quot;: &quot;div&quot;,  &quot;attrs&quot;: [&#123;&quot;name&quot;: &quot;id&quot;,&quot;value&quot;: &quot;app&quot;&#125;]&#125;</code>,继续从左至右循环，直到匹配到开头结束标签，然后删除<br>然后定义一个ast结构,并且当前节点element=<code>&#123;tag: tagName, type: 1, children: [], attrs:[],parent: null&#125;</code>对象格式，将当前节点element执行入栈操作，并且定义一个当前节点的父节点<code>currentParent=element</code></li><li>通过正则判断是结束标签，stack的最后一个肯定是当前节点即（element = stack.pop()），前一个是父节点，所以<code>currentParent=stack[stack.length - 1] , element.parent=currentParent，  currentParent.children.push(element)</code>，<strong>删除结束标签</strong></li><li>如果不是&lt; 开头，肯定是文本，<strong>删除掉文本</strong>，然后解析文本：先把文本去除空格，然后 <code>currentParent.children.push(&#123;type: 3,text&#125;)</code>;</li></ul><h3 id="ast树转render字符串"><a href="#ast树转render字符串" class="headerlink" title="ast树转render字符串"></a>ast树转render字符串</h3><p>我们先看下render字符串长什么样子？<br>用如下html举例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 12px; color: red;&quot;</span>&gt;</span><br>  测试&#123;&#123;a&#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>转换后的render字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">_c</span>(<span class="hljs-string">&#x27;div&#x27;</span>,&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&quot;app&quot;</span>,<span class="hljs-attr">style</span>:&#123;<span class="hljs-string">&quot;font-size&quot;</span>:<span class="hljs-string">&quot; 12px&quot;</span>,<span class="hljs-string">&quot; color&quot;</span>:<span class="hljs-string">&quot; red&quot;</span>&#125;&#125;,<span class="hljs-title function_">_v</span>(<span class="hljs-string">&quot;测试&quot;</span>+<span class="hljs-title function_">_s</span>(a)),<span class="hljs-title function_">_c</span>(<span class="hljs-string">&#x27;h1&#x27;</span>,<span class="hljs-literal">undefined</span>,<span class="hljs-title function_">_v</span>(<span class="hljs-string">&quot;1&quot;</span>)))<br></code></pre></td></tr></table></figure><p>其中有三个函数，后面会定义，分别为<code>_c:元素 _v:文本 _s:插值表达式</code>,其中_c有是三个参数（tagName， 属性， children）</p><p>下面我们来实现上面的render字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/compiler/index.<span class="hljs-property">js</span><br>...<br><span class="hljs-keyword">import</span> &#123; generate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./generate.js&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">compileToFunction</span>(<span class="hljs-params">template</span>) &#123;<br>  <span class="hljs-keyword">let</span> ast = <span class="hljs-title function_">parseHTML</span>(template);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ast, <span class="hljs-string">&quot;ast&quot;</span>);<br>  <span class="hljs-comment">// 1.通过ast语法树转换成render字符串</span><br>  <span class="hljs-keyword">let</span> code=<span class="hljs-title function_">generate</span>(ast)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(code,<span class="hljs-string">&#x27;code&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs js">新增src/compiler/generate.<span class="hljs-property">js</span><br><br><span class="hljs-keyword">const</span> defaultTagRE = <span class="hljs-regexp">/\&#123;\&#123;((?:.|\r?\n)+?)\&#125;\&#125;/g</span>; <span class="hljs-comment">// 匹配双括号</span><br><br><span class="hljs-comment">// _c(&#x27;div&#x27;,&#123;id:&quot;app&quot;,style:&#123;&quot;font-size&quot;:&quot; 12px&quot;,&quot; color&quot;:&quot; red&quot;&#125;&#125;,,_c(&#x27;h1&#x27;,undefined,_v(&quot;1&quot;)))))</span><br><span class="hljs-comment">// _c:元素 _v:文本 _s:插值表达式 </span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">ast</span>) &#123;<br>  <span class="hljs-keyword">const</span> children = <span class="hljs-title function_">genChildren</span>(ast);  <br>  <span class="hljs-keyword">let</span> code = <span class="hljs-string">`_c(&#x27;<span class="hljs-subst">$&#123;ast.tag&#125;</span>&#x27;,<span class="hljs-subst">$&#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">    ast.attrs.length ? genProps(ast.attrs) : <span class="hljs-string">&quot;undefined&quot;</span></span></span><br><span class="hljs-subst"><span class="hljs-string">  &#125;</span><span class="hljs-subst">$&#123;children ? <span class="hljs-string">`,<span class="hljs-subst">$&#123;children&#125;</span>`</span> : <span class="hljs-string">&quot;&quot;</span>&#125;</span>)`</span>;<br>  <span class="hljs-keyword">return</span> code;<br>&#125;<br><span class="hljs-comment">// 生成属性</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">genProps</span>(<span class="hljs-params">attrs</span>) &#123;<br>  <span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; attrs.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> attr = attrs[i];<br>    <span class="hljs-keyword">let</span> obj = &#123;&#125;;<br>    <span class="hljs-keyword">if</span> (attr.<span class="hljs-property">name</span> === <span class="hljs-string">&quot;style&quot;</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(attr.<span class="hljs-property">value</span>, <span class="hljs-string">&quot;attr.value&quot;</span>); <span class="hljs-comment">// color: red;font-size: 12px</span><br>      attr.<span class="hljs-property">value</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;;&quot;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> [key, value] = item.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;:&quot;</span>);<br>        obj[key] = value;<br>      &#125;);<br>      attr.<span class="hljs-property">value</span> = obj; <span class="hljs-comment">// &#123;color: red,font-size: 12px&#125;</span><br>    &#125;<br>    str += <span class="hljs-string">`<span class="hljs-subst">$&#123;attr.name&#125;</span>:<span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(attr.value)&#125;</span>,`</span>;<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str, <span class="hljs-string">&quot;str&quot;</span>); <span class="hljs-comment">// id:&quot;app&quot;,style:&#123;&quot;font-size&quot;:&quot; 12px&quot;,&quot; color&quot;:&quot; red&quot;&#125;,</span><br>  <span class="hljs-comment">// 删除最后一位逗号且前面加上大括号</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`&#123;<span class="hljs-subst">$&#123;str.slice(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>)&#125;</span>&#125;`</span>; <span class="hljs-comment">// &#123;id:&quot;app&quot;,style:&#123;&quot;font-size&quot;:&quot; 12px&quot;,&quot; color&quot;:&quot; red&quot;&#125;&#125;</span><br>&#125;<br><span class="hljs-comment">// 生成子节点</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">genChildren</span>(<span class="hljs-params">el</span>) &#123;<br>  <span class="hljs-keyword">let</span> children = el.<span class="hljs-property">children</span>;<br>  <span class="hljs-keyword">if</span> (children &amp;&amp; children.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">const</span> target= <span class="hljs-string">`<span class="hljs-subst">$&#123;children.map((c) =&gt; gen(c)).join(<span class="hljs-string">&quot;,&quot;</span>)&#125;</span>`</span>;<br>    <span class="hljs-keyword">return</span> target<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">gen</span>(<span class="hljs-params">el</span>) &#123;<br>    <span class="hljs-comment">// 如果是元素节点，递归调用generate</span><br>  <span class="hljs-keyword">if</span> (el.<span class="hljs-property">type</span> === <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">generate</span>(el);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">let</span> text = el.<span class="hljs-property">text</span>;<br>    <span class="hljs-comment">// 如果不是双括号的话，直接返回_v(text)</span><br>    <span class="hljs-keyword">if</span> (!defaultTagRE.<span class="hljs-title function_">test</span>(text)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">`_v(<span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(text)&#125;</span>)`</span>;<br>    &#125;<br>    <span class="hljs-comment">// 如果是双括号的话，将双括号中的内容放入tokens</span><br>    <span class="hljs-keyword">let</span> tokens = []; <span class="hljs-comment">// 存放每一段代码</span><br>    <span class="hljs-keyword">let</span> match, index; <span class="hljs-comment">// 每次匹配的结果，和匹配的索引</span><br>    <span class="hljs-keyword">let</span> lastIndex = (defaultTagRE.<span class="hljs-property">lastIndex</span> = <span class="hljs-number">0</span>); <span class="hljs-comment">// 匹配的开始索引</span><br>    <span class="hljs-comment">// 每次匹配到的结果都放入tokens中</span><br>    <span class="hljs-keyword">while</span> ((match = defaultTagRE.<span class="hljs-title function_">exec</span>(text))) &#123;<br>      index = match.<span class="hljs-property">index</span>; <span class="hljs-comment">// 匹配到的索引</span><br>      <span class="hljs-keyword">if</span> (index &gt; lastIndex) &#123; <span class="hljs-comment">// 说明双括号前面有文本</span><br>        tokens.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(text.<span class="hljs-title function_">slice</span>(lastIndex, index))); <span class="hljs-comment">//  双括号前面的文本</span><br>      &#125;<br>      tokens.<span class="hljs-title function_">push</span>(<span class="hljs-string">`_s(<span class="hljs-subst">$&#123;match[<span class="hljs-number">1</span>].trim()&#125;</span>)`</span>); <span class="hljs-comment">// 双括号中的内容</span><br>      lastIndex = index + match[<span class="hljs-number">0</span>].<span class="hljs-property">length</span>; <span class="hljs-comment">// 匹配到的索引+匹配到的内容的长度</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (lastIndex &lt; text.<span class="hljs-property">length</span>) &#123; <span class="hljs-comment">// 说明双括号后面有文本</span><br>      tokens.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(text.<span class="hljs-title function_">slice</span>(lastIndex))); <span class="hljs-comment">// 双括号后面的文本</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`_v(<span class="hljs-subst">$&#123;tokens.join(<span class="hljs-string">&quot;+&quot;</span>)&#125;</span>)`</span>; <span class="hljs-comment">// 将tokens中的内容用+拼接</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>运行上面代码，即可打印出code。</p><h4 id="梳理下流程-1"><a href="#梳理下流程-1" class="headerlink" title="梳理下流程"></a>梳理下流程</h4><p>先看下ast结构</p><p><img src="images/ast1.jpg" width="50%"/>,<br>我们要转换成 <code>_c(&#39;div&#39;,&#123;id:&quot;app&quot;,style:&#123;&quot;font-size&quot;:&quot; 12px&quot;,&quot; color&quot;:&quot; red&quot;&#125;&#125;,,_c(&#39;h1&#39;,undefined,_v(&quot;1&quot;)))))</code><br>很明显ast是个对象，我们进行如下操作</p><h4 id="第一层"><a href="#第一层" class="headerlink" title="第一层"></a>第一层</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">ast</span>) &#123;<br>  <span class="hljs-keyword">const</span> children = <span class="hljs-title function_">genChildren</span>(ast); <span class="hljs-comment">// 单独定义方法处理children</span><br>  <span class="hljs-comment">// 第一层</span><br>  <span class="hljs-keyword">let</span> code = <span class="hljs-string">`_c(&#x27;<span class="hljs-subst">$&#123;ast.tag&#125;</span>&#x27;,<span class="hljs-subst">$&#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">    ast.attrs.length ? genProps(ast.attrs) : <span class="hljs-string">&quot;undefined&quot;</span> // 单独定义方法处理attrs</span></span><br><span class="hljs-subst"><span class="hljs-string">  &#125;</span><span class="hljs-subst">$&#123;children ? <span class="hljs-string">`,<span class="hljs-subst">$&#123;children&#125;</span>`</span> : <span class="hljs-string">&quot;&quot;</span>&#125;</span>)`</span>;<br>  <span class="hljs-keyword">return</span> code;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="处理attrs"><a href="#处理attrs" class="headerlink" title="处理attrs"></a>处理attrs</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">将attrs数组转成json字符串&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&quot;app&quot;</span>,<span class="hljs-attr">style</span>:&#123;<span class="hljs-string">&quot;font-size&quot;</span>:<span class="hljs-string">&quot; 12px&quot;</span>,<span class="hljs-string">&quot; color&quot;</span>:<span class="hljs-string">&quot; red&quot;</span>&#125;&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">genProps</span>(<span class="hljs-params">attrs</span>) &#123;<br>  <span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; attrs.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> attr = attrs[i];<br>    <span class="hljs-keyword">let</span> obj = &#123;&#125;;<br>    <span class="hljs-keyword">if</span> (attr.<span class="hljs-property">name</span> === <span class="hljs-string">&quot;style&quot;</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(attr.<span class="hljs-property">value</span>, <span class="hljs-string">&quot;attr.value&quot;</span>); <span class="hljs-comment">// color: red;font-size: 12px</span><br>      attr.<span class="hljs-property">value</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;;&quot;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> [key, value] = item.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;:&quot;</span>);<br>        obj[key] = value;<br>      &#125;);<br>      attr.<span class="hljs-property">value</span> = obj; <span class="hljs-comment">// &#123;color: red,font-size: 12px&#125;</span><br>    &#125;<br>    str += <span class="hljs-string">`<span class="hljs-subst">$&#123;attr.name&#125;</span>:<span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(attr.value)&#125;</span>,`</span>;<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str, <span class="hljs-string">&quot;str&quot;</span>); <span class="hljs-comment">// id:&quot;app&quot;,style:&#123;&quot;font-size&quot;:&quot; 12px&quot;,&quot; color&quot;:&quot; red&quot;&#125;,</span><br>  <span class="hljs-comment">// 删除最后一位逗号且前面加上大括号</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`&#123;<span class="hljs-subst">$&#123;str.slice(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>)&#125;</span>&#125;`</span>; <span class="hljs-comment">// &#123;id:&quot;app&quot;,style:&#123;&quot;font-size&quot;:&quot; 12px&quot;,&quot; color&quot;:&quot; red&quot;&#125;&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="处理children"><a href="#处理children" class="headerlink" title="处理children"></a>处理children</h4><p>children的最终目的也是生成一个和第一步一样的结构 <code>_c(标签,属性,children)</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 生成子节点</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">genChildren</span>(<span class="hljs-params">el</span>) &#123;<br>  <span class="hljs-keyword">let</span> children = el.<span class="hljs-property">children</span>;<br>  <span class="hljs-keyword">if</span> (children &amp;&amp; children.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">const</span> target= <span class="hljs-string">`<span class="hljs-subst">$&#123;children.map((c) =&gt; gen(c)).join(<span class="hljs-string">&quot;,&quot;</span>)&#125;</span>`</span>; <span class="hljs-comment">// 循环children，对每一项判断是节点的话，重新调用第一步的generate方法，最后将数组用逗号拼接起来变成字符串</span><br>    <span class="hljs-keyword">return</span> target<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">gen</span>(<span class="hljs-params">el</span>) &#123;<br>    <span class="hljs-comment">// 如果是元素节点，递归调用generate</span><br>  <span class="hljs-keyword">if</span> (el.<span class="hljs-property">type</span> === <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">generate</span>(el);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 如果不是节点，那肯定是文本</span><br>    <span class="hljs-keyword">let</span> text = el.<span class="hljs-property">text</span>;<br>    <span class="hljs-comment">// 如果不是双括号的话，直接返回_v(text)</span><br>    <span class="hljs-keyword">if</span> (!defaultTagRE.<span class="hljs-title function_">test</span>(text)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">`_v(<span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(text)&#125;</span>)`</span>;<br>    &#125;<br>    <span class="hljs-comment">// 如果是双括号的话，将双括号中的内容放入tokens</span><br>    <span class="hljs-keyword">let</span> tokens = []; <span class="hljs-comment">// 存放每一段代码</span><br>    <span class="hljs-keyword">let</span> match, index; <span class="hljs-comment">// 每次匹配的结果，和匹配的索引</span><br>    <span class="hljs-keyword">let</span> lastIndex = (defaultTagRE.<span class="hljs-property">lastIndex</span> = <span class="hljs-number">0</span>); <span class="hljs-comment">// 匹配的开始索引</span><br>    <span class="hljs-comment">// 每次匹配到的结果都放入tokens中</span><br>    <span class="hljs-keyword">while</span> ((match = defaultTagRE.<span class="hljs-title function_">exec</span>(text))) &#123;<br>      index = match.<span class="hljs-property">index</span>; <span class="hljs-comment">// 匹配到的索引</span><br>      <span class="hljs-keyword">if</span> (index &gt; lastIndex) &#123; <span class="hljs-comment">// 说明双括号前面有文本</span><br>        tokens.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(text.<span class="hljs-title function_">slice</span>(lastIndex, index))); <span class="hljs-comment">//  双括号前面的文本</span><br>      &#125;<br>      tokens.<span class="hljs-title function_">push</span>(<span class="hljs-string">`_s(<span class="hljs-subst">$&#123;match[<span class="hljs-number">1</span>].trim()&#125;</span>)`</span>); <span class="hljs-comment">// 双括号中的内容</span><br>      lastIndex = index + match[<span class="hljs-number">0</span>].<span class="hljs-property">length</span>; <span class="hljs-comment">// 匹配到的索引+匹配到的内容的长度</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (lastIndex &lt; text.<span class="hljs-property">length</span>) &#123; <span class="hljs-comment">// 说明双括号后面有文本</span><br>      tokens.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(text.<span class="hljs-title function_">slice</span>(lastIndex))); <span class="hljs-comment">// 双括号后面的文本</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`_v(<span class="hljs-subst">$&#123;tokens.join(<span class="hljs-string">&quot;+&quot;</span>)&#125;</span>)`</span>; <span class="hljs-comment">// 将tokens中的内容用+拼接</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="render字符串转render函数"><a href="#render字符串转render函数" class="headerlink" title="render字符串转render函数"></a>render字符串转render函数</h3><p>转函数很简单，我们用函数包装起来即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">修改src/compiler/index.<span class="hljs-property">js</span><br>...<br><span class="hljs-keyword">import</span> &#123; generate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./generate.js&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">compileToFunction</span>(<span class="hljs-params">template</span>) &#123;<br>  ...<br>  <span class="hljs-keyword">let</span> code=<span class="hljs-title function_">generate</span>(ast)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(code,<span class="hljs-string">&#x27;code&#x27;</span>)<br>  <span class="hljs-comment">// 3.通过new Function + with来生成render函数</span><br>  <span class="hljs-keyword">let</span> render = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">`with(this)&#123;return <span class="hljs-subst">$&#123;code&#125;</span>&#125;`</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(render,<span class="hljs-string">&#x27;render&#x27;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>()); <span class="hljs-comment">// 注意，没什么用，这里只是为了看下随便打印个函数是啥样子的</span><br>  <span class="hljs-keyword">return</span> render <span class="hljs-comment">// render出去，调用compileToFunction的地方用</span><br>&#125;<br></code></pre></td></tr></table></figure><img src="images/render.jpg" width="50%"/><h4 id="with"><a href="#with" class="headerlink" title="with"></a>with</h4><p>我们发现上面除去定义一个函数，还使用了<code>with函数</code>，这个是干啥的？我们先了解下什么是with函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj=&#123;<br>  <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>:<span class="hljs-number">2</span><br>&#125;<br><span class="hljs-title function_">with</span>(<span class="hljs-params">obj</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">a</span>) <span class="hljs-comment">// 1 </span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码会自执行,执行上面代码直接会执行with函数中的代码打印<br>**with函数是将代码的作用域设置到一个特定的作用域中(即with(作用域))**，此时函数内我们可以省略<code>obj.</code>，直接拿到属性值，注意：</p><ul><li>with函数已弃用，strict不能使用，会报错</li><li>with函数是早期的js函数，兼容所有浏览器，包括ie6</li><li>ES6模块（如定一个函数，使用了导入导出，或者es6的Class）自带严格模式，不管你有没有在模块头部加上”use strict”，所以不能使用with</li></ul><p>了解了with函数的作用，我们可以想下我们上面定义了<code>_c:元素 _v:文本 _s:插值表达式</code>,这三个函数是直接使用的，但window上没有该方法啊，<br>所以这三个方法肯定定义到vue的原型链上了，所以我们将this传入到with(this)中，就可以直接使用了。</p><h2 id="render转vdom"><a href="#render转vdom" class="headerlink" title="render转vdom"></a>render转vdom</h2><h3 id="vdom和ast区别"><a href="#vdom和ast区别" class="headerlink" title="vdom和ast区别"></a>vdom和ast区别</h3><p>我们先看下vdom是啥样子的？<br>还是用如下html举例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 12px; color: red;&quot;</span>&gt;</span><br>  测试&#123;&#123;a&#125;&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ast</span><br>&#123;<br>  <span class="hljs-attr">type</span>:<span class="hljs-number">1</span>,<br>  <span class="hljs-attr">parent</span>:<span class="hljs-literal">null</span>,<br>  <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;div&quot;</span>,<br>  <span class="hljs-attr">attrs</span>:[<br>    &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;id&quot;</span>,<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;app&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;style&quot;</span>,<br>        <span class="hljs-string">&quot;value&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;font-size&quot;</span>: <span class="hljs-string">&quot;12px&quot;</span>,<br>            <span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;red&quot;</span><br>        &#125;<br>    &#125;<br>  ],<br>  <span class="hljs-attr">children</span>:[<br>    &#123;<span class="hljs-attr">type</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;测试&#123;&#123;a&#125;&#125;&#x27;</span>&#125;,<br>    &#123;<span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;h1&#x27;</span>, <span class="hljs-attr">type</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">children</span>: [&#123;<span class="hljs-attr">type</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;1&#x27;</span>&#125;], <span class="hljs-attr">attrs</span>: [], <span class="hljs-attr">parent</span>:<span class="hljs-literal">null</span>&#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// vdom</span><br>&#123;<br>  <span class="hljs-attr">tag</span>: <span class="hljs-string">&quot;div&quot;</span>,<br>  <span class="hljs-attr">data</span>:&#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;app&quot;</span>,<br>    <span class="hljs-string">&quot;style&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;font-size&quot;</span>: <span class="hljs-string">&quot;12px&quot;</span>,<br>        <span class="hljs-string">&quot;color&quot;</span>: <span class="hljs-string">&quot;red&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">children</span>:[<br>   &#123;<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;测试1&quot;</span>,<span class="hljs-attr">data</span>:<span class="hljs-literal">undefined</span>,<span class="hljs-attr">key</span>:<span class="hljs-literal">undefined</span>,<span class="hljs-attr">tag</span>:<span class="hljs-literal">undefined</span>,<span class="hljs-attr">children</span>:<span class="hljs-literal">undefined</span>&#125;,<br>   &#123;<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-literal">undefined</span>,<span class="hljs-attr">data</span>:<span class="hljs-literal">undefined</span>,<span class="hljs-attr">key</span>:<span class="hljs-literal">undefined</span>,<span class="hljs-attr">tag</span>:<span class="hljs-string">&quot;h1&quot;</span>,<span class="hljs-attr">children</span>:[&#123;<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-attr">data</span>:<span class="hljs-literal">undefined</span>,<span class="hljs-attr">key</span>:<span class="hljs-literal">undefined</span>,<span class="hljs-attr">tag</span>:<span class="hljs-literal">undefined</span>,<span class="hljs-attr">children</span>:<span class="hljs-literal">undefined</span>&#125;]&#125;<br>  ],<br>  <span class="hljs-attr">key</span>:<span class="hljs-string">&quot;key&quot;</span>,<br>  <span class="hljs-attr">text</span>:文本节点<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们发现实际上ast和vdom很像，区别是：</p><ul><li>实际上ast很复杂，本例子中只是主流程，ast含有其他属性，如start、end等</li><li>vdom和ast都是树结构，只不过vdom相当于ast的格式化结构</li><li>下面会讲到，vdom转化成真实dom，会调用createElm方法（此时vdom会多了一个el属性，其值是通过createElement或者createTextNode创建的真实dom节点）。</li><li><strong>vdom的模版变量值已经变成了真实的值，并不是ast的<code>测试&#123;&#123;a&#125;&#125;</code>,而是 <code>测试1</code></strong></li></ul><p>下面我们来实现下：</p><h3 id="render转vdom-1"><a href="#render转vdom-1" class="headerlink" title="render转vdom"></a>render转vdom</h3><p>实际上我们的render执行的值就是vdom，只不过里面的<code>_c:元素 _v:文本 _s:插值表达式</code>三个方法尚未实现。render函数的作用：创建虚拟dom，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span>修改src/init.<span class="hljs-property">js</span><br>  <span class="hljs-keyword">import</span> &#123; mountComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./lifecycle&quot;</span>;<br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$mount</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;<br>      ...<br>      <span class="hljs-keyword">if</span> (!options.<span class="hljs-property">render</span>) &#123;<br>        ...<br>      &#125;<br>      <span class="hljs-comment">// 1.将render方法挂载到options上</span><br>      <span class="hljs-keyword">const</span> render = <span class="hljs-title function_">compileToFunction</span>(template);<br>      options.<span class="hljs-property">render</span> = render;<br>    &#125;<br>    <span class="hljs-comment">// 2.挂载组件（主要用到_update和_render方法）</span><br>    <span class="hljs-title function_">mountComponent</span>(vm, el);<br>  &#125;;<br><br><span class="hljs-number">2.</span>新建src/lifecycle.<span class="hljs-property">js</span><br>  <span class="hljs-keyword">import</span> &#123; patch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./vdom/patch&quot;</span>;<br>  <span class="hljs-comment">// 3.创建挂载组件方法</span><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">mountComponent</span>(<span class="hljs-params">vm, el</span>) &#123;<br>    <span class="hljs-comment">// 4.调用vm._render函数，生成虚拟dom </span><br>    <span class="hljs-keyword">const</span> vnode=vm.<span class="hljs-title function_">_render</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vode,<span class="hljs-string">&#x27;vnode&#x27;</span>)<br>    <span class="hljs-keyword">return</span> vnode <span class="hljs-comment">// return出去，后面转换真实dom用</span><br>  &#125;<br><span class="hljs-number">3.</span>新建src/vdom/index.<span class="hljs-property">js</span><br>  <span class="hljs-comment">// 5.创建render混入函数</span><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">renderMixin</span>(<span class="hljs-params">Vue</span>) &#123;<br>    <span class="hljs-comment">// vue原型增加_render函数生成虚拟dom</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_render</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">const</span> vm = <span class="hljs-variable language_">this</span>;<br>      <span class="hljs-comment">// 取出之前放到options上的render方法</span><br>      <span class="hljs-keyword">const</span> &#123; render &#125; = vm.<span class="hljs-property">$options</span>;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(render, <span class="hljs-string">&quot;render&quot;</span>);<br>      <span class="hljs-keyword">let</span> vnode = render.<span class="hljs-title function_">call</span>(vm); <span class="hljs-comment">// 将vm指向当前实例，传给with函数,此时模版中的变量已经可以拿到值</span><br>      <span class="hljs-keyword">return</span> vnode;<br>    &#125;;<br>    <span class="hljs-comment">// 标签转换成虚拟dom(_c(&#x27;div&#x27;,&#123;&#125;,&#x27;hello&#x27;,&#x27;hello1&#x27;))</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_c</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">createElement</span>(...<span class="hljs-variable language_">arguments</span>);<br>    &#125;;<br>    <span class="hljs-comment">// 变量(_s(变量))</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_s</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;        <br>      <span class="hljs-comment">// 如果是对象，转换成字符串，如果是null或者undefined返回空,注意null==undefined为true，null===undefined为false，所以如果val为undefined也为&#x27;&#x27;</span><br>      <span class="hljs-keyword">return</span> val == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-keyword">typeof</span> val === <span class="hljs-string">&quot;object&quot;</span> ? <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(val) : val;<br>    &#125;;<br>    <span class="hljs-comment">// 文本</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_v</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">text</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">createTextVnode</span>(text);<br>    &#125;;<br>  &#125;<br>  <span class="hljs-comment">// 构造虚拟dom结构</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">vnode</span>(<span class="hljs-params">tag, data, key, children, text</span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      tag,<br>      data,<br>      key,<br>      children,<br>      text,<br>    &#125;;<br>  &#125;<br>  <span class="hljs-comment">// 创建虚拟dom（之前_c的参数：tag,data,多个子节点）</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">createElement</span>(<span class="hljs-params">tag, data = &#123;&#125;, ...children</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">vnode</span>(tag, data, data.<span class="hljs-property">key</span>, children);<br>  &#125;<br>  <span class="hljs-comment">// 创建文本虚拟dom</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">createTextVnode</span>(<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">vnode</span>(<span class="hljs-literal">undefined</span>, <span class="hljs-literal">undefined</span>, <span class="hljs-literal">undefined</span>, <span class="hljs-literal">undefined</span>, text);<br>  &#125;<br><span class="hljs-number">4.</span>修改src/index.<span class="hljs-property">js</span><br><span class="hljs-keyword">import</span> &#123; initMixin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./init&quot;</span>;<br><span class="hljs-comment">// 6.将上面定义的vue原型方法混入</span><br><span class="hljs-keyword">import</span> &#123; renderMixin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./vdom/index&quot;</span>;<br>...<br><span class="hljs-title function_">initMixin</span>(<span class="hljs-title class_">Vue</span>)<br><span class="hljs-title function_">renderMixin</span>(<span class="hljs-title class_">Vue</span>) <span class="hljs-comment">// 添加render</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Vue</span>;<br><br></code></pre></td></tr></table></figure><p>我们打印下，可以看到vnode<br><img src="images/vnode.jpg" width="50%"/></p><p>我们可以发现之前的模版都已经变成data上定义的值，但是我们前面讲的vdom上面最重要的属性还没有实现（图上的el属性有是因为用的包含转真实dom的代码运行的）。因为该属性和转<br>真实dom是一起的，所以放到下面讲。</p><h3 id="vdom转真实dom"><a href="#vdom转真实dom" class="headerlink" title="vdom转真实dom"></a>vdom转真实dom</h3><p>现在我们要把vdom更新到页面上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span>修改src/init.<span class="hljs-property">js</span><br>  <span class="hljs-keyword">import</span> &#123; mountComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./lifecycle&quot;</span>;<br>  <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$mount</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;<br>      ...<br>      vm.<span class="hljs-property">$el</span> = el; <span class="hljs-comment">// 1.存储当前组件的根元素，用于后续的vdom转换真实dom操作</span><br>      <span class="hljs-keyword">if</span> (!options.<span class="hljs-property">render</span>) &#123;<br>        ...<br>      &#125;<br>      ...<br>    &#125;<br>    ...<br>  &#125;;<br><span class="hljs-number">2.</span>修改src/lifecycle.<span class="hljs-property">js</span><br>  <span class="hljs-keyword">import</span> &#123; patch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./vdom/patch&quot;</span>;<br>  <span class="hljs-comment">// 挂载组件</span><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">mountComponent</span>(<span class="hljs-params">vm, el</span>) &#123;<br>    <span class="hljs-comment">// render--&gt;vnode--&gt;真实dom</span><br>    <span class="hljs-comment">// 2.调用vm._render函数，生成虚拟dom 2.调用vm._update,将虚拟dom转换成真实dom</span><br>    vm.<span class="hljs-title function_">_update</span>(vm.<span class="hljs-title function_">_render</span>());<br>  &#125;<br>  <span class="hljs-comment">// 3.新增生命周期方法混入</span><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">lifecycleMixin</span>(<span class="hljs-params">Vue</span>) &#123;<br>    <span class="hljs-comment">// 4.增加更新方法</span><br>    <span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">_update</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">vnode</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vnode, <span class="hljs-string">&quot;vnode&quot;</span>);<br>      <span class="hljs-keyword">const</span> vm = <span class="hljs-variable language_">this</span>;<br>      <span class="hljs-comment">// 5. 增加渲染真实dom方法patch</span><br>      <span class="hljs-comment">// 两个参数，第一个是老的dom节点，第二个是新的虚拟节点(用新的vnodes来生成新的dom，替换掉老的dom)，然后重新绑定到vm.$el上    </span><br>      vm.<span class="hljs-property">$el</span> = <span class="hljs-title function_">patch</span>(vm.<span class="hljs-property">$el</span>, vnode);<br>    &#125;;<br>  &#125;<br><span class="hljs-number">3.</span>修改src/index.<span class="hljs-property">js</span><br>  <span class="hljs-keyword">import</span> &#123; initMixin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./init&quot;</span>;<br>  <span class="hljs-comment">// 6.将上面定义的vue原型方法混入</span><br>  <span class="hljs-keyword">import</span> &#123; lifecycleMixin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./vdom/index&quot;</span>;<br>  ...<br>  <span class="hljs-title function_">initMixin</span>(<span class="hljs-title class_">Vue</span>)<br>  <span class="hljs-title function_">renderMixin</span>(<span class="hljs-title class_">Vue</span>) <span class="hljs-comment">// 添加render</span><br>  <span class="hljs-title function_">lifecycleMixin</span>(<span class="hljs-title class_">Vue</span>) <span class="hljs-comment">// 添加lifecycle</span><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Vue</span>;<br><br><span class="hljs-number">4.</span>增加src/vdom/patch.<span class="hljs-property">js</span><br>  <span class="hljs-comment">// 7.定义patch方法</span><br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">patch</span>(<span class="hljs-params">oldnode, vnode</span>) &#123;<br>    <span class="hljs-keyword">const</span> oldElm = oldnode; <span class="hljs-comment">// div id=&quot;app&quot;</span><br>    <span class="hljs-keyword">const</span> parentElm = oldElm.<span class="hljs-property">parentNode</span>; <span class="hljs-comment">// body</span><br>    <span class="hljs-keyword">let</span> el = <span class="hljs-title function_">createElm</span>(vnode); <span class="hljs-comment">// 创建真实dom</span><br>    <span class="hljs-comment">// insertBefore(a,b)表示将a插入到b前面， a.nextSibling表示a节点后面下一个兄弟节点</span><br>    parentElm.<span class="hljs-title function_">insertBefore</span>(el, oldElm.<span class="hljs-property">nextSibling</span>); <span class="hljs-comment">// 将创建的真实dom插入到body中（即app后面）</span><br>    parentElm.<span class="hljs-title function_">removeChild</span>(oldElm); <span class="hljs-comment">// 删除原来的div即app</span><br>    <span class="hljs-keyword">return</span> el;<br>  &#125;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">createElm</span>(<span class="hljs-params">vnode</span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; tag, children, key, data, text &#125; = vnode;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> tag === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>      <span class="hljs-comment">// 元素</span><br>      vnode.<span class="hljs-property">el</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(tag); <span class="hljs-comment">// 创建元素</span><br>      children.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">child</span>) =&gt;</span> &#123;<br>        vnode.<span class="hljs-property">el</span>.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title function_">createElm</span>(child)); <span class="hljs-comment">// 递归渲染子节点</span><br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 文本</span><br>      vnode.<span class="hljs-property">el</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(text);<br>    &#125;  <br>    <span class="hljs-keyword">return</span> vnode.<span class="hljs-property">el</span>;<br>  &#125;<br><br></code></pre></td></tr></table></figure><p>至此，我们已经实现了初次渲染。但上面只是粗暴的删除app节点，插入新的节点，后面会讲到diff。我们可以看到页面，已经更新。</p><img src="images/rdom.jpg" width="50%"/><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>vue的大致渲染流程<br><code>数据初始化-&gt;模版编译-&gt;render-&gt;vdom-&gt;dom -&gt;放到页面</code></p>]]></content>
      
      
      <categories>
          
          <category> vue2源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3.数据劫持-数组</title>
      <link href="/ypf-blog/2023/06/12/vue2%E6%BA%90%E7%A0%81/3.%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81-%E6%95%B0%E7%BB%84/"/>
      <url>/ypf-blog/2023/06/12/vue2%E6%BA%90%E7%A0%81/3.%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="劫持数组"><a href="#劫持数组" class="headerlink" title="劫持数组"></a>劫持数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.修改src/observer/index.js</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-comment">// 2.增加判断数组</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(value)) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">walkArray</span>(value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">walk</span>(value);<br>    &#125;<br>  &#125;<br>  <span class="hljs-title function_">walk</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(data).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">defineReactive</span>(data, key, data[key]);<br>    &#125;);<br>  &#125;<br>  <span class="hljs-comment">// 3. 增加劫持数组方法</span><br>  <span class="hljs-title function_">walkArray</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">ArrayProto</span> = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">ArrayMethods</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">ArrayProto</span>); <span class="hljs-comment">// 将数组原型的方法全部挂载到ArrayMethods的原型上</span><br>    data.<span class="hljs-property">__proto__</span> = <span class="hljs-title class_">ArrayMethods</span>; <span class="hljs-comment">// 更改数组的原型指向新对象</span><br>    <span class="hljs-comment">// 数组中总共有7个方法可以改变自身</span><br>    <span class="hljs-keyword">const</span> methodsToPatch = [<br>      <span class="hljs-string">&quot;push&quot;</span>,<br>      <span class="hljs-string">&quot;pop&quot;</span>,<br>      <span class="hljs-string">&quot;shift&quot;</span>,<br>      <span class="hljs-string">&quot;unshift&quot;</span>,<br>      <span class="hljs-string">&quot;reverse&quot;</span>,<br>      <span class="hljs-string">&quot;sort&quot;</span>,<br>      <span class="hljs-string">&quot;splice&quot;</span>,<br>    ];<br>    methodsToPatch.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      <span class="hljs-title class_">ArrayMethods</span>[key]=<span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;劫持数组&quot;</span>)<br>        <span class="hljs-comment">// 必须用ArrayProto[key],不能用ArrayMethods[key],因为使用ArrayMethods[key]相当于,自身调用自身,死循环</span><br>        <span class="hljs-comment">// this指向调用方,这里是[1, 2, 3]</span><br>        <span class="hljs-keyword">const</span> result=<span class="hljs-title class_">ArrayProto</span>[key].<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,args) <br>        <span class="hljs-keyword">return</span> result<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们修改index.html,增加<code>aa._data.b.push(4)</code>,此时会触发方法里打印的拦截数组</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h3 id="Object-defineProperty不能检测数组变动"><a href="#Object-defineProperty不能检测数组变动" class="headerlink" title="Object.defineProperty不能检测数组变动?"></a>Object.defineProperty不能检测数组变动?</h3><p>我们测试下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> test = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>];<br> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(test) <span class="hljs-comment">// [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;]</span><br>   .<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">index</span>) =&gt;</span> &#123;<br>   <span class="hljs-keyword">let</span> value = test[index];<br>   <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(test, index, &#123;<br>     <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>     <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>     <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;获取值&quot;</span>);<br>       <span class="hljs-keyword">return</span> value;<br>     &#125;,<br>     <span class="hljs-title function_">set</span>(<span class="hljs-params">newValue</span>) &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;更新值&quot;</span>)<br>       value= newValue;<br>     &#125;,<br>   &#125;);<br> &#125;);<br> test[<span class="hljs-number">2</span>]=<span class="hljs-number">4</span><br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test); <br></code></pre></td></tr></table></figure><img src="images/arr.jpg" width="50%"/><p>我们可以看到，Object.defineProperty可以检测数据遍历，只不过是通过数组下标劫持。</p><p>那么，为什么原本通过索引实现监测的，Vue却选择了不支持呢？主要是考虑了性能问题，比如，我们平常用的数组往往数量量会很大：<br>假如数组有1w个长度，为了实现数组索引劫持，需要对数组中每一项进行处理，但在实际开发很少会使用 arr[8888] = x修改某一项数据这种操作从而触发劫持，我们一般操作数组都是通过<br>push、pop、splice等方法。所以，权衡性能和需求，Vue 源码中没有采用 defineProperty 对数组进行处理。</p><h3 id="数组本身含有对象"><a href="#数组本身含有对象" class="headerlink" title="数组本身含有对象"></a>数组本身含有对象</h3><p>前面我们定义的data中的数组都是基本类型，如果里面本身是对象，是不会被劫持的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> aa= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>   <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>   <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;        <br>     <span class="hljs-keyword">return</span> &#123;<br>       <span class="hljs-attr">d</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;]<br>     &#125;;<br>   &#125;,<br> &#125;);<br></code></pre></td></tr></table></figure><p>上面代码，<code>&#123;a:1&#125;</code>是不会被劫持的，我们修改代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">observer/index<br>...<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(value)) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">walkArray</span>(value);<br>      <span class="hljs-comment">// 4.新增数据对象劫持</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">walkArrayObj</span>(value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">walk</span>(value);<br>    &#125;<br>  &#125;<br>  ...<br>  <span class="hljs-comment">// 数组本身含有对象，进行对象劫持</span><br>  <span class="hljs-title function_">walkArrayObj</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;data.<span class="hljs-property">length</span>;i++)&#123;<br>      <span class="hljs-title function_">observe</span>(data[i])<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="数组push、unshift、splice对象-能劫持到吗"><a href="#数组push、unshift、splice对象-能劫持到吗" class="headerlink" title="数组push、unshift、splice对象,能劫持到吗?"></a>数组push、unshift、splice对象,能劫持到吗?</h3><p>我们在index.html修改如下：<br><code>aa._data.b.push(&#123;a:1&#125;)</code> //往后追加<br><code>aa._data.b.unshift(&#123;a:1&#125;)</code> // 往前追加<br><code>aa._data.b.splice(0,1,&#123;c:1&#125;)</code> // 将第一项替换为{c:1}</p><p>上面三种很明显都不能劫持，我们修改代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js">observer/index<br><br>  <span class="hljs-title function_">walkArray</span>(<span class="hljs-params">data</span>) &#123;<br>    ...<br>    <span class="hljs-comment">// 数组中总共有7个方法可以改变自身</span><br>    <span class="hljs-keyword">const</span> methodsToPatch = [<br>      <span class="hljs-string">&quot;push&quot;</span>,<br>      <span class="hljs-string">&quot;pop&quot;</span>,<br>      <span class="hljs-string">&quot;shift&quot;</span>,<br>      <span class="hljs-string">&quot;unshift&quot;</span>,<br>      <span class="hljs-string">&quot;reverse&quot;</span>,<br>      <span class="hljs-string">&quot;sort&quot;</span>,<br>      <span class="hljs-string">&quot;splice&quot;</span>,<br>    ];<br>    <span class="hljs-keyword">const</span> that=<span class="hljs-variable language_">this</span> <span class="hljs-comment">// 存储this,即Observer类，用于下面调用walkArrayObj方法，</span><br>    methodsToPatch.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      <span class="hljs-title class_">ArrayMethods</span>[key]=<span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;劫持数组&quot;</span>)<br>        <span class="hljs-comment">// 5.打印调用push、unshift、splice方法传递过来的参数</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args,<span class="hljs-string">&#x27;参数&#x27;</span>); <span class="hljs-comment">// push:[&#123;a:1&#125;] unshift:[&#123;a:1&#125;] splice:[0,1,&#123;c:1&#125;]</span><br>        <span class="hljs-comment">// 6.我们需要对参数进行劫持</span><br>        <span class="hljs-keyword">let</span> inserted;<br>        <span class="hljs-keyword">switch</span> (key) &#123;<br>          <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;push&#x27;</span>:<br>          <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;unshift&#x27;</span>:<br>            inserted=args<br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;splice&#x27;</span>:<br>            <span class="hljs-comment">// slice(start,end)方法返回截取字符串的某个部分，包括start，不包括end，不改变原数组</span><br>            <span class="hljs-comment">// 此处等同于slice(2,0), 0可以省略，表示从第三个参数开始截取，即插入的数组</span><br>            inserted=args.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>) <br>          <span class="hljs-attr">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-string">&#x27;this&#x27;</span>); <span class="hljs-comment">// aa._data.b</span><br>        <span class="hljs-keyword">if</span> (inserted) &#123;<br>          <span class="hljs-comment">// 7.用上面存储的this，调用walkArrayObj方法，对插入的数组进行劫持， 因为这里面的this指向的是实例，即aa._data.b</span><br>          that.<span class="hljs-title function_">walkArrayObj</span>(inserted);<br>        &#125;<br>        <span class="hljs-keyword">const</span> result= <span class="hljs-title class_">ArrayProto</span>[key].<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,args)<br>        <span class="hljs-keyword">return</span> result<br>      &#125;<br>    &#125;);<br>  &#125;<br><br><br></code></pre></td></tr></table></figure><p>至此，我们已经完成了数组的劫持。</p><h3 id="如何直接访问data上的属性？"><a href="#如何直接访问data上的属性？" class="headerlink" title="如何直接访问data上的属性？"></a>如何直接访问data上的属性？</h3><p>我们上面都是通过<code>aa._data</code>访问data上的数据，但实际vue，我们一般都是通过<code>aa.属性</code>直接访问data上的数据即在组件中是this.属性访问，很容易想到：<br><strong>遍历vm._data进行绑定</strong><br>下面我们来实现下，修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">src/state.<span class="hljs-property">js</span><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">initData</span>(<span class="hljs-params">vm</span>) &#123;<br>  <span class="hljs-keyword">let</span> data = vm.<span class="hljs-property">$options</span>.<span class="hljs-property">data</span>;<br>  <span class="hljs-comment">//   需要call, 否则 data()&#123; &#125;中的this为window</span><br>  data = vm.<span class="hljs-property">_data</span> = <span class="hljs-keyword">typeof</span> data === <span class="hljs-string">&quot;function&quot;</span> ? data.<span class="hljs-title function_">call</span>(vm) : data;<br><br>  <span class="hljs-comment">// 8. 将data中的数据进行遍历,全部代理到vm实例上</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> data) &#123;<br>    <span class="hljs-title function_">proxy</span>(vm, <span class="hljs-string">&quot;_data&quot;</span>, key);<br>  &#125;<br><br>  <span class="hljs-comment">//   数据劫持</span><br>  <span class="hljs-title function_">observe</span>(data);<br>&#125;<br><span class="hljs-comment">// 9. 增加proxy方法,用Object.defineProperty劫持， 必须的，如果直接vm[key]=data[key],只是在vm上加了属性，不会进行劫持</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">proxy</span>(<span class="hljs-params">vm,source,key</span>)&#123;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(vm,key,&#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-keyword">return</span> vm[source][key]<br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">newValue</span>)&#123;<br>      vm[source][key]=newValue<br>    &#125;<br>  &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们然后打印下 <strong>aa</strong>,</p><img src="images/vm.jpg" width="50%"/><p>可以看到data的数据已经全部挂载到实例上，我们可以直接访问。</p><p>但是如果我们使用<code>aa.msg=&#39;11&#39;</code>或者 <code>aa._data.msg=&#39;aa&#39;</code>新加一个属性msg，这种是不会劫持的，在vue中也不会，需要单独<br>通过<code>$set</code>进行绑定。这个后面会讲</p>]]></content>
      
      
      <categories>
          
          <category> vue2源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Object.defineProperty</title>
      <link href="/ypf-blog/2023/06/09/javascript/Object.defineProperty/"/>
      <url>/ypf-blog/2023/06/09/javascript/Object.defineProperty/</url>
      
        <content type="html"><![CDATA[<p>在了解什么是<code>Object.defineProperty</code>前,我们先回忆下我们平常经常使用的 <strong>对象</strong></p><h2 id="对象的赋值"><a href="#对象的赋值" class="headerlink" title="对象的赋值"></a>对象的赋值</h2><p>我们平常一般使用<code>obj.prop=value或者obj[&#39;prop&#39;]=value</code>对对象进行赋值或修改,如</p><pre><code>let test=&#123;&#125;test.a=1test[&quot;b&quot;]=2console.log(test.a) //1console.log(test.b) //2</code></pre><p>那么Object.defineProperty又和上面的对象赋值是什么关系呢?从字面(defineProperty)意思上就可以知道–定义属性,所以Object.defineProperty也是一种对对象属性修改或赋值的方式,只不过我们可以进行<strong>更精确的控制</strong>.</p><h2 id="Object-defineProperty的定义"><a href="#Object-defineProperty的定义" class="headerlink" title="Object.defineProperty的定义"></a>Object.defineProperty的定义</h2><p><code>Object.defineProperty()</code>的作用就是直接在一个对象上定义一个新属性，或者修改一个已经存在的属性,语法如下,有三个参数:</p><pre><code>Object.defineProperty(obj, prop, descriptor)</code></pre><ul><li>obj:需要定义或修改属性的对象(必填)</li><li>prop:需要定义的属性名称(必填)</li><li>descriptor:要定义或修改的属性描述符,是一个对象.(必填)</li></ul><p>看到这,可能有的人不理解什么是属性描述符号?我们上面说的 <strong>对对象属性进行更精确的控制,就是通过descriptor来操控的</strong>.descriptor是一个对象,具有以下属性:</p><table><thead><tr>  <th width="120">属性名</th>  <th>描述</th>  <th>默认值</th></tr></thead><tbody><tr><td>value</td> <td> 要定义的属性对应的值 </td><td> undefined</td></tr><tr><td>writable</td><td>要定义的属性值是否可以被改变</td><td>false</td></tr><tr><td>configurable</td><td>要定义的属性是否配置(配置指的是重新定义)，以及可否删除</td><td>false</td></tr><tr><td>enumerable</td><td>要定义的属性是否会出现在对象的枚举属性中,如for in 或者 Object.keys()的遍历中</td><td>false</td></tr><tr><td>get</td><td>要定义的属性的getter函数,当访问该属性时，会执行此函数</td><td>undefined</td></tr><tr><td>set</td><td>要定义的属性的setter函数,当属性值被修改时，会调用此函数,此时该方法接受一个参数（也就是修改的新值）</td><td>undefined</td></tr></tbody></table><p><strong>注意:这里说的要定义的属性指的是通过Object.defineProperty传递prop参数进行定义的属性(才可以控制是否删除、改变、监听等),如果对象本来就存在一些属性,但没有经过Object.defineProperty进行重新定义,是不受控制的,和我们最开始讲到的我们平常使用对象的方式,可以随便改变、删除,不能监听</strong><br>下面我们将分别对这些属性描述符进行举例说明:</p><h3 id="value"><a href="#value" class="headerlink" title="value"></a>value</h3><p>我们要在对象上定义属性,obj、prop必填就不用说了,descriptor也是必填的,否则会报错</p><pre><code>let test=&#123;&#125;Object.defineProperty(test, &quot;a&quot;)console.log(test);</code></pre><img src="images/1894758-c497eb23fafb7e14.png" width="50%"/><p>从报错信息我们可知,属性描述符必须是个对象,所以我们修改下就可以了</p><pre><code>Object.defineProperty(test, &quot;a&quot;,&#123;&#125;)console.log(test); // &#123;a:undefined&#125;test.a=1console.log(`修改后$&#123;test&#125;`) // &#123;a:undefined&#125;</code></pre><p>此时我们已经使用Object.defineProperty成功定义了一个属性,只不过没有值罢了.<br>但我们修改,打印出来发现值仍为undefined.这个后面会说,接下来我们先进行使用 <strong>value</strong>进行赋值操作.</p><pre><code>  Object.defineProperty(test, &quot;a&quot;,&#123;      value:1  &#125;)  console.log(test); // &#123;a:1&#125;  test.a=2  console.log(`修改后$&#123;test&#125;`) // &#123;a:1&#125;</code></pre><h3 id="writable"><a href="#writable" class="headerlink" title="writable"></a>writable</h3><p>我们可以看见,test对象已经有一个属性a,并且值为1.但是和上面一样,我们仍没有修改成功.接下来,我们使用 <strong>writable</strong>进行修改</p><pre><code>  Object.defineProperty(test, &quot;a&quot;,&#123;      value:1,      writable:true  &#125;)  console.log(test); // &#123;a:1&#125;  test.a=2  console.log(`修改后$&#123;test&#125;`) // &#123;a:2&#125;</code></pre><h3 id="configurable"><a href="#configurable" class="headerlink" title="configurable"></a>configurable</h3><p>我们可以看见,属性值已经被修改成功.接下来我们来看 <strong>configurable</strong>属性.</p><pre><code>Object.defineProperty(test, &quot;a&quot;,&#123;      value:1,      writable:true&#125;)delete test.aconsole.log(test) //&#123;a:1&#125;</code></pre><p>我们可以看见,此时我们无法删除掉属性a,我们修改代码,此时即可删除成功.</p><pre><code>Object.defineProperty(test, &quot;a&quot;,&#123;      value:1,      writable:true,      configurable:true&#125;)delete test.aconsole.log(test) //&#123;&#125;</code></pre><p>我们上面说了configurable除下控制是否可以删除,还可以用来控制是否可以重新定义.我们来修改代码</p><pre><code>Object.defineProperty(test, &quot;a&quot;,&#123;      value:1,&#125;)//重新定义Object.defineProperty(test, &quot;a&quot;,&#123;      value:2,&#125;)</code></pre><p>发现报错,不能重新定义:</p><img src="images/1894758-aa17f88dc28b1e9e.png" width="50%"/><p>我们增加<code>writable=true</code>,即可重新定义</p><pre><code>Object.defineProperty(test, &quot;a&quot;,&#123;      value:1,      writable:true,&#125;)//重新定义Object.defineProperty(test, &quot;a&quot;,&#123;      value:2,&#125;)console.log(test) //&#123;a:2&#125;</code></pre><p>或者设置<code>configurable=true</code></p><pre><code> Object.defineProperty(test, &quot;a&quot;,&#123;      value:1,      writable:false, //也可以不写,默认false      configurable:true&#125;)//重新定义Object.defineProperty(test, &quot;a&quot;,&#123;      value:2,&#125;)console.log(test) //&#123;a:2&#125;</code></pre><h3 id="enumerable"><a href="#enumerable" class="headerlink" title="enumerable"></a>enumerable</h3><p><strong>1.Object.keys,返回一个数组,包括对象自身的(不含继承的)所有可枚举属性(不含Symbol属性).</strong></p><pre><code>Object.defineProperty(test, &quot;a&quot;,&#123;      value:1,&#125;)console.log(Object.keys(test)); //[]</code></pre><p><strong>2.for…in循环遍历对象自身的和继承的可枚举属性(不含Symbol属性)</strong></p><pre><code> for(let i in test)&#123;    console.log(i);&#125; //不会输出,因为无法遍历,此时test相当于&#123;&#125;对象</code></pre><p><strong>3.Object.values(),返回一个数组,包括对象自身的(不含继承的)所有可枚举属性(不含Symbol属性)的值</strong></p><pre><code> console.log(Object.values(test)); //[]</code></pre><p><strong>4.Object.entries(),返回一个数组,包括对象自身的(不含继承的)所有可枚举属性(不含Symbol属性)以及对应值组成一个数组</strong></p><pre><code> console.log(Object.entries(test)); //[]</code></pre><p><strong>5.Object.getOwnPropertyNames(),返回一个数组,包含对象自身的所有属性(不含Symbol属性,但是包括不可枚举属性).</strong></p><pre><code>console.log(Object.getOwnPropertyNames(test)); //[&quot;a&quot;]</code></pre><p><strong>6.Reflect.ownKeys(),返回一个数组,包含对象自身的所有属性,不管属性名是Symbol或字符串,也不管是否可枚举.</strong></p><pre><code>console.log(Reflect.ownKeys(test));[&quot;a&quot;]</code></pre><p>我们可以看见,前3种无法获取对象的属性,我们设置<code>enumerable=true</code>,即可获取,代码就不贴了.</p><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><pre><code>Object.defineProperty(test, &quot;a&quot;,&#123;    // value:1, //get和value不能同时使用    get()&#123;                    return 1    &#125;&#125;)console.log(test.a) //1console.log(test) //&#123;&#125;</code></pre><p>我们从打印结果可以看出</p><ul><li>当我们打印test.a时候,get函数会执行,此时a的值就是return的值;但我们直接打印test是不会执行get函数的.</li><li>如果我们把value注释打开,会发现报错</li><li>get、set函数和value不能同时使用,都会报如下错误</li><li>对象会绑定get方法,如果用value定义,不用get, 对象不会绑定get方法.</li></ul><img src="images/1894758-e66a28c54ef126dc.png" width="50%"/><img src="images/1.jpg" width="50%"/><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><pre><code>Object.defineProperty(test, &quot;a&quot;,&#123;    get()&#123;                    return 1    &#125;,    set(newValue)&#123;        console.log(newValue) //2    &#125;&#125;)console.log(test.a) //1test.a=2console.log(test.a) //1</code></pre><p>上面例子中,我们对属性a重新赋值为2,set函数可以接收到最新的值为2,但是get函数返回永远是1,所以test.a的值永远是1,我们更改下代码:</p><pre><code>let num=1 Object.defineProperty(test, &quot;a&quot;,&#123;    get()&#123;                    return num    &#125;,    set(newValue)&#123;        console.log(newValue) //2        num=newValue    &#125;&#125;)console.log(test.a) //1test.a=2console.log(test.a) //2</code></pre><h2 id="不同写法对比"><a href="#不同写法对比" class="headerlink" title="不同写法对比"></a>不同写法对比</h2><pre><code>let test=&#123;&#125;;test.a=1等价于Object.defineProperty(test, &quot;a&quot;,&#123;    value:1,    configurable:true,    writable:true,    enumerable:true&#125;)</code></pre><hr><pre><code>Object.defineProperty(test, &quot;a&quot;,&#123;    value:1,&#125;)等价于 Object.defineProperty(test, &quot;a&quot;,&#123;    value:1,    configurable:false,    writable:false,    enumerable:false&#125;)</code></pre><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="创建对象常量"><a href="#创建对象常量" class="headerlink" title="创建对象常量"></a>创建对象常量</h3><p>结合writable: false 和 configurable: false 就可以创建一个真正的常量属性（不可修改，不可重新定义或者删除）,<strong>但可以添加新属性</strong></p><pre><code>Object.defineProperty(test, &quot;a&quot;,&#123;    value:1,    configurable:false,    writable:false&#125;)delete test.a;test.a=2console.log(test);  //&#123;a:1&#125;test.b=2console.log(test); //&#123;a:1,b:2&#125;Object.defineProperty(test, &quot;a&quot;,&#123;    value:2,&#125;) //报错 Cannot redefine property</code></pre><h3 id="禁止扩展-Object-preventExtensions"><a href="#禁止扩展-Object-preventExtensions" class="headerlink" title="禁止扩展 Object.preventExtensions"></a>禁止扩展 <code>Object.preventExtensions</code></h3><p>如果你想禁止一个对象添加新属性并且保留已有属性，就可以使用Object.preventExtensions()</p><pre><code>let test=&#123;a:1&#125;Object.preventExtensions(test)test.b=2test.a=2console.log(test); //&#123;a:2&#125;Object.defineProperty(test, &quot;a&quot;,&#123;    value:3,&#125;)console.log(test);  //&#123;a:3&#125;Object.defineProperty(test, &quot;b&quot;,&#123;    value:2,&#125;) //报错:Uncaught TypeError: Cannot define property b, object is not extensible</code></pre><p>我们可以发现,通过preventExtensions,我们无法再新增(拓展)属性,只能更改原来存在的属性.</p><h3 id="密封对象-Object-seal"><a href="#密封对象-Object-seal" class="headerlink" title="密封对象 Object.seal"></a>密封对象 <code>Object.seal</code></h3><p>Object.seal()方法用于密封一个对象，这个方法实际上会在一个现有对象上调用object.preventExtensions()并把所有现有属性标记为configurable:false.即将对象设置为不可扩展，同时将对象的所有自有属性都设置为不可配置（包括Symbol值的属性）。也就是说，不能给对象添加新的属性和方法，也不能删除现有的属性和方法、不能修改现有属性和方法的配置。但如果对象的属性和方法是可写的，那该属性和方法仍然可以修改。</p><pre><code>    let test=&#123;a:1&#125;    Object.seal(test)    test.a=2    test.b=3    console.log(test); //&#123;a:2&#125;    delete test.a    console.log(test); //&#123;a:2&#125;    Object.defineProperty(test, &quot;a&quot;,&#123;            value:3,    &#125;)    console.log(test); //&#123;a:3&#125;    Object.defineProperty(test, &quot;b&quot;,&#123;            value:3,    &#125;) //报错:Uncaught TypeError: Cannot define property b, object is not extensible</code></pre><h3 id="冻结对象-Object-freeze"><a href="#冻结对象-Object-freeze" class="headerlink" title="冻结对象 Object.freeze"></a>冻结对象 <code>Object.freeze</code></h3><p>Object.freeze()会创建一个冻结对象，这个方法实际上会在一个现有对象上调用Object.seal(),并把所有现有属性标记为writable: false,这样就无法修改它们的值。</p><pre><code>let test=&#123;a:1&#125;Object.freeze(test)test.a=2test.b=3console.log(test); //&#123;a:1&#125;delete test.aconsole.log(test); //&#123;a:1&#125;Object.defineProperty(test, &quot;b&quot;,&#123;        value:3,&#125;)console.log(test); //报错:Uncaught TypeError: Cannot define property b, object is not extensible</code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1.rollup搭建环境</title>
      <link href="/ypf-blog/2023/06/09/vue2%E6%BA%90%E7%A0%81/1.rollup%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/"/>
      <url>/ypf-blog/2023/06/09/vue2%E6%BA%90%E7%A0%81/1.rollup%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建目录结构"><a href="#搭建目录结构" class="headerlink" title="搭建目录结构"></a>搭建目录结构</h2><ol><li>新建vue2源码文件夹, 然后<code>pnpm init</code>, 增加<code>type:module</code>,因为第三步使用esmodule导出</li><li><code>pnpm install rollup -D</code></li><li>根目录新建src文件夹,并在该文件夹创建index.js</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Vue</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">213</span>)<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Vue</span>;<br></code></pre></td></tr></table></figure><ol start="4"><li>根目录新建dist空文件夹</li><li>根目录增加rollup.config.js配置文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">input</span>: <span class="hljs-string">&quot;src/index.js&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">file</span>: <span class="hljs-string">&quot;dist/vue.js&quot;</span>,<br>    <span class="hljs-attr">format</span>: <span class="hljs-string">&quot;umd&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Vue&quot;</span>, <span class="hljs-comment">// window会绑定Vue属性</span><br>    <span class="hljs-attr">sourcemap</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="6"><li>修改package.json启动命令</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;rollup --config -w&quot;</span><br>&#125;,<br></code></pre></td></tr></table></figure><p>其中 :<br><code>--config表示使用配置文件,默认为rollup.config.js</code><br><code>-w 表示监听配置文件input指向路径的变动</code>,加上这个配置, 我们修改src/index.js,dist/vue.js会热更新.</p><p>至此我们的目录结构已经搭建完毕.<br><img src="images/1.jpg" width="50%"/></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol><li>我们上面已经搭建好目录结构,通过<code>npm run dev</code>,可以看到dist/vue.js生成了,现在我们在根目录新建index.html,引用vue.js</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Vue</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">      <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span> &#123;&#125;;</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>我们直接打开index.html,可以看到效果.</li></ol><img src="images/2.jpg" width="50%"/><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="rollup-plugin-serve"><a href="#rollup-plugin-serve" class="headerlink" title="rollup-plugin-serve"></a>rollup-plugin-serve</h3><p>我们上面是直接打开的index.html, 一般我们开发都是服务下运行,我们安装<a href="https://github.com/thgh/rollup-plugin-serve">rollup-plugin-serve</a>开服务.</p><p><code> pnpm install rollup-plugin-serve -D</code></p><p>修改 rollup.config.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> serve <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;rollup-plugin-serve&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">input</span>: <span class="hljs-string">&quot;src/index.js&quot;</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">file</span>: <span class="hljs-string">&quot;dist/vue.js&quot;</span>,<br>    <span class="hljs-attr">format</span>: <span class="hljs-string">&quot;umd&quot;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Vue&quot;</span>,<br>    <span class="hljs-attr">sourcemap</span>: <span class="hljs-literal">true</span>,<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">serve</span>(&#123;<br>      <span class="hljs-attr">openPage</span>: <span class="hljs-string">&quot;index.html&quot;</span>,<br>      <span class="hljs-attr">contentBase</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 为空表示根目录</span><br>    &#125;),<br>  ],<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>然后<code>npm run dev</code>就会通过服务运行.</p><p>或者不用插件,用vscode的server插件运行页面也可以.</p>]]></content>
      
      
      <categories>
          
          <category> vue2源码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据类型和包装对象</title>
      <link href="/ypf-blog/2023/05/30/javascript/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8C%85%E8%A3%85%E5%AF%B9%E8%B1%A1/"/>
      <url>/ypf-blog/2023/05/30/javascript/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8C%85%E8%A3%85%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h1><p>ECMAScript标准定义了7种数据类型，主要分为两大类<code>基本类型</code>和<code>引用类型</code>。其中：</p><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>基本类型又称 <strong>值类型 或者 原始类型</strong>，共有<code>六</code>种 。包括：</p><ul><li>字符串类型（String）</li><li>数字类型（Number）</li><li>布尔类型（Boolean）</li><li>对空类型（Null）</li><li>未定义类型（Undefined）</li><li>符号类型（Symbol）</li></ul><p>引用类型，只有<strong>一</strong>种。包括：</p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><ul><li>对象类型（Object）</li></ul><h2 id="对象拓展子类型"><a href="#对象拓展子类型" class="headerlink" title="对象拓展子类型"></a>对象拓展子类型</h2><p>另外，基于Object类型，JS还实现了其他常用的对象子类型（即不同类型的对象）。我们常见的如：</p><ul><li>Object</li><li>Array</li><li>Function</li><li>String（注：这里是构造函数，和上面的基本类型不是一种）</li><li>Boolean（注：这里是构造函数，和上面的基本类型不是一种）</li><li>Number（注：这里是构造函数，和上面的基本类型不是一种）</li><li>Date</li><li>RegExp</li><li>Error</li><li>…</li></ul><p>所以我们可以说，Object类是所有子类的父类.</p><h1 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h1><p>上面我们已经介绍了基本数据类型和引用类型，那<code>基本包装类型</code>又是什么？</p><p>举个栗子先：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;hello&#x27;</span>; <span class="hljs-comment">//String 基本类型</span><br><span class="hljs-keyword">var</span> s2 = str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//调用charAt方法（用于返回指定位置的字符）。</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s2); <span class="hljs-comment">// h</span><br></code></pre></td></tr></table></figure><p>上面的str是一个基本类型，又不是对象，但是它却能调用出一个 charAt() 的方法？</p><p>原因是：在基本类型中，有三个比较特殊的存在就是：String Number Boolean，在我们对这个三个类型执行访问属性和方法的操作时候，JS引擎会执行下面操作：</p><ol><li>创建一个对应类型的实例；</li><li>在实例上调用指定的方法；</li><li>销毁这个实例。</li></ol><p>所以上面的代码实际在执行过程中，是这样执行的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;hello&#x27;</span>; <span class="hljs-comment">//String 基本类型</span><br><span class="hljs-keyword">var</span> s2 = str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//在执行到这一句的时候，发现基本类型要调用方法，此时后台会自动完成以下括号中的三个动作 ：</span><br>（ <br>    <span class="hljs-keyword">var</span> strObject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;hello&#x27;</span>); <span class="hljs-comment">// 1.因为str是String类型，所以创建一个String类型的实例，这个生成的实例strObject就是我们所说的`基本包装类型`</span><br>    <span class="hljs-keyword">var</span> s2 = strObject.<span class="hljs-title function_">chaAt</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// 2. 然后通过实例来调用方法，并且返回结果给s2 </span><br>    strObject = <span class="hljs-literal">null</span>;  <span class="hljs-comment">//    3. 销毁这个实例 </span><br> ） <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s2); <span class="hljs-comment">// h</span><br></code></pre></td></tr></table></figure><p>注意，上述代码是JS引擎自动执行的，你无法访问strObject对象，它只存在于代码的执行瞬间，然后立即销毁，所以我们无法再运行时给基本类型添加属性和方法，除非直接通过new显示调用基本包装类型创建对象。</p><p>由此我们可以知道，引用类型和基本包装对象的区别在于：<strong>生存期</strong><br>引用类型所创建的对象，在执行的期间一直在内存中，而基本包装对象只是存在了<strong>一瞬间</strong>。</p><p><strong>举个栗子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;hello&#x27;</span>; <span class="hljs-comment">//String 基本类型</span><br>str.<span class="hljs-property">number</span>=<span class="hljs-number">0</span><br>（ <br>    <span class="hljs-keyword">var</span> strObject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;hello&#x27;</span>); <span class="hljs-comment">// 1. 创建实例</span><br>    strObject.<span class="hljs-property">number</span>=<span class="hljs-number">0</span> <span class="hljs-comment">// 2. 赋值</span><br>    strObject = <span class="hljs-literal">null</span>;  <span class="hljs-comment">//    3. 销毁</span><br> ） <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">number</span>); <span class="hljs-comment">// number类型存在于strObject上，str并没有number属性，所以为undefined</span><br><br></code></pre></td></tr></table></figure><p>那么我们怎么才能给基本类型添加方法或者属性呢？<strong>答案是在构造函数的原型下面添加</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">number</span>= <span class="hljs-number">0</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">number</span>) <span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure><h2 id="创建一个包装类型"><a href="#创建一个包装类型" class="headerlink" title="创建一个包装类型"></a>创建一个包装类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(<span class="hljs-number">1</span>))<br><span class="hljs-comment">// 或者</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-number">1</span>))<br><br></code></pre></td></tr></table></figure><img src="images/1.jpg" width="50%"/>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>傻傻分不清楚-call、apply、bind</title>
      <link href="/ypf-blog/2023/05/26/javascript/%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%E6%A5%9A-call%E3%80%81apply%E3%80%81bind/"/>
      <url>/ypf-blog/2023/05/26/javascript/%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%E6%A5%9A-call%E3%80%81apply%E3%80%81bind/</url>
      
        <content type="html"><![CDATA[<h1 id="call、apply、bind作用"><a href="#call、apply、bind作用" class="headerlink" title="call、apply、bind作用"></a>call、apply、bind作用</h1><p>在JavaScript中，call、apply和bind是Function对象自带的三个方法。这三个函数的存在意义是什么？答案就是<strong>改变函数运行时的this指向</strong>。下面我们通过实际例子来介绍这三个方法的使用和区别。</p><h1 id="call"><a href="#call" class="headerlink" title="call"></a>call</h1><blockquote><p>语法：fn.call(thisArg,arg1,arg2,…)</p></blockquote><p>thisArg:函数fn运行时，该函数中的this绑定到thisArg上。<br>arg1,arg2,…：函数fn所需的参数,是个list</p><p><strong>我们直接看例子：</strong></p><pre><code>var a =&#123;    name : &quot;test&quot;,    fn : function (a,b) &#123;        console.log(this.name, a + b)    &#125;&#125;var b=&#123;name:&#39;test1&#39;&#125;a.fn(1,2) //test 3a.fn.call(b,1,2) //test1 3</code></pre><p>执行 <code>a.fn(1,2)</code>，fn中的this指向a，所以输出 <code>test 3</code><br>执行 <code>a.fn.call(b,1,2)</code>，通过call改变了fn中的this指向为b，所以输出 <code>test1 3</code></p><p><strong>注意事项：</strong></p><ol><li>thisArg不传，或者传null，undefined， 函数中的this指向window对象</li><li>thisArg为原始值（数字，字符串，布尔值），函数中this指向该原始值的自动包装对象（如 String、Number、Boolean）</li><li>thisArg为一个对象，函数中的this指向这个对象</li><li>thisArg为一个函数名，函数中的this指向该函数</li><li>前四点是默认在非严格模式下，如果在严格模式下，会略有不同。</li></ol><p><strong>我们直接看例子：</strong></p><pre><code>function a(params) &#123;    console.log(this);&#125;function b() &#123;&#125;var obj = &#123;    name: &#39;这是一个屌丝&#39;&#125;;//                  正常模式下              严格模式下a.call();           //window               undefineda.call(null);       //window               nulla.call(undefined);  //window               undefineda.call(1);          //Number&#123;1&#125;            1a.call(&#39;1&#39;);         //String&#123;&#39;1&#39;&#125;           &#39;1&#39;a.call(true);       //Boolean&#123;true&#125;        truea.call(b);          //function b()&#123;&#125;       function b()&#123;&#125;a.call(obj);        //Object               Object</code></pre><h1 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h1><blockquote><p>语法：fn.apply(thisArg,[arg1,arg2,…])或者  fn.apply(thisArg,{0:arg1,1:arg2,…,lenght:总个数})</p></blockquote><p>thisArg:函数fn运行时，该函数中的this绑定到thisArg上。<br>[arg1,arg2,…]或者形如{0:arg1,1:arg2,…,lenght:总个数}：函数fn所需的参数,是个数组或者类数组,call函数会自动将数组或类数组的每个值分开成列表然后给函函数fn</p><p>例子和上面一样，只需要把<code>call</code>换成<code>apply</code>即可。其他都一样，包括上面call的几点注意事项即不传或者传null等。</p><h1 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h1><blockquote><p>语法：fn.bind(thisArg,arg1,arg2,…)()</p></blockquote><p>thisArg:函数fn运行时，该函数中的this绑定到thisArg上。<br>arg1,arg2,…：函数fn所需的参数,是个list</p><p><strong>bind其实和call类似,包括上面call的几点注意事项即不传或者传null等，只不过后面多个<code>（）</code>。我们直接看例子</strong></p><pre><code> var a = &#123;    name: &quot;test&quot;,    fn: function (a, b) &#123;        console.log(this.name, a + b)    &#125;&#125;var b = &#123;    name: &#39;test1&#39;&#125;a.fn.bind(b, 1, 2)</code></pre><p>运行上面代码，我们发现控制台并没有输出，所以我们可以看出bind 是创建一个新的函数，我们<strong>必须要手动去调用</strong>。我们更改代码：</p><pre><code>var a = &#123;    name: &quot;test&quot;,    fn: function (a, b) &#123;        console.log(this.name, a + b)    &#125;&#125;var b = &#123;    name: &#39;test1&#39;&#125;a.fn.bind(b, 1, 2) //test1 3</code></pre><p>上面我们手动调用，发现正确输出结果。</p><h1 id="call-apply-bind三者区别总结"><a href="#call-apply-bind三者区别总结" class="headerlink" title="call apply bind三者区别总结"></a>call apply bind三者区别总结</h1><p>1.call和apply用法一样，唯一的区别是call的参数为列表，apply参数为数组<br>2.bind和call用法一样，唯一的区别是call会自执行函数，bind需要手动调用函数</p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><pre><code>var Person = function (name, age) &#123;    this.name = name;    this.age = age;&#125;;var Girl = function (name) &#123;    Person.call(this, name);&#125;;var Boy = function (name, age) &#123;    Person.apply(this, arguments);&#125;var Boy1 = function (name, age) &#123;    Person.bind(this, name)();&#125;var g = new Girl(&#39;xiaohong&#39;);var b = new Boy(&#39;xiaoming&#39;, 100);var b1 = new Boy1(&#39;xiaowang&#39;, 100);console.log(g); //&#123;name: &quot;xiaohong&quot;, age: undefined&#125;console.log(b); //&#123;name: &quot;xiaoming&quot;, age: 100&#125;console.log(b1); //&#123;name: &quot;xiaowang&quot;, age: undefined&#125;</code></pre><p>上面例子，我们定义了四个构造函数，通过new实例化调用Girl、Boy、Boy1这三个构造函数，在这三个构造函数中分别使用call、apply、bind继承Person的属性。<br>我们来看下它到底是怎么继承的?</p><pre><code> var Person = function (name, age) &#123;      this.name = name;      this.age = age;&#125;;var Girl = function (name) &#123;    Person.call(this, name);&#125;;  var g = new Girl(&#39;xiaohong&#39;);</code></pre><p>1.先执行<code>g=new Girl(&#39;xiaohong&#39;);</code> 此时执行Girl函数,并执行函数里面的代码<code> Person.call(this, name);</code><br>2.<code> Person.call(this, name);</code>中的this指向调用方,即实例g. 通过call方法后,会调用person函数,本来person的this指向被调用方,此时person函数的this被改变成实例g<br>3.所以就变成<code>g.name=name; g.age=age</code><br>4.所以通过girl实例化出的g相当于继承了person里面的属性</p><h2 id="求数组中的最大和最小值"><a href="#求数组中的最大和最小值" class="headerlink" title="求数组中的最大和最小值"></a>求数组中的最大和最小值</h2><pre><code>var ary = [0, 1, 1, 3, 4, 5, 6, 7];console.log(Math.max(0, 1, 1, 3, 4, 5, 6, 7)); //7console.log(Math.min(0, 1, 1, 3, 4, 5, 6, 7)); //0var max = Math.max.apply(null, ary);var min = Math.min.apply(null, ary);console.log(max,min); //7 0</code></pre><p>上面例子可以看出，正常情况下，<code>Math.max和Math.min</code>的参数为必须为列表，上面只用<code>0-7</code>八个数字还好，但如果数据很多，都放到参数会比较麻烦。</p><p>所以我们借助apply可以将数组转换成列表的功能，这样我们就可以直接传递一个变量了。第一个参数这里使用<code>null</code>，实际换成其他都可以（如随便一个字符串、数字、对象等），这里主要使用的是call函数的 数组转列表功能。</p><h2 id="类数组转数组"><a href="#类数组转数组" class="headerlink" title="类数组转数组"></a>类数组转数组</h2><pre><code>Array.prototype.slice.call(arrayLike) 或者 Array.prototype.slice.apply(arrayLike)</code></pre><p>具体可以戳这<a href="">javascript中的伪（类）数组和数组</a></p><h2 id="数组追加"><a href="#数组追加" class="headerlink" title="数组追加"></a>数组追加</h2><p>在js中我们往数组追加元素，一般使用push方法。</p><pre><code>  var arr1 = [1,2,3];  var arr2 = [4,5,6];  arr1.push(4,5,6)  console.log(arr1) //[1,2,3,4,5,6]</code></pre><p>我们也可以使用apply方法：</p><pre><code>var arr1 = [1,2,3];var arr2 = [4,5,6];[].push.apply(arr1,arr2)console.log(arr1) //[1,2,3,4,5,6]</code></pre><p>上面代码意思表示：[]调用push方法，然后通过call将push方法中的this指向arr1，并将arr2转变成参数列表。这样就达到合并的目的。</p><h2 id="判断变量类型"><a href="#判断变量类型" class="headerlink" title="判断变量类型"></a>判断变量类型</h2><pre><code>Object.prototype.toString.call/apply(object);</code></pre><p>具体详见另一篇文章<a href="https://www.jianshu.com/p/1009ee38e5f1">toString()和Object.prototype.toString.call()</a></p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
          <category> 傻傻分不清楚 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>傻傻分不清楚-Object()、{}、new Object()、Object.create()</title>
      <link href="/ypf-blog/2023/05/26/javascript/%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%E6%A5%9A-Object()%E3%80%81%7B%7D%E3%80%81new%20Object()%E3%80%81Object.create()/"/>
      <url>/ypf-blog/2023/05/26/javascript/%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%E6%A5%9A-Object()%E3%80%81%7B%7D%E3%80%81new%20Object()%E3%80%81Object.create()/</url>
      
        <content type="html"><![CDATA[<h2 id="、Object-、new-Object"><a href="#、Object-、new-Object" class="headerlink" title="{}、Object()、new Object()"></a>{}、Object()、new Object()</h2><p>我们平常工作中一般用<code>let obj=&#123;&#125;</code>对象字面量的方法来创建对象.但其实创建对象还有一些其它方式,如:<code>Object()</code> <code>new Object()</code> <code>Object.create()</code>.下面我们就来具体介绍这些方法的区别.</p><pre><code>let test=&#123;a:1&#125;let test1=Object(&#123;a:1&#125;) //不传就是空对象&#123;&#125;let test2=new Object(&#123;a:1&#125;) //不传就是空对象&#123;&#125;</code></pre><p>我们打印三个结果<br><img src="images/1894758-ae340c8057bbb518.png" width="50%" height="50%" /></p><p> 从图中我们可以看出,三个结果一模一样,并且原型都继承了<code>Object.prototype</code>,我们总结下</p><ol><li>通过字面量的方式和函数的方式都可以用来创建对象</li><li>当以非构造函数形式被调用时(也就是当成函数执行时)，Object 的行为等同于 new Object()。参考mdn官网<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object">Object</a>一节. 简单来说, new Object()和Object()是一样的,<strong>new可以省略</strong></li></ol><p>注意,上面我们调用Object时候传递的参数是个对象,现在我们传递其它类型的参数看看</p><pre><code>let test3=new Object(1)let test4=new Object(&quot;1&quot;)let test5=new Object([1])let test6=new Object(true)</code></pre><p>打印4个结果</p><img src="images/1894758-a36b9ce1972ccaac.png" width="50%" height="50%" /><img src="images/1894758-7d4e3c879299a48f.png" width="50%" height="50%" /><p>我们发现,Object构造函数会根据传入的值的类型返回相应的基本包装类型的实例(对象包装器),我们也可以给其进行操作</p><pre><code>let test3=new Object(1)test3.a=2console.log(test3 instanceof Number);//trueconsole.log(test3); //实例,引用类型let a = Number(1);//这是转型函数，其它的还有String()、 Boolean()、 Array()a.number=2 //不能操作,属于基本数据类型console.log(a); //所以结果为1</code></pre><p>打印出的test3结果如下</p><img src="images/1894758-dc3c8c310cec59fc.png" width="50%" height="50%" /><p>注意:<br>上面我们说了对象字面量、构造函数创建对象,下面我们单独来说下<code>Object.create()</code>,因为它比较特别.</p><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">mdn定义</a>   : Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__。</p><p>语法:</p><pre><code>Object.create(proto，propertiesObject)</code></pre><ul><li>proto:新创建对象的原型对象,必填</li><li>propertiesObject:可选.参数和 <a href="https://www.jianshu.com/p/2aa5a4ce0883">Object.defineProperties()</a> 的descriptor属性描述符一样.</li></ul><p>返回结果:是一个新对象，带着指定的原型对象和属性</p><h3 id="参数proto"><a href="#参数proto" class="headerlink" title="参数proto"></a>参数proto</h3><p>如果不理解,我们直接看例子</p><pre><code>var test1 = Object.create();console.log(test1);</code></pre><p>报错:</p><img src="images/1894758-7fb44ede963b212a.png" width="50%" height="50%" /><p>提示参数必须只能为object或者null,大家可以试下,传递unedfined、数字啥的都会报同样的错<br>继续更改代码,</p><pre><code>let test1 = Object.create(null);let test2=&#123;&#125;console.log(1,test1); //&#123;&#125; //无原型console.log(2,test2); //&#123;&#125; 注意:虽然都为空对象,但是test2有原型test1.a=1console.log(3,test1); //&#123;a:1&#125;console.log(4,test1.a); //1console.log(test1 instanceof Object); //falseconsole.log(test2 instanceof Object); //true</code></pre><p>打印结果</p><img src="images/1894758-f08032029418d36c.png" width="50%" height="50%" /><p>我们发现,如果传递null,生成的对象,原型是空的,在该对象上没有继承 Object.prototype 原型链上的属性或者方法,例如：toString(), hasOwnProperty()等方法</p><p>我们现在更改传递参数,</p><pre><code>let test1 = Object.create(&#123;a:1&#125;);let test2=&#123;a:1&#125;console.log(1,test1); //&#123;&#125; console.log(2,test2); //&#123;a:1&#125;console.log(test1 instanceof Object); //trueconsole.log(test1.a); //1console.log(test2 instanceof Object); //trueconsole.log(test2.a); //1</code></pre><p>打印结果如下:</p><img src="images/1894758-a33cf49a4f5bceb5.png" width="50%" height="50%" /><p>我们发现,我们<strong>传递的对象被赋予到新生成对象的原型上</strong>.现在在回过头来看定义,大家应该就能理解了.所以</p><pre><code>let test = &#123;&#125;;// 以字面量方式创建的空对象就相当于:let test = Object.create(Object.prototype);console.log(test instanceof Object); //true</code></pre><p>接下来,我们看第二个参数</p><h3 id="propertiesObject"><a href="#propertiesObject" class="headerlink" title="propertiesObject"></a>propertiesObject</h3><p>我们上面讲了,propertiesObject和Object.defineProperties的属性描述符一致,现在举个例子:</p><pre><code>let test1 = Object.create(&#123;a:1&#125;,&#123;    // a会成为所创建对象test1的属性    b:&#123;        value:1,    &#125;&#125;);console.log(test1);</code></pre><img src="images/1894758-cd9697002b7c11a3.png" width="50%" height="50%" /><p>我们更改代码</p><pre><code> let test1 = Object.create(&#123;a:1&#125;,&#123;    // a会成为所创建对象test1的属性    b:&#123;        value:1,    &#125;&#125;);test1.a=2test1.b=2console.log(test1)</code></pre><img src="images/1894758-681577e3a241e14a.png" width="50%" height="50%" /><p>我们发现,</p><ul><li><p>我们无法更改b的值,因为默认writable为false,改为true即可</p></li><li><p>我们更改a的值,但是test1对象上面没有a属性,实际a属性在原型上,所以相当于新增,所以我们如果更改,<code>test1.__proto__.a=2</code>即可</p></li><li><p>propertiesObject中定义的对象属性才会适用于属性描述符如writable等,原型上的属性(即第一个参数里的属性)不适用,所以我们可以进行读写操作</p><pre><code>  let test1 = Object.create(&#123;a:1&#125;,&#123;      // a会成为所创建对象test1的属性      b:&#123;          value:1,          writable:true          //其它参数和Object.defineProperties一样,就不一一介绍了      &#125;  &#125;);  test1.b=2  console.log(test1)</code></pre></li></ul><img src="images/1894758-eed22f0dd71543a5.png" width="50%" height="50%" />]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
          <category> 傻傻分不清楚 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何区分函数是否被当构造函数调用</title>
      <link href="/ypf-blog/2023/04/12/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%BB%83/%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86%E5%87%BD%E6%95%B0%E6%98%AF%E5%90%A6%E8%A2%AB%E5%BD%93%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/"/>
      <url>/ypf-blog/2023/04/12/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%BB%83/%E5%A6%82%E4%BD%95%E5%8C%BA%E5%88%86%E5%87%BD%E6%95%B0%E6%98%AF%E5%90%A6%E8%A2%AB%E5%BD%93%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>我们知道定义一个函数，其调用有两种方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">test</span>() <span class="hljs-comment">// 当成函数</span><br><span class="hljs-keyword">new</span> <span class="hljs-title function_">test</span>() <span class="hljs-comment">// 当成构造函数</span><br></code></pre></td></tr></table></figure><p>那么我们在定义函数的时候，如何区分出函数和构造函数呢？</p><ul><li>一般我们用函数名大些就表示构造函数，小写表示函数。但这仅仅是规范，我们在开发过程中仍有可能把大些当成函数用。</li><li>实际中，一般用es6的Class来创建构造函数</li></ul><p>如果我们不用es6，如何限制呢？</p><h2 id="new-target"><a href="#new-target" class="headerlink" title="new.target"></a>new.target</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span>.<span class="hljs-property">target</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;not called with new&quot;</span>;<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>); <br>&#125;<br><span class="hljs-title function_">fn</span>(); <span class="hljs-comment">// 1</span><br><span class="hljs-keyword">new</span> <span class="hljs-title function_">fn</span>(); <span class="hljs-comment">// not called with new 并阻断下面代码打印1</span><br></code></pre></td></tr></table></figure><p>所以，如果使用<code>new fn()</code>调用，函数中是可以访问到<code>new.target</code>的。<br>我们打印下new.target看是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span>.<span class="hljs-property">target</span>); <br>&#125;<br><span class="hljs-title function_">fn</span>(); <br><span class="hljs-keyword">new</span> <span class="hljs-title function_">fn</span>(); <br></code></pre></td></tr></table></figure><img src="images/target.jpg" width="50%" height="50%" /><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">constructor</span> === fn) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;not called with new&quot;</span>;<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>); <br>&#125;<br></code></pre></td></tr></table></figure><p>所以我们也可以通过<code>this.constructor</code>来进行判断。<br>我们打印下this.constructor 看是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">constructor</span>); <br>&#125;<br><span class="hljs-title function_">fn</span>(); <br><span class="hljs-keyword">new</span> <span class="hljs-title function_">fn</span>(); <br></code></pre></td></tr></table></figure><img src="images/constructor.jpg" width="50%" height="50%" /><h2 id="注意箭头函数不能new"><a href="#注意箭头函数不能new" class="headerlink" title="注意箭头函数不能new"></a>注意箭头函数不能new</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span>=(<span class="hljs-params"></span>)=&gt;&#123;<br>&#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title function_">fn</span>() <br></code></pre></td></tr></table></figure><p>运行直接报错<br><img src="images/arrow-fn.jpg" width="50%" height="50%" /></p>]]></content>
      
      
      <categories>
          
          <category> 每日一练 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>判断对象是否含有某个属性</title>
      <link href="/ypf-blog/2023/04/12/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%BB%83/%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E5%90%AB%E6%9C%89%E6%9F%90%E4%B8%AA%E5%B1%9E%E6%80%A7/"/>
      <url>/ypf-blog/2023/04/12/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%BB%83/%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E5%90%AB%E6%9C%89%E6%9F%90%E4%B8%AA%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>举个🌰:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-keyword">const</span> test = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">c</span>: <span class="hljs-literal">undefined</span>,<br>&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(test, <span class="hljs-string">&quot;d&quot;</span>, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-number">4</span>,<br>  <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 是否可以通过遍历循环访问属性</span><br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test);<br></code></pre></td></tr></table></figure><p>上面我们先打印test看下，</p><img src="images/test.jpg" width="50%" height="50%" /><p>可能有些人在工作中直接用 <code>test[key]!==undefined</code>来判断，这样的问题显而易见，如果本身存在值为undefined的key就不行了。</p><h2 id="原型链的hasOwnProperty"><a href="#原型链的hasOwnProperty" class="headerlink" title="原型链的hasOwnProperty"></a>原型链的hasOwnProperty</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&quot;c&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&quot;d&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&quot;toString&quot;</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li><code>hasOwnProperty</code>只能判断自身属性以及不能遍历的属性，不包含原型链上的属性</li><li>如果test本身就有个同名的hasOwnProperty属性，那么就不能用这种方法了。具体介绍看下面</li></ul><h2 id="Object-prototype-hasOwnProperty-call"><a href="#Object-prototype-hasOwnProperty-call" class="headerlink" title="Object.prototype.hasOwnProperty.call"></a>Object.prototype.hasOwnProperty.call</h2><p>上面我们通过对象的hasOwnProperty属性来判断test，但是如果test本身就有个同名的hasOwnProperty属性，那么就不能用这种方法了。所有我们直接访问原型链的方法来判断就可也避免这个问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(test, <span class="hljs-string">&#x27;c&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(test, <span class="hljs-string">&#x27;d&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(test, <span class="hljs-string">&#x27;toString&#x27;</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h2 id="Object-keys-includes"><a href="#Object-keys-includes" class="headerlink" title="Object.keys().includes()"></a>Object.keys().includes()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(test).<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;c&quot;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(test).<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;d&quot;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(test).<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;toString&quot;</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li>只能判断自身属性, 不包含不能遍历的属性，不包含原型链上的属性</li></ul><h2 id="key-in-obj"><a href="#key-in-obj" class="headerlink" title="key in obj"></a>key in obj</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;c&#x27;</span> <span class="hljs-keyword">in</span> test) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;d&#x27;</span> <span class="hljs-keyword">in</span> test) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;toString&#x27;</span> <span class="hljs-keyword">in</span> test) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li>可以判断所有属性</li></ul><h2 id="Reflect-has-obj-key"><a href="#Reflect-has-obj-key" class="headerlink" title="Reflect.has(obj,key)"></a>Reflect.has(obj,key)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">has</span>(test,<span class="hljs-string">&#x27;c&#x27;</span>)) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">has</span>(test,<span class="hljs-string">&#x27;d&#x27;</span>)) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">has</span>(test,<span class="hljs-string">&#x27;toString&#x27;</span>)) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><strong>总结</strong></p><ul><li>可以判断所有属性</li><li>Reflect对象与Proxy对象一样，是 ES6 为了操作对象而提供的新 API。Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综合上面几种方法，所以我们在判断的时候，根据实际情况而定。如需不需要可枚举、只需要自身、需要所有。</p>]]></content>
      
      
      <categories>
          
          <category> 每日一练 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>傻傻分不清楚-preload、prefetch、dns-prefetch、defer和async</title>
      <link href="/ypf-blog/2023/03/01/javascript/%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%E6%A5%9A-preload%E3%80%81prefetch%E3%80%81dns-prefetch%E3%80%81defer%E5%92%8Casync/"/>
      <url>/ypf-blog/2023/03/01/javascript/%E5%82%BB%E5%82%BB%E5%88%86%E4%B8%8D%E6%B8%85%E6%A5%9A-preload%E3%80%81prefetch%E3%80%81dns-prefetch%E3%80%81defer%E5%92%8Casync/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们工作中会经常用到 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://xxx/ooo.css&quot; type=&quot;text/css&quot;&gt;</code> 这样的代码，我们都知道这个用来加载css，后面我们发现vue/react打包后的代码，出现类似下面这种代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">static/js/chunk-ece2389c.3afe4d18.js</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">prefetch</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">static/css/app.0a1cd694.css</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">preload</span> <span class="hljs-attr">as</span>=<span class="hljs-string">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">static/js/runtime.63bac84c.js</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">preload</span> <span class="hljs-attr">as</span>=<span class="hljs-string">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们看上面，发现原来link还可以加载js，并且rel值可以为<code>prefetch、preload</code>，这是什么意思呢？</p><blockquote><p>preload和prefetch是现代浏览器对<link>标签新增的rel值，用来加快页面资源（通常是css和js）的加载速度，改善用户体验。</p></blockquote><ul><li>无论preload还是prefetch，都是<strong>只下载资源，不执行资源</strong>.</li><li><link>在常用用法里无法加载js，只能加载css，但是如果使用prefetch和preload，就可以加载js。</li></ul><p>兼容性：</p><img src="images/prefetch.jpg" width="50%"/><img src="images/preload.jpg" width="50%"/><p>我们上面已经对preload和prefetch有了大致了解，现在我们详细解释下</p><h2 id="preload和prefetch"><a href="#preload和prefetch" class="headerlink" title="preload和prefetch"></a>preload和prefetch</h2><p>我们直接上代码实操下：</p><p><strong>1.css</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>1.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><strong>html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;1.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;preload&quot;</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;style&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;1.js&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;preload&quot;</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;script&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;1.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;prefetch&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;1.js&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;prefetch&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>预览index.html，我们会发现，静态资源都加载了，但是不会执行,如下图,div的样式没有出来，js也没执行。</p><img src="images/index.jpg" width="50%"/><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>现在我们总结下：</p><ul><li>preload和prefetch都用来提前加载资源，preload用来加载当前页面的资源，prefetch用来提前加载好后续页面的资源，这样后续进去其他页面就能省去加载时间</li><li>无论preload还是prefetch，浏览器都是<strong>只下载资源，不执行资源</strong></li><li>preload必须配合as，否则资源连下载都不会下载。实测chrome控制台会警告，资源也没加载了。as的值可以取style、script、image、font、fetch、document、audio、video等。prefetch则可以省略as<img src="images/as.jpg" width="50%"/></li></ul><h3 id="加载顺序"><a href="#加载顺序" class="headerlink" title="加载顺序"></a>加载顺序</h3><p>我们现在现在看下加载顺序，举个🌰</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;1.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;3.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;prefetch&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;3.js&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;prefetch&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;2.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;preload&quot;</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;style&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;2.js&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;preload&quot;</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;script&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>加载结果如下图：<br>1.css&gt;2.css&gt;2.js&gt;3.css&gt;3.js</p><img src="images/load1.jpg" width="50%"/><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;3.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;prefetch&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;3.js&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;prefetch&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;2.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;preload&quot;</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;style&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;2.js&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;preload&quot;</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;script&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;1.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>加载结果如下图：<br>2.css&gt;2.js&gt;1.css&gt;3.css&gt;3.js</p><img src="images/load2.jpg" width="50%"/><p>总结下：</p><ul><li>preload不管在什么位置，都会最先加载，prefetch不管在什么位置优先级最低（独立的请求排到队列之中，然后浏览器空闲时将对这些请求加载），都会在最后加载，所以我们现在只需要知道，想让资源不按照书写顺序加载，想让某些资源插队加载，就可以用preload。</li></ul><p>继续🌰：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;3.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;prefetch&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;3.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;preload&quot;</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;style&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>加载结果如下图,prefetch和preload混用同一个资源，会重复加载<br><img src="images/load3.jpg" width="50%"/></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;3.css&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;3.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;preload&quot;</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;style&quot;</span>/&gt;</span><br>或者<br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;3.css&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;3.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;prefetch&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>图我就不截了，都只会加载一次（浏览器遇到加载同一个资源，会直接把预加载的资源直接掉，不会再重复加载）</p><p>总结下：</p><ul><li>prefetch和preload混用同一个资源，会重复加载（一般也不会这样搞）</li><li>prefetch和preload如果和正常link一起加载资源，只会加载一次</li></ul><h3 id="vue打包实践应用"><a href="#vue打包实践应用" class="headerlink" title="vue打包实践应用"></a>vue打包实践应用</h3><p>我们细心观察下，会发现如下图<br><img src="images/vue.jpg" width="50%"/></p><p>我们发现，同一个资源，先在<code>&lt;head&gt;&lt;/head&gt;</code>中进行preload预加载，然后在<code>&lt;/body&gt;</code>底部进行加载，这样做的好处，提前加载，dom尾部可以立即执行，提高页面加载效率。</p><p><strong>注意：</strong><br><strong>1. 即便网页被关闭，浏览器对该prefetch资源的下载也不会中止，所以，浏览器是一定会加载该资源的。</strong><br><strong>2. prefetch和preload不影响window.onload事件(dom渲染完毕，此时可以获取所有dom)，也就是说，window.onload可能已经执行了，prefetch和preload还在单独加载</strong></p><h2 id="dns-prefetch"><a href="#dns-prefetch" class="headerlink" title="dns-prefetch"></a>dns-prefetch</h2><p>dns-prefetch又是什么？它跟上面两个做的事情不太一样，实际上是强迫浏览器对其他域名（通常就是DNS域名）进行提前解析，以便加快DNS域名的解析速度。<br>比如你的网站域名叫<a href="http://www.a.com，你用的很多资源域名不是a.com,而是放到cdn上，来自于cdn.jsdelivr.net，那么你应该在index.html里最顶部位置写上：">www.a.com，你用的很多资源域名不是a.com,而是放到cdn上，来自于cdn.jsdelivr.net，那么你应该在index.html里最顶部位置写上：</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;dns-prefetch&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;//cdn.jsdelivr.net&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样可以提前解析进行dns域名解析。</p><h2 id="async和defer"><a href="#async和defer" class="headerlink" title="async和defer"></a>async和defer</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 立即加载并执行，阻塞dom渲染</span><br>&lt;script src=<span class="hljs-string">&quot;script.js&quot;</span>&gt;&lt;/script&gt;<br><br><span class="hljs-comment">// 异步加载，不影响后面js加载以及再后面dom渲染，但该资源加载完毕后，会立马执行，假如dom还没渲染完，会阻塞dom渲染</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script.js&quot;</span> <span class="hljs-attr">async</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="hljs-comment">// 异步加载，不影响后面js加载以及再后面dom渲染，dom渲染完（即DOMContentLoaded触发）在进行执行。</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script.js&quot;</span> <span class="hljs-attr">defer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>但是，实际工作过程中，我们一般直接把脚本放到<code>&lt;/body&gt;之前</code>，此办法就可以保证dom渲染完毕后可以获取在执行脚本获取dom，还兼容所有浏览器。</p><ul><li>defer和async都是用来异步加载js的。</li><li>defer的初衷是让你可以把js写在<code>&lt;head&gt;</code>里，而无需担心无法操作DOM。但是，一贯的最佳实践都是把js写在<code>&lt;/body&gt;</code>之前，所以不存在这个问题。</li><li>async虽然下载时不阻塞HTML解析，但是下完完就会立刻执行，引来了很大的问题就是无法掌握执行时机，async在早年前端开发足够简单的时候是有用的，如今开发是各种依赖包，必须掌握执行时机，所以async根本无法考虑。除非无任何依赖dom、js等，比如百度统计等，不过我们一般放到最后一位，不也可以嘛。😁</li><li>defer 属性仅适用于外部脚本，如果 script 脚本没有 src，则会忽略 defer 特性。</li></ul><p>所以，如今开发中，这两个属性应用场景并不多。</p><blockquote><p><a href="https://www.jianshu.com/p/02ec29ff9842">弄清preload、prefetch、dns-prefetch、defer和async</a><br><a href="https://blog.csdn.net/qq_27674439/article/details/101316754">defer和async的区别</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
          <category> 傻傻分不清楚 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git删除仓库大文件历史-BFG</title>
      <link href="/ypf-blog/2023/02/21/git/git%E5%88%A0%E9%99%A4%E4%BB%93%E5%BA%93%E5%A4%A7%E6%96%87%E4%BB%B6%E5%8E%86%E5%8F%B2-BFG/"/>
      <url>/ypf-blog/2023/02/21/git/git%E5%88%A0%E9%99%A4%E4%BB%93%E5%BA%93%E5%A4%A7%E6%96%87%E4%BB%B6%E5%8E%86%E5%8F%B2-BFG/</url>
      
        <content type="html"><![CDATA[<h2 id="git删除仓库大文件历史-BFG"><a href="#git删除仓库大文件历史-BFG" class="headerlink" title="git删除仓库大文件历史-BFG?"></a>git删除仓库大文件历史-BFG?</h2><blockquote><p>我们在平常工作中，可能会不小心commit大文件，后面发现，又删除掉重新commit， 但历史记录仍会存在.git仓库中，导致新clone仓库时，仓库很大，clone很慢,那么如何操纵git历史，将仓库中的大文件记录删除呢？</p></blockquote><p>我们实际操作下：<br>我们随便弄个git，然后放个大文件，这里以bfg.jar为例子，十几M，然后我们commit后，如下图，我们可以看到git仓库中存在该文件的历史记录</p><img src="images/img1.jpg" width="50%" height="50%" /><p>然后我们删除bfg.jar，再次commit， 如下图，仍会存在历史记录（肯定得存在，要不git可以恢复任意版本怎么实现）<br><img src="images/img2.jpg" width="50%" height="50%" /></p><p>直接删除？试试！</p><p>我们直接找到图中的68文件夹删除，我们会发现git暂存区不会检测到，然后我们git push，会报错</p><p><code>error: refs/heads/master does not point to a valid object!</code></p><p>坏了，把仓库搞坏了， 赶紧撤销， 又可以正常push了。</p><p>那么又该怎么删除大文件呢？我们介绍下<a href="https://rtyley.github.io/bfg-repo-cleaner/">BFG Repo-Cleaner</a></p><h2 id="BFG-Repo-Cleaner"><a href="#BFG-Repo-Cleaner" class="headerlink" title="BFG Repo-Cleaner"></a>BFG Repo-Cleaner</h2><p><strong>BFG Repo-Cleaner</strong> 最新版需要确保本地的java为Jdk8+,它为我们提供了一个工具，来快捷的清理仓库。使用步骤如下</p><ol><li>本机安装java</li><li>下载bfg-1.14.0.jar包，改名为bfg.jar</li><li>在电脑上随便找个位置，使用 <code>--mirror</code>重新clone仓库，（ 假如仓库地址为 <a href="http://github.com/test.git">http://github.com/test.git</a> ），命令如下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用--mirror克隆项目</span><br>git <span class="hljs-built_in">clone</span> --mirror http://github.com/test.git<br></code></pre></td></tr></table></figure></li></ol><p>clone后会出现一个文件夹，名字就叫test.git，里面只含有.git，(我们平常clone仓库，文件夹名不含.git，并且包含有代码),类似下图</p><img src="images/clone.jpg" width="50%" height="50%" /><ol start="4"><li>将第二步的bfg.jar包放到和git仓库的同级目录，执行下面任意一条命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除大于100M的文件</span><br>java -jar bfg.jar --strip-blobs-bigger-than 100M test.git<br><span class="hljs-comment"># 删除所有的名为&#x27;id_dsa&#x27;或&#x27;id_rsa&#x27;的文件</span><br>java -jar bfg.jar --delete-files id_&#123;dsa,rsa&#125;  test.git<br><span class="hljs-comment"># 删除doc文件夹下所有的文件</span><br>java -jar bfg.jar --delete-folders doc test.git<br><span class="hljs-comment">#  删除指定文件</span><br>java -jar bfg.jar --delete-files name-of-file  test.git<br></code></pre></td></tr></table></figure></li></ol><p>此时，BFG将更新您的提交以及所有分支和标记，此时还没有物理删除。</p><ol start="5"><li>进入test.git文件夹<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#进入项目</span><br><span class="hljs-built_in">cd</span> test.git<br></code></pre></td></tr></table></figure></li><li> 在当前目录执行，进行删除大文件，此时已经物理删除<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除文件</span><br>git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive<br></code></pre></td></tr></table></figure></li><li>推送到远程即可<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 推送<br>git push<br></code></pre></td></tr></table></figure></li></ol><p><strong>注意：</strong></p><p>如果之前已经有人clone过带大文件的项目， 你执行上面操作删除后，其他人本地仍会存在，实践让其他人<code>git fetch</code>不管用，<br>所以需要让其他人提交代码后（大文件又会提交），删除项掉目，你重新执行上面操作删除掉大文件， 此时其他人再clone项目即可。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git标签-tag</title>
      <link href="/ypf-blog/2023/02/01/git/git%E6%A0%87%E7%AD%BE-tag/"/>
      <url>/ypf-blog/2023/02/01/git/git%E6%A0%87%E7%AD%BE-tag/</url>
      
        <content type="html"><![CDATA[<h2 id="tag是什么"><a href="#tag是什么" class="headerlink" title="tag是什么?"></a>tag是什么?</h2><p>tag相当于commitId的别名，不依赖分支，和commit绑定，一般我们用来：</p><ul><li>上线后打个tag推上去，如20230201版本号， 或者在开发中某个功能打个tag。 这样可以快速切换到该tag下（如果通过commitId切换就得要查找那么长的commitId，麻烦）</li></ul><p>直接看代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.打tag</span><br><br><span class="hljs-comment"># 当前最新/指定commit打tag</span><br>$ git tag 标签名 [commitId]<br><span class="hljs-comment"># 打带备注信息的tag</span><br>$ git tag -a 标签名 -m [commitId] <span class="hljs-string">&quot;备注信息&quot;</span>  <br><br><span class="hljs-comment"># 2.查看tag</span><br><br><span class="hljs-comment"># 查看所有tag</span><br>  git tag<br><span class="hljs-comment"># 筛选出tag1，tag2</span><br>  git tag -l 标签名称1 标签名2<br><span class="hljs-comment"># 查看tag具体信息</span><br>  git show 标签名称<br><br><span class="hljs-comment"># 3.删除tag</span><br><br><span class="hljs-comment"># 删除本地tag</span><br>  git tag -d 标签名称<br><span class="hljs-comment"># 删除远程tag</span><br>  git push origin --delete tag 1.0.0<br>  或者<br>  git push origin :refs/tags/1.0.0<br><br><br><span class="hljs-comment"># 4. 上传tag</span><br><br><span class="hljs-comment">#上传所有tag</span><br>  git push origin --tags<br><span class="hljs-comment">#上传指定tag</span><br>  git push origin tag名<br><br><br><span class="hljs-comment"># 5. 切换tag</span><br>与分支管理一样，我们也是可以直接切换到某个 tag 上去的，切换完会提示你当前处于一个 <span class="hljs-string">&quot;detached HEAD&quot;</span> 状态，<br>此时我们不在任何分支上，处于游离状态（tag 相当于是一个快照，我们是不能直接更改它的代码），但可以基于这个 tag 创建一个分支<br><span class="hljs-comment">#先切换到指定tag</span><br>$ git checkout tag名<br><span class="hljs-comment">#在此tag上创建分支</span><br>$ git checkout -b [newbranchname] [tagname]<br><br></code></pre></td></tr></table></figure><p>切换tag的截图</p><img src="images/tag.jpg"/><blockquote><p><a href="https://cloud.tencent.com/developer/article/1494508">Git打标签与版本控制规范</a><br><a href="https://juejin.cn/post/7074777378714550303">git tag的使用</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mac配置nginx以及常用命令</title>
      <link href="/ypf-blog/2023/01/17/nginx/mac%E9%85%8D%E7%BD%AEnginx%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/ypf-blog/2023/01/17/nginx/mac%E9%85%8D%E7%BD%AEnginx%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>此篇文章比较简单，并不全，只是用于记录常用命令，用到啥添加啥</p><h2 id="mac安装nginx"><a href="#mac安装nginx" class="headerlink" title="mac安装nginx"></a>mac安装nginx</h2><h3 id="通过Homebrew安装"><a href="#通过Homebrew安装" class="headerlink" title="通过Homebrew安装"></a>通过Homebrew安装</h3><p>homebrew是什么？它是Mac中的一款软件包管理工具，通过brew可以很方便的在Mac中安装软件或者是卸载软件。可参考其官网<a href="https://brew.sh/index_zh-cn.html">Homebrew</a></p><p><strong>Homebrew 怎么安装?</strong></p><h4 id="方法一：通过brew官网安装脚本"><a href="#方法一：通过brew官网安装脚本" class="headerlink" title="方法一：通过brew官网安装脚本"></a>方法一：通过brew官网安装脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>但是可能存在网络问题，要么下载极其龟速，要么直接出现如下提示<code>curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</code></p><h4 id="方法二：通过中科大镜像仓库源加速访问安装"><a href="#方法二：通过中科大镜像仓库源加速访问安装" class="headerlink" title="方法二：通过中科大镜像仓库源加速访问安装"></a>方法二：通过中科大镜像仓库源加速访问安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/bin/ruby -e <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install)</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install nginx<br></code></pre></td></tr></table></figure><h3 id="brew-常用命令"><a href="#brew-常用命令" class="headerlink" title="brew 常用命令"></a>brew 常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更新Homebrew</span><br>brew update <br><span class="hljs-comment"># 查看nginx的配置信息</span><br>brew info nginx<br></code></pre></td></tr></table></figure><h3 id="版本问题"><a href="#版本问题" class="headerlink" title="版本问题"></a>版本问题</h3><h4 id="1-执行任何brew命令都会报错"><a href="#1-执行任何brew命令都会报错" class="headerlink" title="1.执行任何brew命令都会报错"></a>1.执行任何brew命令都会报错</h4><p>提示<code>/usr/local/Homebrew/Library/Homebrew/version.rb:368:in ‘initialize’: Version value must be a string; got a NilClass () (TypeError)</code></p><p>我们只需要执行 <code>brew update-reset</code>更新到最新版本即可</p><h2 id="nginx配置目录"><a href="#nginx配置目录" class="headerlink" title="nginx配置目录"></a>nginx配置目录</h2><ul><li>nginx默认安装到 <code>/usr/local/Cellar/nginx</code>  目录下</li><li>nginx配置目录：<code>/usr/local/etc/nginx/nginx.conf</code></li><li>文件部署目录：<code>/usr/local/var/www</code> ，我们也可以访问 <code>/usr/local/Cellar/nginx/1.17.9/html</code>, 实际指向的就是<code>/usr/local/var/www</code></li><li>log目录：<code>/usr/local/var/log/nginx/*.log</code> （其中，access.log  每次正常访问的日志，error.log    每次报错的日志）</li></ul><h2 id="nginx常用命令"><a href="#nginx常用命令" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-number">1</span>、启动nginx命令<br>sudo nginx<br><br><span class="hljs-number">2</span>、重启nginx命令<br>sudo nginx -s reload<br><br><span class="hljs-number">3</span>、优雅的停止nginx（具体区别没测试）<br>sudo nginx -s quit<br><br><span class="hljs-number">4</span>、快速停止nginx<br>sudo nginx -s stop<br><br><span class="hljs-number">5</span>、打开nginx命令<br>sudo vim /usr/local/etc/nginx/nginx.<span class="hljs-property">conf</span><br><br><span class="hljs-number">6</span>、编辑nginx命令<br>⬆️+ i（先要退出编辑状态）<br><br><span class="hljs-number">7</span>、保存nginx命令<br>⬆️+ w（先要退出编辑状态）<br><br><span class="hljs-number">8</span>、保存退出nginx命令<br>⬆️+ wq（先要退出编辑状态）<br><br><span class="hljs-number">9</span>、退出nginx命令<br>⬆️+ q（先要退出编辑状态）<br><br><span class="hljs-number">10</span>、退出nginx编辑命令<br>esc<br><br></code></pre></td></tr></table></figure><h2 id="nginx部署静态文件（此处以vue项目为例）"><a href="#nginx部署静态文件（此处以vue项目为例）" class="headerlink" title="nginx部署静态文件（此处以vue项目为例）"></a>nginx部署静态文件（此处以vue项目为例）</h2><ol><li>打开nginx的根目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">open /usr/local/var/www<br></code></pre></td></tr></table></figure><ol start="2"><li>打包vue项目</li></ol><p><strong>注意</strong>：如果部署在网站根目录，正常打包，默认vue打包index.html引用路径类似如下：<br><code>&lt;link href=&quot;/static/js/chunk-vendors.846027a5.js&quot;</code></p><p>如果部署在二级/任意级域名下，要修改 <code>publicPath:&#39;&#39;</code>,打包后，引用路径如下：<br><code>&lt;link href=&quot;static/js/chunk-vendors.846027a5.js&quot;</code></p><p>我们下面以适用性广的配置为例， 即二级域名，我们将打包后的dist文件夹修改为名字为test复制第一步的目录中</p><ol start="3"><li>配置nginx<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">open /usr/local/etc/nginx/nginx.conf<br></code></pre></td></tr></table></figure></li></ol><p>增加server代码块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">  server &#123;<br>    listen 80;<br>    location /test &#123;<br>        root  html;<br>        index  index.html index.htm;<br>    &#125;<br> &#125;<br> 或者<br> server &#123;<br>    listen 80;<br>    location /test &#123;<br>        <span class="hljs-built_in">alias</span>  html/test;<br>        index  index.html index.htm;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="4"><li>启动nginx， 访问 <code>http://localhost/test</code> 即可</li></ol><h2 id="nginx中-root-和location-区别"><a href="#nginx中-root-和location-区别" class="headerlink" title="nginx中 root 和location 区别"></a>nginx中 root 和location 区别</h2><p>nginx 指定文件的路径有两种方式 root 和 alias，两种方法的作用域不一样：</p><ul><li>root 与 alias 主要区别在于 nginx 如何拼接 location 后面的 url 去访问文件</li><li>root 的处理结果是：nginx访问<code>root + location路径</code> ; alias 的处理结果是：nginx直接访问<code>alias路径</code>,如上面的配置例子</li></ul>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>patch-package</title>
      <link href="/ypf-blog/2022/10/08/npm/patch-package/"/>
      <url>/ypf-blog/2022/10/08/npm/patch-package/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们在开发中,经常用到第三方依赖,假如我们现在用到了<code>element-ui</code>的button组件,但是发现有时候需要拓展,或者改组件bug, 起初我们想到的方案是:</p></blockquote><ul><li>找到node_modules源码,复制到本地修改,然后引用本地,但是这种一是不太优雅,二是如果人家更新,自己项目还要重新复制过来修改,非常麻烦.</li></ul><p>有没有其他方案呢?</p><h2 id="什么是patch-package"><a href="#什么是patch-package" class="headerlink" title="什么是patch-package?"></a>什么是patch-package?</h2><p>官方这样描述: <a href="https://github.com/ds300/patch-package">patch-package</a> lets app authors instantly make and keep fixes to npm dependencies. It’s a vital band-aid for those of us living on the bleeding edge.</p><p>简单来说就是打补丁、创可贴</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ol><li><p><code>npm install patch-package --save-dev</code> ,先安装包</p></li><li><p>直接在<code>node_modules</code>中修改包文件,然后运行 <code>npx patch-package 包名</code>,<br>此时patch-package会在项目根目录生成一个patches文件夹,并生成补丁文件,文件名格式为 <code>包名+包版本号码 如element-ui+2.15.10</code><br>(注意如果node_modules中包文件没有改动,运行命令,会提示没有改动).</p><img src="images/noPackage.jpg"/><img src="images/nochange.jpg"/><img src="images/change.jpg"/></li><li><p>在<code>package.json</code>文件中的 scripts 中加入git钩子 <code>&quot;postinstall&quot;: &quot;patch-package&quot;</code>。这样我们每次npm install后, patch-package会去找patche文件并将依赖进行更新,如果同伴不想删除依赖重装,可以让其直接 执行 <code>patch-package</code>即可</p></li></ol><p>总结下:</p><pre><code>生成补丁: `npx patch-package 包名`执行补丁: `npx patch-package`</code></pre><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><code>npx patch-package 包名</code>生成补丁原理是先去package.json并且必须要有package-lock.json(或者yarn.lock也可以)中找对应的包名,然后再去 node_modules文件中找,所以如果package.json或者package-lock.json文件没有,就会报错找不到</li><li>生成的补丁文件实际上是一个diff文件，使用<code>npx patch-package</code>执行补丁时,<br>其会自动根据patch文件的名字(包名+版本号)直接去node_modules文件中找,如果找不到也会报错, 版本号不对也会报错.<br>不会依赖package.json和package-lock.json文件.<br>所以假如生成patch的版本是 2.5.10版本,假如第三方更新为2.5.11时, 执行补丁会提示找不到.问是否是2.5.10,此时再手动执行<code>npx patch-package element-ui</code>, 此时patch文件名会自动变更为为2.5.11版本, <strong>但是注意很有可能即使补丁成功应用，也会出现破损,所以自己要核对下</strong></li></ol><p>这里手动把patch包名字改成 2.5.10测试下,如图</p><img src="images/update.jpg" /><ol start="3"><li>不要去人为修改patch文件, 如果修改了,<code>执行补丁也会报错 </code> maybe there was an accidental change made to the patch file?`</li></ol>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTP headers 之 host, referer, origin</title>
      <link href="/ypf-blog/2022/09/27/http/HTTP%20headers%20%E4%B9%8B%20host,%20referer,%20origin/"/>
      <url>/ypf-blog/2022/09/27/http/HTTP%20headers%20%E4%B9%8B%20host,%20referer,%20origin/</url>
      
        <content type="html"><![CDATA[<img src="images/1.png" width="50%" height="50%"/><p>我们在工作过程中,是不是经常在header头看到过这三个字段,那么这三个字段具体是什么区别呢?</p><h2 id="host"><a href="#host" class="headerlink" title="host"></a>host</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>host:当前请求资源的服务器域名/ip地址+端口号。(不包含协议)<br>组成：域名+端口号</p><p>假如我们这里有index.html,本地服务启动,<code>http://localhost:5500/index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!--html的Host: localhost:5500 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 没有host,有 :authority: cdn.bootcdn.net --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.27.2/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Host: localhost:5500 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./test.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Host: www.baidu.com  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.baidu.com/img/flexible/logo/pc/result@2.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// Host: developers.douban.com</span></span><br><span class="language-javascript">        <span class="hljs-title function_">axios</span>(<span class="hljs-string">&#x27;https://developers.douban.com/wiki/?title=api_v2&#x27;</span>)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="images/host.gif" /> <p>总结下:</p><ul><li>Host 在request Header头里面,表示当前请求资源的域名</li><li>HTTP/1.1 的所有请求报文中必须包含一个 Host 头字段。如果一个 HTTP/1.1 请求缺少 Host 头字段或者设置了超过一个的 Host 头字段，一个400（Bad Request）状态码会被返回。</li><li>HTTP/2 引入了<code>:authority</code>标头来替换 Host 标头</li></ul><p>我们可以在控制台看到加载资源的http版本</p><img src="images/http-version.jpg" /><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>host主要应用在虚拟主机技术上.<br>比如说有一台 ip 地址为 11.11.11.11 的服务器，在这台服务器上部署着淘宝、京东、拼多多的网站，并且配置了三个虚拟主机：a.com, b.com, c.com, 这三个域名都指向 11.11.11.11。 当我们访问 c.com 的网站时，看到的是拼多多的页面而不是淘宝和京东的页面，原因就是 Host 请求头决定着访问哪个虚拟主机。</p><img src="images/host-virtual.awebp" /><h2 id="referer"><a href="#referer" class="headerlink" title="referer"></a>referer</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>referer:表示当前请求的资源是从哪里来的<br>组成：协议+域名+端口号+路径+查询参数（注意，不包含 hash值）</p><p>场景1: 还是假设index.html,本地服务启动,我们直接在浏览器url上打开该网址<code>http://localhost:5500/index.html?a=1&amp;b=2#aa</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span> <br><span class="hljs-comment">&lt;!-- html 没有referer--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- referer: http://localhost:5500/ --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.27.2/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Referer: http://localhost:5500/index.html?a=1&amp;b=2 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./test.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Referer: http://localhost:5500/index.html?a=1&amp;b=2 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./test.css&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Referer: http://localhost:5500/ --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.baidu.com/img/flexible/logo/pc/result@2.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- Referer: http://localhost:5500/index.html?a=1&amp;b=2 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./test1.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// referer: http://localhost:5500/</span></span><br><span class="language-javascript">      <span class="hljs-title function_">axios</span>(<span class="hljs-string">&quot;https://developers.douban.com/wiki/?title=api_v2&quot;</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="images/referer.gif" /><p>我们总结下:</p><ol><li>直接在浏览器输入地址打开页面, 页面没有referer, 但是页面加载的资源是有referer的</li><li>页面加载的资源如果和页面域名同源的话,referer=协议+域名+端口号+路径+查询参数,如果不同源,referer=协议+域名+端口号</li></ol><p>场景2: 假设有a.html, b.html, 我们测试下从a跳转b以及b跳转a </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>a页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.baidu.com/img/flexible/logo/pc/result@2.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>a页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8082/b.html&quot;</span>&gt;</span> a标签跳转b页面 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8082/b.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">blank</span>&gt;</span> a标签跳转b页面(target=blank) <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.location.href=&#x27;http://localhost:8082/b.html&#x27;&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span> 跳转b页面(window.location.href) <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.open(&#x27;http://localhost:8082/b.html&#x27;)&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span> 跳转b页面(window.open) <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!-- html --&gt;</span><br><span class="hljs-comment">&lt;!-- 从a标签过来: Referer: http://localhost:8080/ --&gt;</span><br><span class="hljs-comment">&lt;!-- 从a标签target=blank过来: Referer: http://localhost:8080/ --&gt;</span><br><span class="hljs-comment">&lt;!-- 从window.location.href: Referer: http://localhost:8080/ --&gt;</span><br><span class="hljs-comment">&lt;!-- 从window.open: Referer: http://localhost:8080/ --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>b页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 从a标签过来: Referer: http://localhost:8082/ --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 从a标签target=blank过来: Referer: http://localhost:8082/ --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 从window.location.href: Referer: http://localhost:8082/ --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 从window.open: Referer: http://localhost:8082/ --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.baidu.com/img/flexible/logo/pc/result@2.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8080/a.html&quot;</span>&gt;</span> a标签返回a页面 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;window.history.go(-1)&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span> window.history.go(-1)返回a页面 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><blockquote><p><a href="https://juejin.cn/post/6844903954455724045">HTTP headers 之 host, referer, origin</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git简写-alias</title>
      <link href="/ypf-blog/2022/09/16/git/git%E7%AE%80%E5%86%99-alias/"/>
      <url>/ypf-blog/2022/09/16/git/git%E7%AE%80%E5%86%99-alias/</url>
      
        <content type="html"><![CDATA[<h2 id="git简写"><a href="#git简写" class="headerlink" title="git简写?"></a>git简写?</h2><blockquote><p>我们每天都要码字进行git操作,长时间就会感觉一直输入重复的命令,那么有没有简写方式?</p></blockquote><p>直接看代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.方式一</span><br><br><span class="hljs-comment"># cm (commit -m)</span><br>git config --global alias.ad add .<br><span class="hljs-comment"># cm (commit -m)</span><br>git config --global alias.cm commit -m<br><span class="hljs-comment"># ph(push)</span><br>git config --global alias.ph push<br><br>添加完后会自动在.gitconfig文件添加如下命令<br><br>[<span class="hljs-built_in">alias</span>]<br>ad = add<br>cm = commit<br>ph = push<br><br>注意,通过第一种方式,只会添加空格前面的内容,所以commit -m只能生成commit, add . 只能生成add, 所以我们一般直接手动改.gitconfig文件<br><br><span class="hljs-comment"># 2.方式二(电脑中找到.gitconfig文件添加如下代码,我们可以输入git config --list --show-origin快速查找该文件位置)</span><br><br>[<span class="hljs-built_in">alias</span>]<br>ad = add .<br>cm = commit -m<br>ph = push<br><br></code></pre></td></tr></table></figure><p>此时我们就可以用下面方式提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git ad<br>git cm <span class="hljs-string">&#x27;备注&#x27;</span><br>git ph<br><br></code></pre></td></tr></table></figure><p>写到这里,有没有更简单的方式,既然都简写了,我肯定连git都不想输入,当然有</p><h2 id="配置bash别名或zsh别名等"><a href="#配置bash别名或zsh别名等" class="headerlink" title="配置bash别名或zsh别名等"></a>配置bash别名或zsh别名等</h2><p>如果使用的命令行编辑器是bash,编辑.bash_profile文件,<br>如果是zsh,编辑.zshrc文件, 像mac，目录一般存在于文稿-用户名-隐藏文件（<code>cmd+shift+.</code>切换显示隐藏文件）<br>都增加下面的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> gac=<span class="hljs-string">&quot;git add . &amp;&amp; git commit -m&quot;</span><br><span class="hljs-built_in">alias</span> gh=<span class="hljs-string">&quot;git push&quot;</span><br><span class="hljs-comment">#  一键提交  </span><br><span class="hljs-comment"># 获取当前分支名 </span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">gach</span></span>() &#123;<br>    git add .<br>    git commit -m <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span><br>    <span class="hljs-comment"># 获取当前分支名</span><br>    branch_name=$(git symbolic-ref --short -q HEAD)<br>    git push origin <span class="hljs-variable">$branch_name</span><br>&#125;<br><span class="hljs-built_in">alias</span> gacp=gacp<br></code></pre></td></tr></table></figure><p>这样,我们直接这样即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">gac <span class="hljs-string">&#x27;备注&#x27;</span><br>gh<br>gach <span class="hljs-string">&#x27;备注&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git回滚-reset</title>
      <link href="/ypf-blog/2022/09/16/git/git%E5%9B%9E%E6%BB%9A-reset/"/>
      <url>/ypf-blog/2022/09/16/git/git%E5%9B%9E%E6%BB%9A-reset/</url>
      
        <content type="html"><![CDATA[<h2 id="硬回滚-reset-–hard"><a href="#硬回滚-reset-–hard" class="headerlink" title="硬回滚(reset –hard)?"></a>硬回滚(reset –hard)?</h2><p>直接看代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 回退到上个版本</span><br>git reset --hard HEAD^<br><span class="hljs-comment"># 回退到上上个版本</span><br>git reset --hard HEAD^^<br><span class="hljs-comment"># 通过commit_id(注意,这个id可以是简写,如通过git reflog获取的简写id)回退/前进到指定版本</span><br>git reset --hard commit_id  <br></code></pre></td></tr></table></figure><p>我们在开发过程中, reset –hard使用比较多,实际还有一种选项 –soft来回滚代码</p><h2 id="软回滚-reset-–soft"><a href="#软回滚-reset-–soft" class="headerlink" title="软回滚(reset –soft)?"></a>软回滚(reset –soft)?</h2><p>直接看代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 回退到上个版本</span><br>git reset --soft HEAD^<br><span class="hljs-comment"># 回退到上上个版本</span><br>git reset --soft HEAD^^<br><span class="hljs-comment"># 通过commit_id(注意,这个id可以是简写,如通过git reflog获取的简写id)回退/前进到指定版本</span><br>git reset --soft commit_id  <br></code></pre></td></tr></table></figure><h2 id="soft和hard区别"><a href="#soft和hard区别" class="headerlink" title="soft和hard区别?"></a>soft和hard区别?</h2><p>那么 –hard和–soft的区别是什么?我们这里还是有3次commit记录,我们分别用这两种命令回退版本</p><p>–soft HEAD^<br><img src="images/soft1.gif" /><br>–soft HEAD^^<br><img src="images/soft2.gif" /></p><p>–hard HEAD^<br><img src="images/hard1.jpg" /><br>–hard HEAD^^<br><img src="images/hard2.jpg" /></p><p>我们看上图可以知道其中的区别:</p><p>比如回退到上个版本,<br>hard是直接回退到上个版本,当前工作区就是上个版本<br>soft当前工作区仍是最新的代码,只不过没有commit,代码在暂存区</p><h2 id="reset回退后如何push"><a href="#reset回退后如何push" class="headerlink" title="reset回退后如何push?"></a>reset回退后如何push?</h2><p>我们通过上面操作回退后,如果代码之前没push过,直接push即可,如果之前已经push过,那回退后的代码和远程的代码不一致, 此时push会提示不一致,我们只需要强制提交即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 强制提交</span><br>git push --force 或 git push -f<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git log与git reflog区别</title>
      <link href="/ypf-blog/2022/09/16/git/git%20log%E4%B8%8Egit%20reflog%E5%8C%BA%E5%88%AB/"/>
      <url>/ypf-blog/2022/09/16/git/git%20log%E4%B8%8Egit%20reflog%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="git如何查看历史版本"><a href="#git如何查看历史版本" class="headerlink" title="git如何查看历史版本?"></a>git如何查看历史版本?</h2><blockquote><p>你可能在开发中,需要切换到历史版本,那么我们都有什么命令呢?</p></blockquote><p>直接看代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span><br><span class="hljs-comment"># 每条日志都只显示一行 </span><br>git <span class="hljs-built_in">log</span> --pretty=oneline<br>git <span class="hljs-built_in">log</span> -g<br>git reflog<br></code></pre></td></tr></table></figure><p>我们发现查看git历史,有很多命令,那么这些命令都有什么区别吗?现在我们假如我们有3次commit记录,我们分别运行上面命令看下效果</p><img src="images/log.jpg" /><p>从上面截图,我们可以看出</p><ul><li>git log 展示信息比较详细,但看着比较乱</li><li>使用 –pretty=oneline可以将信息展示一行(只有commitId和备注)</li><li>git log -g 从上图看上去和git log一样(<strong>真一样吗?</strong>)</li><li>git reflog 展示的只含有前缀的commitId和备注</li></ul><p>现在,我们使用git reset —hard HEAD^ 回退上一个版本,再次打印log</p><img src="images/log2.jpg" />从上面截图,以及对比第一的截图,我们总结下<p><strong>1. git log只展示当前版本以及之前的日志,不包含回退的过程, -g可以展示</strong><br><strong>2. git reflog包含回退的过程</strong><br><strong>3. git log 加上–pretty=oneline可以将信息展示一行(只有commitId和备注)</strong><br><strong>4. 准确的说,git log展示的是commit的list, reflog或-g展示的是git所有操作日志</strong></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git修改commit信息-amend</title>
      <link href="/ypf-blog/2022/09/16/git/git%E4%BF%AE%E6%94%B9commit%E4%BF%A1%E6%81%AF-amend/"/>
      <url>/ypf-blog/2022/09/16/git/git%E4%BF%AE%E6%94%B9commit%E4%BF%A1%E6%81%AF-amend/</url>
      
        <content type="html"><![CDATA[<h2 id="git修改commit信息-未push-只commit了"><a href="#git修改commit信息-未push-只commit了" class="headerlink" title="git修改commit信息(未push,只commit了)?"></a>git修改commit信息(未push,只commit了)?</h2><blockquote><p>某一天,你正在飞速敲代码,结果一不小心 git commit -ma,将备注搞成a了, 不要说不可能,开发不规范,一切皆有可能, 不过此时还没push,那么如果修改这个信息呢?</p></blockquote><h3 id="最近一次"><a href="#最近一次" class="headerlink" title="最近一次"></a>最近一次</h3><p>直接看代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment"># 修改最近一次commit信息,此时会跳出vim窗口,修改完:wq保存即可</span><br>$ git commit —amend <br><span class="hljs-comment"># 直接修改最近一次commit信息,不用vim窗口</span><br>$ git commit --amend --message=<span class="hljs-string">&quot;XXX&quot;</span><br><span class="hljs-comment"># 又想修改commit信息,又想修改author信息</span><br>$ git commit --amend --message=<span class="hljs-string">&quot;XXX&quot;</span> --author=<span class="hljs-string">&quot;XXX &lt;XXX@XX.com&gt;&quot;</span><br><br></code></pre></td></tr></table></figure><p><strong>注意⚠️: 这个只适用于修改最新的一次commit信息</strong></p><h3 id="指定某次"><a href="#指定某次" class="headerlink" title="指定某次"></a>指定某次</h3><p>要修改指定某次commit的信息,我们可以使用<strong>变基git rebase</strong>操作.<br>这里我们假设有2次提交记录,我们要修改第一次的commit信息:</p><ol><li><p><code>git log --oneline</code> 查看commit信息<br>因为我们要修改的第一次,但是<code>git rebase -i [startpoint]  [endpoint]</code> 左开右闭,所以不包含第一次, 我们使用 <code>--root到根</code>. <strong>注意git rebase -i 的记录是正序的, 和git log倒序相反,比较特殊</strong></p><img src="images/1.jpg" width="50%" height="50%" /></li><li><p><code>git rebase -i --root</code></p><img src="images/2.jpg" width="50%" height="50%" /></li><li><p><code>i</code>进入编辑模式,修改pick为s, <code>esc</code>推出编辑模式,  <code>:wq</code>保存退出. </p></li><li><p>此时会跳出一个窗口,<code>i</code>进入编辑修改commit信息,输入完 <code>esc</code>,然后<code>:wq</code>保存退出即可</p><img src="images/3.jpg" width="50%" height="50%" /></li></ol><h2 id="git修改commit信息-已经push了"><a href="#git修改commit信息-已经push了" class="headerlink" title="git修改commit信息(已经push了)?"></a>git修改commit信息(已经push了)?</h2><p>执行完上面命令,要 <code>git push -f </code>强制提交就会覆盖的提交信息了. 适用任意次,比如如果上面修改的是最近一次就会更新最后一次,如果是指定的某次,就会更新指定某次.</p><img src="images/4.jpg" width="50%" height="50%" />]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git暂存-stash</title>
      <link href="/ypf-blog/2022/09/16/git/git%E6%9A%82%E5%AD%98-stash/"/>
      <url>/ypf-blog/2022/09/16/git/git%E6%9A%82%E5%AD%98-stash/</url>
      
        <content type="html"><![CDATA[<h2 id="暂存-stash-是什么"><a href="#暂存-stash-是什么" class="headerlink" title="暂存(stash)是什么?"></a>暂存(stash)是什么?</h2><blockquote><p>某一天你正在 feature 分支开发新需求，突然产品经理跑过来说线上有bug，必须马上修复。而此时你的功能开发到一半，于是你急忙想切到 master 分支，你可能会commit -m “暂存代码”,然后切到hotfix分支去修复bug,这样搞虽然没什么问题,但是不太优雅, 那么怎么才能不commit,直接去切到hotfix分支?stash命令就可以满足你的需求</p></blockquote><p>直接看代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.暂存</span><br><br><span class="hljs-comment"># 暂存当前代码</span><br>$ git stash<br><span class="hljs-comment"># 暂存当前代码并带备注</span><br>$ git stash save ‘备注的内容’<br><br><span class="hljs-comment"># 2.恢复暂存 stash pop</span><br><br><span class="hljs-comment"># 查看暂存list</span><br>  git stash list<br><span class="hljs-comment"># 恢复最近一次的stash</span><br>  git stash apply<br><span class="hljs-comment"># 恢复最近一次的stash，随后删除该记录</span><br>  git stash pop<br><span class="hljs-comment"># 恢复指定stash,如恢复第一条是0,第二条是1</span><br>  git stash pop stash@&#123;0&#125;<br><span class="hljs-comment"># 删除最近的一次stash</span><br>  git stash drop<br><span class="hljs-comment"># 清空stash</span><br>  git stash clear<br><br></code></pre></td></tr></table></figure><blockquote><p><a href="https://juejin.cn/post/7071780876501123085#heading-29">Git不要只会pull和push，试试这5条提高效率的命令</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AST抽象语法树</title>
      <link href="/ypf-blog/2022/06/22/ast/AST%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91/"/>
      <url>/ypf-blog/2022/06/22/ast/AST%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是抽象语法树"><a href="#什么是抽象语法树" class="headerlink" title="什么是抽象语法树?"></a>什么是抽象语法树?</h2><ul><li>抽象语法树 (Abstract Syntax Tree)，简称 AST，它是源代码语法结构的一种抽象表示。它是以树状的形式表现各种计算机编程语言(比如java、c、javascript等)的语法结构。 </li><li>我们可以通过诸如网站<a href="https://astexplorer.net/">astexplorer</a>很清晰的看到各种语言的 AST 结构。</li></ul><h2 id="estree规范"><a href="#estree规范" class="headerlink" title="estree规范"></a>estree规范</h2><ul><li>既然不同编程语言都有对应的AST,那么相对应的肯定需要规范来统一。<a href="https://github.com/estree/estree/blob/master/es2015.md">estree规范</a>就是成为操纵JavaScript源代码的工具的通用语言。它定义了JavaScript中所有涉及到的语法的表达形式</li><li>estree这个项目的初衷通过社区的力量，保证和es规范的一致性，通过自定义的语法结构来表述JavaScript的AST，后来随着知名度越来越高，多位知名工程师的参与，使得变成了事实意义上的规范，目前这个库是Mozilla和社区一起维护的。</li></ul><h2 id="js解析器"><a href="#js解析器" class="headerlink" title="js解析器"></a>js解析器</h2><p><strong>正因为有了estree规范,社区产生了各种js解析器(用于将js代码转换成符合estree规范的AST结构).</strong></p><ol><li><a href="https://github.com/jquery/esprima">Esprima</a>, 这是第一个用JavaScript编写的符合EsTree规范的解析器, 其也有<a href="https://esprima.org/demo/parse.html#">可视化网站</a>,类似astexplorer,用于快速清晰的看到js的AST结构</li></ol><p>举个🌰<br><code> const a=1</code><br>通过Esprima转化成ast结构就是</p><img src="images/ast.jpg" width="50%" height="50%" /><p>2.<a href="https://github.com/acornjs/acorn">acorn</a>,和Esprima类似,输出的ast都是符合EsTree规范的，目前webpack的AST解析器用的就是acorn</p><p>3.<a href="https://github.com/babel/babel/tree/master/packages/babel-parser">@babel/parser</a>,babel官方的解析器，最初fork于acorn叫Babylon，后来完全走向了自己的道路改名为@babel-parser(基于 ESTree 并修改过的 AST,但是符合estree规范的)，babel就是通过@babel/parser将js代码转换为 AST 抽象语法树的,其输出的ast都是符合EsTree规范的</p><p>4.<a href="https://github.com/eslint/espree">espree</a>,eslint的官方解析器,最早fock于Esprima,现在基于acorn开发.其输出的ast都是符合EsTree规范的</p><p>5.<a href="https://link.zhihu.com/?target=https://github.com/mishoo/UglifyJS">uglify-js</a>,用于混淆和压缩代码，因为一些原因，uglify-js自己<a href="https://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/">实现了一套AST规范</a>,其使用SpiderMonkey解释器,所生成的ast也可以叫做SpiderMonkey 树,也正是因为它的AST是自创的，不是标准的ESTree，es6以后新语法的AST，都不支持，所以没有办法压缩最新的es6的代码.如果需要压缩，可以用类似babel这样的工具先转换成ES5。注意:由于uglify-js其内部所使用的spiderMonkey解释器效率慢,官方支持 <code>-p --acorn</code>选项来使用Acorn解释所有代码。如果你传入这个选项，UglifyJS会<code>require(&quot;acorn&quot;)</code>,Acorn确实非常快（650k代码原来要380ms，现在只需250ms），但转换Acorn产生的SpiderMonkey树会额外花费150ms。所以总共比UglifyJS自己的解释器还要多花一点时间。</p><h2 id="js解析器如何生存AST"><a href="#js解析器如何生存AST" class="headerlink" title="js解析器如何生存AST"></a>js解析器如何生存AST</h2><p>词法分析–&gt;语法分析–&gt;AST树</p><p>我们来解释下:</p><h3 id="词法分析-即分词"><a href="#词法分析-即分词" class="headerlink" title="词法分析:即分词"></a>词法分析:即分词</h3><p>   1.一个一个字母的来读取字符, 然后与定义好的 JavaScript 关键字符做比较，生成对应的Token即单词;</p><blockquote><p>例如 var 这三个字符，它只能作为一个整体，语义上不能再被分解，因此它是一个 Token。<br>   2.词法分析器里，每个关键字是一个 Token(单元) ，每个标识符是一个 Token，每个操作符是一个 Token，每个标点符号也都是一个 Token。除此之外，还会过滤掉源程序中的注释和空白字符、换行符、空格、制表符等。<br>   3.最终，整个代码将被分割进一个tokens列表（或者说一维数组）。</p></blockquote><p>我们可以通过<a href="https://esprima.org/demo/parse.html#">esprima可视化网站</a>快速查看token形态</p><img src="images/token.png" width="50%" height="50%" /><h3 id="语法分析-在上面词法分析出来的-Token-转化成有语法含义的抽象语法树结构。同时，验证语法，语法如果有错的话，抛出语法错误。"><a href="#语法分析-在上面词法分析出来的-Token-转化成有语法含义的抽象语法树结构。同时，验证语法，语法如果有错的话，抛出语法错误。" class="headerlink" title="语法分析:在上面词法分析出来的 Token 转化成有语法含义的抽象语法树结构。同时，验证语法，语法如果有错的话，抛出语法错误。"></a>语法分析:在上面词法分析出来的 Token 转化成有语法含义的抽象语法树结构。同时，验证语法，语法如果有错的话，抛出语法错误。</h3><p><strong>上面我们介绍了各种js解析器以及解析器如何生成AST,下面我们介绍下AST的应用</strong></p><h2 id="AST应用"><a href="#AST应用" class="headerlink" title="AST应用"></a>AST应用</h2><ol><li>编辑器的错误提示、代码格式化、代码高亮、代码自动补全；</li><li>elint、prettier 对代码错误或风格的检查；</li><li>babel的es6转es5</li><li>vue模板编译、react模板编译</li><li>组件库按需引入如babel-plugin-import</li><li>TypeScript、JSX等转化为原生Javascript等等</li></ol><p>下面我们以babel的es转换举例来加深对AST的理解:</p><ul><li><font color="red">@babel/parser</font>:将js代码转换成AST树</li><li><font color="red">@babel/traverse</font>:对AST进行递归遍历(需要配合visitor操作ast树,下面会讲)</li><li><font color="red">@babel/generator</font>:AST树转换成新的js代码</li></ul><p>下面我们实操下:<br><strong>目的:将<code>const a=1;  </code>转换成<code>let a=1;</code></strong><br>直接看代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1. 引入3个依赖</span><br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/parser&quot;</span>);<br><span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/traverse&quot;</span>);<br><span class="hljs-keyword">const</span> generator = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>);<br><span class="hljs-comment">// 或者我们只需要安装@babel/core和@babel/generator,因为@babel/core已经内部自己require了@babel/parser和@babel/traverse</span><br><span class="hljs-keyword">const</span> core=<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/core&quot;</span>) <span class="hljs-comment">// 我们使用core.parse, core.traverse即可</span><br><span class="hljs-keyword">const</span> generator=<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>)<br><span class="hljs-comment">// 2. 这里我们用下面代码举例</span><br><span class="hljs-keyword">const</span> code = <span class="hljs-string">`const a=1;  `</span>;<br><span class="hljs-comment">// 3.parser将代码解析为抽象语法树（AST）</span><br><span class="hljs-keyword">const</span> ast = parser.<span class="hljs-title function_">parse</span>(code);<br><span class="hljs-comment">// 4.traverse 对AST进行递归遍历</span><br>traverse.<span class="hljs-title function_">default</span>(ast);<br><span class="hljs-comment">// 5. generator 将 AST 转回成代码</span><br><span class="hljs-keyword">const</span> result = generator.<span class="hljs-title function_">default</span>(ast).<span class="hljs-property">code</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// 打印结果 const a = 1;</span><br></code></pre></td></tr></table></figure><p>我们在node中执行上面代码, 打印结果发现除下代码后面空格没了,结果一样,没什么变化,并没有转换. 还记得我们上面介绍@babel/traverse时候,说它需要配合visitor.那么什么是visitor?</p><p><strong>Visitor(访问者)</strong></p><blockquote><p>访问者是一个用于 AST 遍历的跨语言的模式。 简单的说它们就是一个对象，定义了获取所有ast树节点的方法。这么说有些抽象所以让我们来看一个例子。</p></blockquote><p>我们上面说traverse.default(ast)是对AST进行递归遍历,那么我们要操作ast,肯定需要获取遍历的每个树节点吧,所以visitor就是一个包含各种树节点方法的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> visitor=&#123;<br>   <span class="hljs-title class_">VariableDeclaration</span>:&#123;<br>      <span class="hljs-title function_">enter</span>(<span class="hljs-params"></span>) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Entered, 进入type===VariableDeclaration节点!&quot;</span>);<br>      &#125;,<br>      <span class="hljs-title function_">exit</span>(<span class="hljs-params"></span>) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Exited,离开type===VariableDeclaration节点!&quot;</span>);<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面代码表示:</p><ul><li>VariableDeclaration: 对应的是ast树上的type值,即树节点类型,这里是变量声明</li><li>enter:进入节点时触发, 一层层进入直到没有子节点,然后再层一层的离开,直到根节点</li><li>exit:离开节点时触发</li></ul><p>一般exit用的少,所以如果我们只用enter,我们可以简写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> visitor=&#123;<br>   <span class="hljs-title class_">VariableDeclaration</span>()&#123;<br>   <br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="images/babel.png" /><p>一般我们就用上面这种,直接key=具体节点类型,直接通过<a href="https://astexplorer.net/">astexplorer</a>快速查看type值, value为enter函数, 来操作ast, 实际最原始的是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> visitor=&#123;<br>   <span class="hljs-title function_">enter</span>(<span class="hljs-params"></span>) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Entered, 进入所有节点都会触发&quot;</span>);<br>   &#125;,<br>   <span class="hljs-title function_">exit</span>(<span class="hljs-params"></span>) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Exited,离开所有节点都会从触发&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个知道就行了.<br>现在我们重新修改上面的🌰</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> visitor=&#123;<br>   <span class="hljs-title class_">VariableDeclaration</span>(path)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-property">node</span>.<span class="hljs-property">kind</span>) <span class="hljs-comment">// const</span><br>      path.<span class="hljs-property">node</span>.<span class="hljs-property">kind</span>=<span class="hljs-string">&quot;let&quot;</span><br>   &#125;<br>&#125;<br>traverse.<span class="hljs-title function_">default</span>(ast,visitor);<br></code></pre></td></tr></table></figure><p>执行,会发现我们已经输出 <code>let a=1;</code></p><p>注意: visitor的enter函数有个path参数;可以简单地认为path是对当前访问的node的一层包装。例如使用path.node可以访问到当前的节点，使用path.parent可以访问到父节点.</p><p>我们也可以这样写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> types = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/types&quot;</span>); <br><span class="hljs-keyword">const</span> visitor=&#123;<br>    <span class="hljs-title function_">enter</span>(<span class="hljs-params">path</span>) &#123;<br>       <span class="hljs-keyword">if</span> (types.<span class="hljs-title function_">isVariableDeclaration</span>(path.<span class="hljs-property">node</span>)) &#123;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(path.<span class="hljs-property">node</span>.<span class="hljs-property">kind</span>) <span class="hljs-comment">// const</span><br>           path.<span class="hljs-property">node</span>.<span class="hljs-property">kind</span>=<span class="hljs-string">&quot;let&quot;</span><br>       &#125;<br>    &#125;,<br> &#125;<br> traverse.<span class="hljs-title function_">default</span>(ast,visitor);<br></code></pre></td></tr></table></figure><p>上面引用了常用的依赖 <code>@babel/types</code>的isVariableDeclaration方法,用于判断是否是变量声明节点</p><ul><li><font color="red">@babel/types</font>:一个封装了各种操作AST 节点方法的类似Lodash式工具库,我们可以通过它对具体的 AST 节点进行判断添加、更新、修改及移除等操作非常方便；</li></ul><h3 id="打印enter、exit"><a href="#打印enter、exit" class="headerlink" title="打印enter、exit"></a>打印enter、exit</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; parse, traverse &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/core&quot;</span>);<br><span class="hljs-keyword">const</span> generator = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@babel/generator&quot;</span>);<br><span class="hljs-keyword">const</span> code = <span class="hljs-string">`function ast()&#123;&#125;`</span>;<br><span class="hljs-keyword">const</span> ast = <span class="hljs-title function_">parse</span>(code);<br><span class="hljs-keyword">let</span> indent = <span class="hljs-number">0</span>; <span class="hljs-comment">// 缩进空格数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">padding</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot; &quot;</span>.<span class="hljs-title function_">repeat</span>(indent);<br>&#125;<br><span class="hljs-title function_">traverse</span>(ast, &#123;<br>  <span class="hljs-title function_">enter</span>(<span class="hljs-params">node</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">padding</span>() + <span class="hljs-string">&quot;enter&quot;</span> + node.<span class="hljs-property">type</span>);<br>    indent += <span class="hljs-number">2</span>;<br>  &#125;,<br>  <span class="hljs-title function_">exit</span>(<span class="hljs-params">node</span>) &#123;<br>      indent -= <span class="hljs-number">2</span>;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">padding</span>() + <span class="hljs-string">&quot;exit&quot;</span> + node.<span class="hljs-property">type</span>);<br>  &#125;,<br>&#125;);<br><span class="hljs-keyword">const</span> result = generator.<span class="hljs-title function_">default</span>(ast).<span class="hljs-property">code</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <br></code></pre></td></tr></table></figure><img src="images/1.jpg" width="50%" height="50%" />上图我们能看出enter、exit的执行顺序:`一层层进入,一层一层离开`介绍了这么多, 我们应该了解了ast是啥、ast怎么用了吧?趁热打铁, 我们看下如何编写babel插件(把上面的🌰封装成babel插件引用)?<h2 id="如何编写babel插件"><a href="#如何编写babel插件" class="headerlink" title="如何编写babel插件?"></a>如何编写babel插件?</h2><h3 id="babel的编译流程"><a href="#babel的编译流程" class="headerlink" title="babel的编译流程?"></a>babel的编译流程?</h3><p>上面我们讲了babel的es转换举例来加深对AST的理解的例子, 其实这个正是babel的编译流程,我们总结下:</p><ol><li>解析阶段：通过<code>@babel/parser</code>将代码解析ast.解析一般分为两个阶段：词法分析和语法分析。</li><li>转换阶段：通过<code>@babel/traverse</code>依赖visitor(也就是babel的plugin/preset),进行ast修改</li><li>生成阶段: 通过<code> @babel/generator</code>将上一步处理完的ast转换成代码字符串</li></ol><h3 id="babel的插件系统"><a href="#babel的插件系统" class="headerlink" title="babel的插件系统?"></a>babel的插件系统?</h3><p>Babel 的核心模块 @babel/core，@babel/parser，@babel/traverse 和 @babel/generator 只是提供了完整的编译流程。而具体的转换逻辑需要插件来完成。上面我们说<code>@babel/traverse</code>配合visitor,本质上,plugin就是visitor</p><blockquote><p>原始代码 –&gt; [Babel Plugin] –&gt; 转换后的代码</p></blockquote><p>我们在使用babel时候,一般都是通过配置文件来设置,如 <code>babel.config.js</code>, 其中,里面有两个配置选项  plugins 和 preset 就是来配置插件的.</p><ul><li>plugin不用解释,就是包装的visitor,Babel插件一般尽可能拆成小的力度，开发者可以单独安装。比如对ES6转ES5的功能，Babel官方拆成了20+个插件。开发单独引入,而不是直接引入全家桶</li><li>preset(预设) 由于plugin颗粒度较细, 开发中逐个引入插件就变得麻烦、效率低下了,我们把常用的plugin放到一起,就是preset</li></ul><p>最常见的如@babel/preset-env 预设，它整合了很多常用的plugin,其包含了目前以及未来最新的ES语法特性，并且可以通过配置目标运行环境范围，自动按需引入插件。</p><img src="images/@babel:preset-env.jpg" width="50%" height="50%" /><p>所以我们可以这样写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>   <span class="hljs-attr">presets</span>: [<span class="hljs-string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span>],<br>&#125;<br>或者单独一个一个引用<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>   <span class="hljs-attr">plugins</span>:[<span class="hljs-string">&quot;@babel/plugin-syntax-jsx&quot;</span>,<span class="hljs-string">&quot;@babel/plugin-syntax-async-generators&quot;</span>,<span class="hljs-string">&quot;@babel/plugin-syntax-dynamic-import&quot;</span>,...]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Plugin-Preset-执行顺序"><a href="#Plugin-Preset-执行顺序" class="headerlink" title="Plugin/Preset 执行顺序"></a>Plugin/Preset 执行顺序</h4><p>我们在配置文件里面配置了Plugin/Preset,那么babel执行的时候是按什么顺序呢?</p><ul><li>Plugin 会从第一个由上往下开始顺序执行。</li><li>Preset 顺序则刚好相反(从最后一个逆序执行)</li><li>如果Plugin和Preset同时存在,先执行 plugins 的配置，再执行 presets 的配置</li></ul><p>举个🌰</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>   <span class="hljs-string">&quot;plugins&quot;</span>: [<br>      <span class="hljs-string">&quot;transform-decorators-legacy&quot;</span>,<br>      <span class="hljs-string">&quot;transform-class-properties&quot;</span><br>   ]<br>&#125;<br>执行顺序为:transform-decorators-legacy、transform-<span class="hljs-keyword">class</span>-properties<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>   <span class="hljs-string">&quot;preset&quot;</span>: [<br>    <span class="hljs-string">&quot;es2015&quot;</span>,<br>    <span class="hljs-string">&quot;react&quot;</span>,<br>    <span class="hljs-string">&quot;vue&quot;</span><br>   ]<br>&#125;<br>执行顺序为:vue， react， 最后 es2015。<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>   <span class="hljs-string">&quot;presets&quot;</span>: [<br>         [<br>            <span class="hljs-string">&quot;@babel/preset-env&quot;</span>,<br>            <span class="hljs-string">&quot;@babel/preset-dep&quot;</span><br>         ]<br>   ],<br>   <span class="hljs-string">&quot;plugins&quot;</span>: [<br>      [<span class="hljs-string">&quot;@babel/plugin-proposal-decorators&quot;</span>, &#123; <span class="hljs-string">&quot;legacy&quot;</span>: <span class="hljs-literal">true</span> &#125;],<br>      [<span class="hljs-string">&quot;@babel/plugin-proposal-class-properties&quot;</span>, &#123; <span class="hljs-string">&quot;loose&quot;</span>: <span class="hljs-literal">true</span> &#125;],<br>      <span class="hljs-string">&quot;@babel/plugin-transform-runtime&quot;</span>,<br>   ]<br>&#125;<br>执行顺序为:@babel/plugin-proposal-decorato、@babel/plugin-proposal-<span class="hljs-keyword">class</span>-properties、<br>         @babel/plugin-transform-runtime、@babel/preset-dep、@babel/preset-env<br></code></pre></td></tr></table></figure><p>下面我们实操下自己写plugin以及preset,</p><ol><li>npm init -y 初始化package.json, script增加指令<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;babel test.js&quot;</span><br>&#125;,<br></code></pre></td></tr></table></figure></li><li>npm install –save-dev  @babel/cli   </li><li>新建test.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> a=<span class="hljs-number">1</span>  ;<br></code></pre></td></tr></table></figure></li><li>新建plugin.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">babel</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">types</span>: t, template &#125; = babel; <span class="hljs-comment">// babel会自动注入</span><br>  <span class="hljs-keyword">const</span> visitor = &#123;<br>    <span class="hljs-title class_">VariableDeclaration</span>(path,state) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state.<span class="hljs-property">opts</span>.<span class="hljs-property">a</span>) <span class="hljs-comment">//1  通过state.opts可以获取传给插件参数</span><br>      path.<span class="hljs-property">node</span>.<span class="hljs-property">kind</span> = <span class="hljs-string">&quot;let&quot;</span>;<br>    &#125;,<br>  &#125;;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;my-plugin&quot;</span>,<br>    visitor,<br>  &#125;;<br>&#125;;<br><br></code></pre></td></tr></table></figure></li><li>新建babel.config.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=&#123;<br>    <span class="hljs-attr">plugins</span>:[<br>        [<span class="hljs-string">&quot;./plugin.js&quot;</span>,&#123;<br>            <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>  <span class="hljs-comment">// 参数</span><br>        &#125;]<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li>执行npm run build 即可看到 let a=1;  注意空格也会去除</li></ol><p>上面我们就完成了一个plugin,现在我们用presets</p><ol start="7"><li>我们新建立preset.js</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">presets</span>: [], <span class="hljs-comment">// 这里可以引入其他preset</span><br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-string">&quot;./plugin&quot;</span>],<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="8"><li>修改babel.config.js为<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=&#123;<br>    <span class="hljs-attr">presets</span>:[<span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./preset&quot;</span>)]<br>&#125;<br></code></pre></td></tr></table></figure></li><li>执行npm run build即可</li></ol><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><p>上面我们讲了plugin和preset, 并开发了插件, 但是我们的名字是随便定义的, plugin.js和preset.js, 而我们想要发到npm上,我们该怎么命名呢?</p><ol><li>如果配置文件中这样写: plugins: [“./plugin”], 相当于是./ 开头相对路径,babel默认不会处理,需要自己上面那种引入</li><li>如果配置文件中这样写: plugins: [“aa”],babel会解析成 babel-plugin-aa,所以node_module名字应该叫babel-plugin-aa</li><li>如果配置文件中这样写: plugins: [“@scope/aa”],babel会解析成 @scope/babel-plugin-aa,所以node_module名字应该叫@scope/babel-plugin-aa</li><li>如果配置文件中这样写: plugins: [“@babel/aa”],babel会解析成 @babel/plugin-aa,所以node_module名字应该叫@babel/plugin-aa</li></ol><hr><blockquote><p><a href="https://www.h5w3.com/85419.html">简单介绍下各种 JavaScript 解析器</a><br><a href="https://juejin.cn/post/6844904035271573511">手把手带你入门 AST 抽象语法树</a><br><a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md">babel</a><br><a href="https://blog.csdn.net/Pentoncos/article/details/114627658">Babel的工作原理及实现一个插件</a><br><a href="https://www.jianshu.com/p/eb3428512eb2">Babel的原理</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ast </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
